var magellan=angular.module("magellan",["ui.router","ngProgress","ngAnimate"],["$httpProvider",function(e){e.interceptors.push("AuthInterceptor")}]);magellan.constant("AppConfig",{"log.info":!0,"log.error":!0,"quiz.country.questions":3,"quiz.country.types":{1:"CAPITAL_OF_COUNTRY",2:"COUNTRY_OF_CAPITAL",3:"POPULATION_OF_COUNTRY",4:"AREA_OF_COUNTRY",5:"FLAG_OF_COUNTRY"},"settings.user.colors":["soft_red","thunderbird","old_brick","new_york_pink","snuff","honey_flower","san_marino","shakespeare","ming","gossip","eucalyptus","mountain_meadow","jade","confetti","california","burnt_orange","jaffa","gallery","edward","lynch"]}),magellan.controller("AppCtrl",["$rootScope","$scope","$state","AuthSrv","UserSrv","CountrySrv","QuizSrv",function(e,n,t,r,o,u,i){n.app={config:{title:"Magellan",subtitle:"Teste dein Wissen über die Länder unserer Erde",author:"Michael Stifter"}},r.getUser().then(function(e){n.user=e,n.$broadcast("user.loaded"),u.init().then(function(e){n.$broadcast("countries.loaded",e),i.setCountries(e)})})["catch"](function(e){n.user=null}),n.isProgressBarVisible=function(){return t.is("quiz")};var s=function(){t.go("home")};n.goToHome=s,e.$on("$stateChangeError",function(e,n,r,o,u,i){"Not authorized"===i&&t.go("home")}),n.$on("app.login",function(e,o){n.user=o,r.setUser(o),u.init().then(function(e){n.$broadcast("countries.loaded",e),i.setCountries(e)}),t.go("quiz")}),n.$on("app.logout",function(e,o){n.user=null,r.clearUser(),t.go("home")})}]);var Quiz=function(){var e=null,n=[];this.start=function(){if(n.length<=0)throw Error("Cannot start a quiz without questions");return this.nextQuestion()},this.isActive=function(){return this.hasStarted()&&!this.hasEnded()},this.hasStarted=function(){return null!==e},this.hasEnded=function(){return this.hasStarted()&&e>=n.length},this.submitted=!1,this.addQuestion=function(e){if(void 0===e)throw Error("No question object passed");var t=!0,r=["config","hint","solution","answer","question","getInfo","info","points","answered","hintsAllowed","hintsRemaining"];r.forEach(function(n){if(!e.hasOwnProperty(n))throw t=!1,new Error("Question must have property '"+n+"'")}),t&&n.push(e)},this.nextQuestion=function(){return null===e?e=0:e++,!this.hasEnded()&&n[e]},this.currentQuestion=function(){return this.isActive()?n[e]:null},this.getTotalPoints=function(){if(!this.hasStarted())return null;var e=0;return n.forEach(function(n){var t=n.points();void 0!==t&&(e+=t)}),e},this.getCurrentQuestionNumber=function(){return null===e?null:e+1},this.getNumberOfQuestions=function(){return n.length}},Question=function(e){var n=null,t=null,r=null,o=null,u=0,i=null,s=null,a=!1,l=function(e){n=e.text,t=e.info||{},r=e.answer,i=e.checkAnswer||null,o=e.hints||{allowed:!1,maximum:0,cost:0,give:null}};e&&l(e),this.config=function(e){l(e)},this.question=function(){return n},this.info=function(e,n){return void 0===n?t[e]:void(t[e]=n)},this.getInfo=function(){return t},this.solution=function(){return a?r:null},this.hint=function(){if(!o.allowed)return null;if(o.allowed&&!o.give)throw new Error("Hints allowed but no give method passed");return u<o.maximum&&u++,o.give(u,r)},this.answer=function(e){if(!a&&i)return a=!0,s=i(r,e,u,o.cost,t),s=Math.max(0,s),s=Math.floor(s)},this.points=function(){if(a&&null!==s)return s},this.answered=function(){return a},this.hintsAllowed=function(){return null!==o?o.allowed:null},this.hintsRemaining=function(){var e=this.hintsAllowed();return null===e||e===!1?null:o.maximum-u}},getRandomInt=function(e,n){return Math.floor(Math.random()*(n-e+1))+e},getStringBetween=function(e,n,t){var r=e.indexOf(n),o=e.indexOf(t);return r>=0&&o>=0&&o>r?e.substr(r+1,o-r-1):null};"undefined"!=typeof module&&module.exports&&(module.exports.Question=Question,module.exports.Quiz=Quiz),angular.module("magellan").config(["$locationProvider","$stateProvider","$urlRouterProvider",function(e,n,t){e.html5Mode(!0),t.otherwise("/home");var r=function(e,n,t){return e.getUser().then(function(e){return e})["catch"](function(e){return t.reject("Not authorized")})};r.$inject=["AuthSrv","LogSrv","$q"],n.state("home",{url:"/home",templateUrl:"/build/views/partials/home.partial.html",params:{action:null}}).state("quiz",{url:"/quiz",templateUrl:"/build/views/partials/quiz.partial.html",resolve:{auth:r}}).state("countries",{url:"/countries",templateUrl:"/build/views/partials/countries.partial.html",resolve:{auth:r}}).state("countries.detail",{url:"/:alpha3Code",templateUrl:"/build/views/partials/countries-detail.partial.html",resolve:{auth:r}}).state("login",{url:"/login",templateUrl:"/build/views/partials/login.partial.html"}).state("logout",{url:"/logout",controller:"LogoutCtrl"}).state("register",{url:"/register",templateUrl:"/build/views/partials/register.partial.html"}).state("settings",{url:"/settings",templateUrl:"/build/views/partials/settings.partial.html",resolve:{auth:r}}).state("password",{url:"/password",templateUrl:"/build/views/partials/password.partial.html",resolve:{auth:r}}).state("about",{url:"/about",templateUrl:"/build/views/partials/about.partial.html"}).state("highscore",{url:"/highscore",templateUrl:"/build/views/partials/highscore.partial.html",resolve:{auth:r}}).state("faq",{url:"/faq",templateUrl:"/build/views/partials/faq.partial.html",resolve:{auth:r}}).state("countries-difficulty",{url:"/countries-difficulty",templateUrl:"/build/views/partials/country-difficulty.partial.html",resolve:{auth:r}})}]),angular.module("magellan").controller("CountriesCtrl",["$scope","CountrySrv",function(e,n){var t=null,r=null,o=function(){t=n.getCountriesByLetter(),r=Object.keys(t),e.$$phase?(e.countryKeys=r,e.countriesByLetter=t):e.$apply(function(){e.countryKeys=r,e.countriesByLetter=t})};n.areCountriesLoaded()&&o(),e.$on("countries.loaded",function(){o()})}]),angular.module("magellan").controller("CountryDetailCtrl",["$scope","CountrySrv","$stateParams",function(e,n,t){var r=t.alpha3Code;n.areCountriesLoaded()&&(e.country=n.getCountryByAlpha3(r)),e.$on("countries.loaded",function(){e.$apply(function(){e.country=n.getCountryByAlpha3(r)})});var o=function(e){return n.getCountryByAlpha3(e)};e.getCountryFromService=o}]),angular.module("magellan").controller("CountryDifficultyCtrl",["$scope","CountrySrv",function(e,n){var t=function(){var t=n.getCountries(),r={easy:[],medium:[],hard:[],unassigned:[]};t.sort(function(e,n){return n.population-e.population}).forEach(function(e){r[e.difficulty].push(e)}),e.$$phase?(e.difficulties=r,e.difficultyKeys=Object.keys(r)):e.$apply(function(){e.difficulties=r,e.difficultyKeys=Object.keys(r)})};n.areCountriesLoaded()&&t(),e.$on("countries.loaded",function(e,n){t()})}]),angular.module("magellan").controller("DropdownCtrl",["$scope",function(e){function n(){u=!u}function t(){u=!0}function r(){u=!1}function o(){return u}var u=!1;e.toggleDropdown=n,e.showDropdown=t,e.hideDropdown=r,e.isDropdownVisible=o,e.$on("click.outside",function(n,t){o()&&(e.$$phase?r():e.$apply(function(){r()}))})}]),angular.module("magellan").controller("HighscoreCtrl",["$scope","ScoreSrv","LogSrv",function(e,n,t){e.scoreList=[],n.getHighscoreList().then(function(n){e.$$phase?e.scoreList=o(n):e.$apply(function(){e.scoreList=o(n)})})["catch"](function(e){t.error(e)});var r=function(n){return e.user._id===n},o=function(e){var n=0,t=null;return e.forEach(function(e){t&&e.score===t||(n++,e.rank=n+"."),t=e.score}),e};e.isMyself=r}]),angular.module("magellan").controller("HomeCtrl",["$scope","LogSrv","$stateParams",function(e,n,t){if(e.message=null,t.action){var r=t.action;switch(r){case"register.successful":e.message={type:"success",text:"Gratulation! Die Anmeldung war erfolgreich. Herzlich willkommen bei Magellan."};break;default:e.message=null}}}]),angular.module("magellan").controller("LoginCtrl",["$scope","UserSrv","FocusSrv",function(e,n,t){e.message=null,e.login=function(t,r){n.login(t,r).then(function(n){e.message=null,e.$emit("app.login",n.data)})["catch"](function(n){console.error(n);var t;t=401===n.status?"Falscher Benutzername oder Passwort":"Beim Einloggen scheint etwas schief gegangen zu sein",e.message={type:"error",text:t}})},t("#username")}]),angular.module("magellan").controller("LogoutCtrl",["$scope","UserSrv",function(e,n){n.logout().then(function(){e.$emit("app.logout")})}]),angular.module("magellan").controller("PasswordCtrl",["$scope","UserSrv","LogSrv","FocusSrv",function(e,n,t,r){e.passObj={},e.message={};var o=function(){return t.info("update password"),e.passObj["new"]!==e.passObj.confirmation?void(e.message={type:"error",text:"Die Passwörter stimmen nicht überein"}):void n.updatePassword({password:e.passObj["new"]}).then(function(e){t.info("successfully updated password",e)})["catch"](function(e){t.error("failed to update password".err)})},u=function(){o()};r("#password-current"),e.updatePassword=o,e.delegateSubmit=u}]),angular.module("magellan").controller("QuizDirectiveController",["$scope","QuizSrv","LogSrv","FocusSrv","ngProgressFactory","$filter",function(e,n,t,r,o,u){var i,s=function(){e.progressbar=o.createInstance(),e.progressbar.setParent(document.getElementById("quiz-progress")),e.progressbar.setAbsolute(),e.progressbar.setColor("#336e7b"),e.isResultsPageVisible=!1,e.achievements=[],e.bests=[],e.answerInput={},e.hint=null,e.multiplierOptions=[{value:1,label:""},{value:1e3,label:"Tsd."},{value:1e6,label:"Mio."}],i=null},a=function(){if(i=n.getCurrentQuestion(),e.hint=null,null!==i){if(i.getInfo().input&&0===i.getInfo().input.indexOf("number"))switch(i.getInfo().input){case"number.high":e.answerInput.multiplier={value:1e6,label:"Mio."};break;case"number.medium":e.answerInput.multiplier={value:1e3,label:"Tsd."};break;default:e.answerInput.multiplier={value:1,label:""}}else e.answerInput.multiplier=null;A(),r(".answerInput")}else e.progressbar.set(0)},l=function(){return i},c=function(){return n.getCurrentQuestionNumber()},f=function(){return n.getNumberOfQuizQuestions()},d=function(){return C(l().question(),"question-highlight")+"?"},g=function(){return i&&i.getInfo().media?i.getInfo().media:null},p=function(){e.isResultsPageVisible=!0},h=function(){e.$$phase?e.isResultsPageVisible=!1:e.$apply(function(){e.isResultsPageVisible=!1})},m=function(){return null!==i&&(null!==i.hintsRemaining()&&i.hintsRemaining()>0)},v=function(){if(e.answerInput.answer&&!i.answered()){var n=String(e.answerInput.answer);i.getInfo().input&&0===i.getInfo().input.indexOf("number")&&(n=n.replace(",",".")),e.answerInput.multiplier&&(n*=e.answerInput.multiplier.value),e.answerInput.points=i.answer(n),r(S()?"#btnContinueFinished  ":"#btnNextQuestion")}},w=function(){return!(!n.isQuizRunning()||null===i)&&i.answered()},b=function(){n.nextQuestion(),e.answerInput.answer="",a()},O=function(){e.hint=i.hint(),r(".answerInput")},C=function(e,n){return e.replace("[","<span class='"+n+"'>").replace("]","</span>")},y=function(e){13==e.which&&v()},A=function(){var n=c()/f()*100;e.progressbar.set(n)},S=function(){return c()>=f()},_=function(n,t,r){var o=[],u=!0;if(n.indexOf("overall_best")>=0&&(o.push({text:"Du hast einen neuen absoluten Rekord geschafft!"}),u=!1),n.indexOf("overall_best_equalised")>=0&&(o.push({text:"Du hast den aktuellen absoluten Rekord eingestellt!"}),u=!1),n.indexOf("personal_best")>=0&&n.indexOf("overall_best")<0&&(o.push({text:"Du hast einen neuen persönlichen Rekord geschafft!"}),u=!1),n.indexOf("personal_best_equalised")>=0&&n.indexOf("overall_best_equalised")<0&&(o.push({text:"Du hast gleich viele Punkte geschafft wie bei deinem persönlichen Rekord!"}),u=!1),n.indexOf("new_daily_best")>=0&&0===o.length&&o.push({text:"Du hast einen neuen persönlichen Tagesrekord geschafft!"}),e.achievements=o,u&&t&&t.id&&t.date&&t.score&&r&&r.id&&r.date&&r.score){var i=[];r.type="overall",i.push(r),t.id!==r.id&&(t.type="personal",i.push(t)),e.bests=i}else e.bests=null},P=function(){p(),b(),n.conclude().then(function(e){_(e.events||[],e.personalBest,e.overallBest)})["catch"](function(e){t.error(e)})},T=function(n){var t;if("personal"===n.type)t="Dein persönlicher Rekord liegt bei <span class='bold'>{POINTS} Punkten</span>, aufgestellt am {DATE}.";else{var r=n.id===e.user._id;t=r?"Du hältst den absoluten Rekord mit <span class='bold'>{POINTS} Punkten</span>, aufgestellt am {DATE}.":"<span class='highlight'>{USERNAME}</span> hält den absoluten Rekord mit <span class='bold'>{POINTS} Punkten</span>, aufgestellt am {DATE}."}return t.replace("{POINTS}",u("number")(n.score)).replace("{DATE}",U(n.date)).replace("{USERNAME}",n.username)},U=function(e){return e=new Date(e),$(e.getDate(),"00")+"."+$(e.getMonth()+1,"00")+"."+(e.getYear()+1900)},$=function(e,n){return String(n+e).slice(-n.length)},R=function(){quiz=null,e.$emit("quiz.restart"),s(),a()},I=function(e,n){if(13==e.which)switch(n){case"next_question":b();break;case"continue_finished":P()}};e.$on("quiz.start",function(e,n){h()}),e.$on("$destroy",function(e,t){n.hasQuizStarted()&&n.hasQuizEnded()&&n.dispose()}),s(),a(),e.getQuestion=l,e.getCurrentQuestionNumber=c,e.renderQuestionText=d,e.submitAnswer=v,e.questionAnswered=w,e.nextQuestion=b,e.handleKeyPress=y,e.getQuestionMedia=g,e.requestHint=O,e.wasLastQuestion=S,e.continueFinished=P,e.getBestText=T,e.restartQuiz=R,e.hintsAvailable=m,e.enterListener=I}]),angular.module("magellan").controller("QuizCtrl",["$scope","QuizSrv","LogSrv",function(e,n,t){var r=function(e){n.init().then(function(){e&&"function"==typeof e&&e()})["catch"](function(e){t.error(e)})},o=function(){return n.isQuizRunning()},u=function(){return n.hasQuizStarted()},i=function(){return n.hasQuizEnded()},s=function(){return n.getTotalPoints()};e.$on("quiz.restart",function(t,o){n.dispose(),r(function(){e.$broadcast("quiz.start")})}),e.startQuiz=r,e.isQuizRunning=o,e.hasQuizStarted=u,e.hasQuizEnded=i,e.getTotalPoints=s}]),angular.module("magellan").controller("RegisterCtrl",["$scope","LogSrv","FocusSrv","UserSrv","$state","$window",function(e,n,t,r,o,u){e.newUser={},e.message=null;var i=function(t){return!!t&&void(s()&&r.register(e.newUser).then(function(n){200===n.status?(e.$emit("app.login",n.data),o.go("home",{action:"register.successful"})):e.message={type:"error",text:"Bei der Anmeldung scheint etwas schief gegangen zu sein"}})["catch"](function(t){n.error(t);var r;switch(t.message){case"Username already exists":r="Der Benutzername existiert bereits";break;default:r="Bei der Anmeldung scheint etwas schief gegangen zu sein"}e.$$phase?e.message={type:"error",text:r}:e.$apply(function(){e.message={type:"error",text:r}})}))},s=function(){e.message=null;var n=e.newUser.password,t=e.newUser.password2;return e.newUser.username&&e.newUser.email&&n&&t?""===n||""===t?e.message={type:"error",text:"Die Passwörter können nicht leer sein"}:n!==t&&(e.message={type:"error",text:"Die Passwörter stimmen nicht überein"}):e.message={type:"error",text:"Alle Felder müssen ausgefüllt sein"},!e.message},a=function(){i(!0)};e.delegateSubmit=a,e.register=i,t("#username")}]),angular.module("magellan").controller("SettingsCtrl",["$scope","AppConfig","FocusSrv","LogSrv","UserSrv",function(e,n,t,r,o){var u=function(){e.message=null;var u=n["settings.user.colors"];e.userObj={username:e.user.username,email:e.user.email,color:e.user.color},e.userColors=u;var i=function(n){e.userObj.color=n},s=function(){o.updateBasic(e.userObj).then(function(n){e.user.username=e.userObj.username,e.user.email=e.userObj.email,e.user.color=e.userObj.color,e.$apply(function(){e.message={type:"success",text:"Einstellungen wurden erfolgreich gespeichert"}})})["catch"](function(n){r.error("Update user",n);var t;switch(n.message){case"Username already exists":t="Der Benutzername ist bereits vergeben";break;default:t="Die Einstellungen konnten nicht gespeichert werden"}e.$apply(function(){e.message={type:"error",text:t}})})},a=function(){s(!0)};e.setColor=i,e.updateUser=s,e.delegateSubmit=a,t("#username")};e.user&&u(),e.$on("user.loaded",function(e,n){u()})}]),angular.module("magellan").filter("renderHtml",["$sce",function(e){return function(n){return e.trustAsHtml(n)}}]),angular.module("magellan").filter("textOrNumber",["$filter",function(e){return function(n,t){return t=void 0!==t?0:t,isNaN(n)?n:e("number")(n,t)}}]),angular.module("magellan").directive("clickOutside",["$parse","$document","$rootScope",function(e,n,t){return{restrict:"A",link:function(e,r,o){function u(e){e.stopPropagation();var n=$(e.target).parents(),o=n.index($(r))!==-1,u=e.target===r[0],i=!o&&!u;i&&t.$broadcast("click.outside",e)}n.bind("click",u),r.bind("remove",function(){n.unbind("click",u)})}}}]),angular.module("magellan").directive("quiz",function(){return{templateUrl:"build/views/templates/quiz-directive.template.html",scope:!0,controller:"QuizDirectiveController",restrict:"E",link:function(e,n,t){}}}),angular.module("magellan").factory("AuthInterceptor",["AuthTokenSrv",function(e){var n=function(n){var t=e.getToken();return t&&(n.headers=n.headers||{},n.headers["X-Auth"]=t),n};return{request:n}}]),angular.module("magellan").factory("AuthTokenSrv",["$window",function(e){var n=e.sessionStorage,t="auth-token",r=function(){return n.getItem(t)},o=function(e){e?n.setItem(t,e):n.removeItem(t)};return{getToken:r,setToken:o}}]),angular.module("magellan").factory("AuthSrv",["UserSrv",function(e){var n=null,t=function(){return new Promise(function(t,r){null!==n?t(n):e.getUserFromStorage().then(function(e){n=e,t(e)})["catch"](function(e){r("Not logged in")})})},r=function(e){n=e},o=function(){n=null};return{setUser:r,getUser:t,clearUser:o}}]),angular.module("magellan").factory("CountrySrv",["$http","IndexedDBSrv","LogSrv",function(e,n,t){var r=null,o=null,u=null,i="magellan",s="countryStore",a="countries",l="version",c=n.indexedDBAvailable(),f=function(){return d()},d=function(){return c?new Promise(function(e,a){n.createDatabase(i,s).then(h).then(m).then(v).then(g).then(p).then(function(n){r=n.countries,t.info("loaded countries from",n.loadStrategy.toUpperCase()),o={},u={},r.forEach(function(e){o[e.alpha3Code]=e;var n=e.name.substr(0,1).toUpperCase();switch(n){case"Ä":n="A";break;case"Ö":n="O";break;case"Ü":n="U"}void 0===u[n]&&(u[n]=[]),u[n].push({alpha3Code:e.alpha3Code,name:e.name})}),e(r)})["catch"](function(e){t.error("failed to load countries",e),a(e)})}):b()},g=function(e){return new Promise(function(n,t){var r,o=e.internalVersion,u=e.externalVersion;r=null===o?"api":u>o?"api":"db",e.loadStrategy=r,n(e)})},p=function(e){return new Promise(function(t,r){var o=e.loadStrategy;switch(o){case"api":b().then(function(r){e.countries=r,n.putItem(i,s,{name:a,value:r}),n.putItem(i,s,{name:l,value:e.externalVersion}),t(e)})["catch"](function(e){r(e)});break;case"db":w(e).then(function(e){t(e)})["catch"](function(e){r(e)});break;default:r("Unknown load strategy")}})},h=function(){return new Promise(function(e,n){e({})})},m=function(e){return new Promise(function(t,r){n.retrieveItem(i,s,l).then(function(n){e.internalVersion=n.value,t(e)})["catch"](function(n){e.internalVersion=null,t(e)})})},v=function(e){return O().then(function(n){return e.externalVersion=n,e})},w=function(e){return new Promise(function(t,r){n.retrieveItem(i,s,a).then(function(n){e.countries=n.value,t(e)})["catch"](function(e){t(null)})})},b=function(){return new Promise(function(n,t){e.get("/api/countries").then(function(e){n(e.data)})["catch"](function(e){t(e)})})},O=function(){return new Promise(function(n,t){e.get("/api/countries/version").then(function(e){n(e.data.version||0)})["catch"](function(e){n(0)})})},C=function(e){return null===o?null:o[e]},y=function(){return r},A=function(){return null===u?null:u},S=function(){return null!==r&&r.length>0};return{init:f,getCountries:y,getCountryByAlpha3:C,getCountriesByLetter:A,areCountriesLoaded:S}}]),angular.module("magellan").factory("FocusSrv",["$timeout","$window",function(e,n){return function(t){e(function(){var e=n.document.querySelector(t);e&&e.focus()})}}]),angular.module("magellan").factory("IndexedDBSrv",["$window",function(e){var n="name",t=e.indexedDB||e.webkitIndexedDB||e.msIndexedDB,r=e.IDBKeyRange||e.webkitIDBKeyRange,o=e.IDBTransaction||e.webkitIDBTransaction;o&&(o.READ_WRITE=o.READ_WRITE||"readwrite",o.READ_ONLY=o.READ_ONLY||"readonly");var u=function(){return!!t},i=function(e,r){return new Promise(function(o,u){var i=t.open(e);i.onupgradeneeded=function(e){var t=e.target.result;t.createObjectStore(r,{keyPath:n})},i.onsuccess=function(e){o(e)},i.onerror=function(e){u(e)}})},s=function(e){return new Promise(function(n,r){var o=t.deleteDatabase(e);o.onsuccess=function(e){n(e)},o.onerror=function(e){r(e)}})},a=function(e,n,r){return new Promise(function(u,i){var s=t.open(e);s.onsuccess=function(e){var t=e.target.result,s=t.transaction(n,o.READ_WRITE),a=s.objectStore(n),l=a.add(r);l.onsuccess=function(e){u(e)},l.onerror=function(e){i(e)}}})},l=function(e,n,r){return new Promise(function(u,i){var s=t.open(e);s.onsuccess=function(e){var t=e.target.result,s=t.transaction(n,o.READ_WRITE),a=s.objectStore(n),l=a.put(r);l.onsuccess=function(e){u(e)},l.onerror=function(e){i(e)}}})},c=function(e,n,u){return new Promise(function(i,s){var a=null,l=t.open(e);l.onsuccess=function(e){var t=e.target.result,s=t.transaction(n,o.READ_ONLY),l=s.objectStore(n),c=r.only(u);l.openCursor(c).onsuccess=function(e){var n=e.target.result;n?(a=n.value,n["continue"]()):i(a)}},l.onerror=function(e){s(e)}})},f=function(e,n){return new Promise(function(r,u){var i=[],s=t.open(e);s.onsuccess=function(e){var t=e.target.result,u=t.transaction(n,o.READ_ONLY),s=u.objectStore(n);s.openCursor().onsuccess=function(e){var n=e.target.result;n?(i.push(n.value),n["continue"]()):r(i)}},s.onerror=function(e){u(e)}})};return{createDatabase:i,dropDatabase:s,addItem:a,putItem:l,retrieveItem:c,retrieveItems:f,indexedDBAvailable:u}}]),angular.module("magellan").factory("LogSrv",["AppConfig",function(e){var n=function(){e["log.info"]&&console.log.apply(console,arguments)},t=function(){e["log.error"]&&console.error.apply(console,arguments)};return{info:n,error:t}}]),angular.module("magellan").factory("QuizSrv",["AppConfig","CountrySrv","ScoreSrv","LogSrv",function(e,n,t,r){var o=null,u=null,i=function(e){o=e},s=function(){return null!==o&&o.length>0},a=function(){return new Promise(function(e,n){s||n("Countries have not been loaded"),u=g("country"),e(u.start())})},l=function(){u=null},c=function(){return null!==u&&(u.hasStarted()&&!u.hasEnded())},f=function(){return null!==u&&u.hasStarted()},d=function(){return null!==u&&u.hasEnded()},g=function(e){switch(e){case"country":default:return p()}},p=function(){for(var t=new Quiz,r=100,u=3,i=25,s=2.5,a=e["quiz.country.types"],l=Object.keys(a).length,c=[],f=e["quiz.country.questions"],d=0;d<f;d++){for(var g=!1;!g;){var p=o[getRandomInt(0,o.length-1)];g=c.indexOf(p.alpha3Code)<0}c.push(p.alpha3Code)}var C=0;return c.forEach(function(e){C++;var o=n.getCountryByAlpha3(e),c=a[getRandomInt(1,l)],d=h(c,o),g={type:c,input:v(c),unit:w(c)},p=m(c,o),y=b(c,r,s),A=O(c,u,i);C>=f&&(g.bonus=!0),"FLAG_OF_COUNTRY"===c&&(g.media="flag",g.alpha2Code=o.alpha2Code.toLocaleLowerCase()),t.addQuestion(new Question({text:d,info:g,answer:p,checkAnswer:y,hints:A}))}),t},h=function(e,n){switch(e){case"CAPITAL_OF_COUNTRY":return"Wie heißt die Hauptstadt von ["+n.name+"]";case"COUNTRY_OF_CAPITAL":return"["+n.capital+"] ist die Hauptstadt von welchem Land";case"POPULATION_OF_COUNTRY":return"Wie viele Menschen leben in ["+n.name+"]";case"AREA_OF_COUNTRY":return"Wie groß ist die Fläche von ["+n.name+"]";case"FLAG_OF_COUNTRY":return"Welches Land hat diese Flagge";default:return"?"}},m=function(e,n){switch(e){case"CAPITAL_OF_COUNTRY":var t=void 0!==n.altSpellings&&void 0!==n.altSpellings.capital?n.altSpellings.capital:[];return{correct:n.capital,altSpellings:t};case"COUNTRY_OF_CAPITAL":case"FLAG_OF_COUNTRY":var t=void 0!==n.altSpellings&&void 0!==n.altSpellings.name?n.altSpellings.name:[];return{correct:n.name,altSpellings:t};case"POPULATION_OF_COUNTRY":return{correct:n.population};case"AREA_OF_COUNTRY":return{correct:n.area};default:return"?"}},v=function(e){switch(e){case"POPULATION_OF_COUNTRY":return"number.high";case"AREA_OF_COUNTRY":return"number.medium";case"CAPITAL_OF_COUNTRY":case"COUNTRY_OF_CAPITAL":case"FLAG_OF_COUNTRY":default:return"text.standard"}},w=function(e){switch(e){case"AREA_OF_COUNTRY":return"km²";case"POPULATION_OF_COUNTRY":return"Einwohner";default:return null}},b=function(e,n,t){switch(e){case"CAPITAL_OF_COUNTRY":case"COUNTRY_OF_CAPITAL":case"FLAG_OF_COUNTRY":return function(e,r,o,u,i){var s=r===e.correct||e.altSpellings&&e.altSpellings.indexOf(r)>=0,a=s?n:0;return o>0&&(a-=o*u),void 0!==i&&void 0!==i.bonus&&i.bonus===!0&&(a*=t),a};case"POPULATION_OF_COUNTRY":case"AREA_OF_COUNTRY":return function(e,n,r,o,u){var i,s=Math.abs(n-e.correct)/e.correct*100;return i=s<=3?100:s<=6?90:s<=9?80:s<=12?70:s<=14?60:s<=16?50:s<=18?40:s<=20?30:s<=25?20:s<=30?10:0,r>0&&(i-=r*o),void 0!==u&&void 0!==u.bonus&&u.bonus===!0&&(i*=t),i};default:return"?"}},O=function(e,n,t){switch(e){case"CAPITAL_OF_COUNTRY":case"COUNTRY_OF_CAPITAL":case"FLAG_OF_COUNTRY":return{allowed:!0,maximum:n,cost:t,give:function(e,n){return n.correct.substr(0,e)}};case"POPULATION_OF_COUNTRY":case"AREA_OF_COUNTRY":return{allowed:!1};default:return"?"}},C=function(){return c()?u.getCurrentQuestionNumber():null},y=function(){return c()?u.getNumberOfQuestions():null},A=function(){return c()?u.currentQuestion():null},S=function(){c()&&u.nextQuestion()},_=function(){return null===u?null:u.getTotalPoints()},P=function(){return new Promise(function(e,n){null!==u&&u.hasEnded()?(u.submitted===!0&&n("Quiz has already been submitted"),u.submitted=!0,t.putHighscore(u.getTotalPoints()).then(function(n){e(n)})["catch"](function(e){n(e)})):n("No quiz is currently running")})};return{init:a,setCountries:i,isQuizRunning:c,hasQuizStarted:f,hasQuizEnded:d,getCurrentQuestionNumber:C,getNumberOfQuizQuestions:y,getCurrentQuestion:A,nextQuestion:S,getTotalPoints:_,conclude:P,dispose:l}}]),angular.module("magellan").factory("ScoreSrv",["$http",function(e){var n=function(){return new Promise(function(n,t){e.get("/api/scores/all").success(function(e){n(e)}).error(function(e){t(e)})})},t=function(){return new Promise(function(n,t){e.get("/api/scores/user").success(function(e){n(e)}).error(function(e){t(e)})})},r=function(){return new Promise(function(n,t){e.get("/api/scores/high").success(function(e){n(e)}).error(function(e){t(e)})})},o=function(n){return new Promise(function(t,r){e.put("/api/scores",{score:n}).success(function(e){t(e)}).error(function(e){r(e)})})};return{getHighscoreList:n,getUserHighscore:t,getOverallHighscore:r,putHighscore:o}}]),angular.module("magellan").factory("UserSrv",["$http","AuthTokenSrv","AppConfig",function(e,n,t){var r=this,o=function(){return e.get("/api/user")},u=function(){return new Promise(function(e,t){var r=n.getToken();r?(n.setToken(r),o().then(function(n){e(n.data)})["catch"](function(e){t(e)})):t("No token in storage")})},i=function(t,u){return e.post("/api/session",{username:t,password:u}).then(function(e){return r.token=e.data,n.setToken(r.token),o()})},s=function(){return new Promise(function(e,t){r.token=null,n.setToken(),e()})},a=function(n){return new Promise(function(r,o){var u=t["settings.user.colors"];n.color=u[getRandomInt(0,u.length-1)],e.post("/api/user",n).success(function(e){i(n.username,n.password).then(function(e){r(e)})["catch"](function(e){o(e)})}).error(function(e){o(e)})})},l=function(n){return new Promise(function(t,r){e.put("/api/user/basic",n).success(function(e){t(e)}).error(function(e){r(e)})})},c=function(n){return new Promise(function(t,r){e.put("/api/user/password",n).success(function(e){t(e)}).error(function(e){r(e)})})};return{getUser:o,getUserFromStorage:u,login:i,logout:s,register:a,updateBasic:l,updatePassword:c}}]);
//# sourceMappingURL=data:application/json;base64,
