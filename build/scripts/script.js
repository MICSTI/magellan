var magellan=angular.module("magellan",["ui.router","ngProgress","ngAnimate"],["$httpProvider",function(e){e.interceptors.push("AuthInterceptor")}]);magellan.constant("AppConfig",{"log.info":!0,"log.error":!0,"quiz.country.questions":3,"quiz.country.types":{1:"CAPITAL_OF_COUNTRY",2:"COUNTRY_OF_CAPITAL",3:"POPULATION_OF_COUNTRY",4:"AREA_OF_COUNTRY",5:"FLAG_OF_COUNTRY"},"settings.user.colors":["soft_red","thunderbird","old_brick","new_york_pink","snuff","honey_flower","san_marino","shakespeare","ming","gossip","eucalyptus","mountain_meadow","jade","confetti","california","burnt_orange","jaffa","gallery","edward","lynch"]}),magellan.controller("AppCtrl",["$scope","$state","UserSrv","CountrySrv","QuizSrv",function(e,n,t,r,i){e.app={config:{title:"Magellan",subtitle:"Test your knowledge about the countries of our world",author:"Michael Stifter"}},t.getUserFromStorage().then(function(n){e.user=n,e.$broadcast("user.loaded"),r.init().then(function(n){e.$broadcast("countries.loaded",n),i.setCountries(n)})})["catch"](function(e){}),e.isProgressBarVisible=function(){return n.is("quiz")},e.$on("app.login",function(t,o){e.user=o,r.init().then(function(n){e.$broadcast("countries.loaded",n),i.setCountries(n)}),n.go("quiz")}),e.$on("app.logout",function(t,r){e.user=null,n.go("home")})}]);var Quiz=function(){var e=null,n=[];this.start=function(){if(n.length<=0)throw Error("Cannot start a quiz without questions");return this.nextQuestion()},this.isActive=function(){return this.hasStarted()&&!this.hasEnded()},this.hasStarted=function(){return null!==e},this.hasEnded=function(){return this.hasStarted()&&e>=n.length},this.submitted=!1,this.addQuestion=function(e){if(void 0===e)throw Error("No question object passed");var t=!0,r=["config","hint","solution","answer","question","getInfo","info","points","answered","hintsAllowed","hintsRemaining"];r.forEach(function(n){if(!e.hasOwnProperty(n))throw t=!1,new Error("Question must have property '"+n+"'")}),t&&n.push(e)},this.nextQuestion=function(){return null===e?e=0:e++,!this.hasEnded()&&n[e]},this.currentQuestion=function(){return this.isActive()?n[e]:null},this.getTotalPoints=function(){if(!this.hasStarted())return null;var e=0;return n.forEach(function(n){var t=n.points();void 0!==t&&(e+=t)}),e},this.getCurrentQuestionNumber=function(){return null===e?null:e+1},this.getNumberOfQuestions=function(){return n.length}},Question=function(e){var n=null,t=null,r=null,i=null,o=0,u=null,a=null,s=!1,l=function(e){n=e.text,t=e.info||{},r=e.answer,u=e.checkAnswer||null,i=e.hints||{allowed:!1,maximum:0,cost:0,give:null}};e&&l(e),this.config=function(e){l(e)},this.question=function(){return n},this.info=function(e,n){return void 0===n?t[e]:void(t[e]=n)},this.getInfo=function(){return t},this.solution=function(){return s?r:null},this.hint=function(){if(!i.allowed)return null;if(i.allowed&&!i.give)throw new Error("Hints allowed but no give method passed");return o<i.maximum&&o++,i.give(o,r)},this.answer=function(e){if(!s&&u)return s=!0,a=u(r,e,o,i.cost,t),a=Math.max(0,a),a=Math.floor(a)},this.points=function(){if(s&&null!==a)return a},this.answered=function(){return s},this.hintsAllowed=function(){return null!==i?i.allowed:null},this.hintsRemaining=function(){var e=this.hintsAllowed();return null===e||e===!1?null:i.maximum-o}},getRandomInt=function(e,n){return Math.floor(Math.random()*(n-e+1))+e},getStringBetween=function(e,n,t){var r=e.indexOf(n),i=e.indexOf(t);return r>=0&&i>=0&&i>r?e.substr(r+1,i-r-1):null};"undefined"!=typeof module&&module.exports&&(module.exports.Question=Question,module.exports.Quiz=Quiz),angular.module("magellan").config(["$locationProvider","$stateProvider","$urlRouterProvider",function(e,n,t){e.html5Mode(!0),t.otherwise("/home"),n.state("home",{url:"/home",templateUrl:"/build/views/partials/home.partial.html",params:{action:null}}).state("quiz",{url:"/quiz",templateUrl:"/build/views/partials/quiz.partial.html"}).state("countries",{url:"/countries",templateUrl:"/build/views/partials/countries.partial.html"}).state("countries.detail",{url:"/:alpha3Code",templateUrl:"/build/views/partials/countries-detail.partial.html"}).state("login",{url:"/login",templateUrl:"/build/views/partials/login.partial.html"}).state("logout",{url:"/logout",controller:"LogoutCtrl"}).state("register",{url:"/register",templateUrl:"/build/views/partials/register.partial.html"}).state("settings",{url:"/settings",templateUrl:"/build/views/partials/settings.partial.html"}).state("about",{url:"/about",templateUrl:"/build/views/partials/about.partial.html"}).state("highscore",{url:"/highscore",templateUrl:"/build/views/partials/highscore.partial.html"}).state("countries-difficulty",{url:"/countries-difficulty",templateUrl:"/build/views/partials/country-difficulty.partial.html"})}]),angular.module("magellan").controller("CountriesCtrl",["$scope","CountrySrv",function(e,n){var t=null,r=null,i=function(){t=n.getCountriesByLetter(),r=Object.keys(t),e.$$phase?(e.countryKeys=r,e.countriesByLetter=t):e.$apply(function(){e.countryKeys=r,e.countriesByLetter=t})};n.areCountriesLoaded()&&i(),e.$on("countries.loaded",function(){i()})}]),angular.module("magellan").controller("CountryDetailCtrl",["$scope","CountrySrv","$stateParams",function(e,n,t){var r=t.alpha3Code;n.areCountriesLoaded()&&(e.country=n.getCountryByAlpha3(r)),e.$on("countries.loaded",function(){e.$apply(function(){e.country=n.getCountryByAlpha3(r)})});var i=function(e){return n.getCountryByAlpha3(e)};e.getCountryFromService=i}]),angular.module("magellan").controller("CountryDifficultyCtrl",["$scope","CountrySrv",function(e,n){var t=function(){var t=n.getCountries(),r={easy:[],medium:[],hard:[],unassigned:[]};t.sort(function(e,n){return n.population-e.population}).forEach(function(e){e.subregion.indexOf("Europe")>=0||e.subregion.indexOf("Australia and New Zealand")>=0||e.subregion.indexOf("South America")>=0&&e.population>=25e6||e.subregion.indexOf("Northern America")>=0||e.subregion.indexOf("Central America")>=0&&e.population>=1e8||e.subregion.indexOf("Africa")>=0&&e.population>=1e8||e.subregion.indexOf("Asia")>=0&&e.population>=5e8||"TÃ¼rkei"===e.name?e.difficulty="easy":e.subregion.indexOf("Africa")>=0&&e.population>=15e6||e.subregion.indexOf("Asia")>=0&&e.population>=1e7||e.subregion.indexOf("South America")>=0&&e.population>=1e6||e.subregion.indexOf("Central America")>=0&&e.population>=1e7||e.subregion.indexOf("Caribbean")>=0&&e.population>=1e6||["Tunesien","Aserbaidschan","Vereinigte Arabische Emirate","Georgien","Armenien"].indexOf(e.name)>=0?e.difficulty="medium":e.subregion.indexOf("South America")>=0&&e.population<1e6||e.subregion.indexOf("Africa")>=0&&e.population<15e6||e.subregion.indexOf("Asia")>=0&&e.population<1e7||e.subregion.indexOf("Central America")>=0&&e.population<1e7||e.subregion.indexOf("Caribbean")>=0&&e.population<1e6||e.region.indexOf("Oceania")>=0&&"Australia and New Zealand"!==e.subregion?e.difficulty="hard":e.difficulty="unassigned",r[e.difficulty].push(e)}),e.$$phase?(e.difficulties=r,e.difficultyKeys=Object.keys(r)):e.$apply(function(){e.difficulties=r,e.difficultyKeys=Object.keys(r)})};n.areCountriesLoaded()&&t(),e.$on("countries.loaded",function(e,n){t()})}]),angular.module("magellan").controller("DropdownCtrl",["$scope",function(e){function n(){o=!o}function t(){o=!0}function r(){o=!1}function i(){return o}var o=!1;e.toggleDropdown=n,e.showDropdown=t,e.hideDropdown=r,e.isDropdownVisible=i,e.handleClickOutside=function(e){console.log("CLICKED OUTSIDE")}}]),angular.module("magellan").controller("HighscoreCtrl",["$scope","ScoreSrv","LogSrv",function(e,n,t){e.scoreList=[],n.getHighscoreList().then(function(n){e.$$phase?e.scoreList=i(n):e.$apply(function(){e.scoreList=i(n)})})["catch"](function(e){t.error(e)});var r=function(n){return e.user._id===n},i=function(e){var n=0,t=null;return e.forEach(function(e){t&&e.score===t||(n++,e.rank=n+"."),t=e.score}),e};e.isMyself=r}]),angular.module("magellan").controller("HomeCtrl",["$scope","LogSrv","$stateParams",function(e,n,t){if(e.message=null,t.action){var r=t.action;switch(r){case"register.successful":e.message={type:"success",text:"Gratulation! Die Anmeldung war erfolgreich. Herzlich willkommen bei Magellan."};break;default:e.message=null}}}]),angular.module("magellan").controller("LoginCtrl",["$scope","UserSrv","FocusSrv",function(e,n,t){e.message=null,e.login=function(t,r){n.login(t,r).then(function(n){e.message=null,e.$emit("app.login",n.data)})["catch"](function(n){console.error(n);var t;t=401===n.status?"Falscher Benutzername oder Passwort":"Beim Einloggen scheint etwas schief gegangen zu sein",e.message={type:"error",text:t}})},t("#username")}]),angular.module("magellan").controller("LogoutCtrl",["$scope","UserSrv",function(e,n){n.logout().then(function(){e.$emit("app.logout")})}]),angular.module("magellan").controller("QuizDirectiveController",["$scope","QuizSrv","LogSrv","FocusSrv","ngProgressFactory","$filter",function(e,n,t,r,i,o){var u,a=function(){e.progressbar=i.createInstance(),e.progressbar.setParent(document.getElementById("quiz-progress")),e.progressbar.setAbsolute(),e.progressbar.setColor("#336e7b"),e.isResultsPageVisible=!1,e.achievements=[],e.bests=[],e.answerInput={},e.hint=null,e.multiplierOptions=[{value:1,label:""},{value:1e3,label:"Tsd."},{value:1e6,label:"Mio."}],u=null},s=function(){if(u=n.getCurrentQuestion(),e.hint=null,null!==u){if(u.getInfo().input&&0===u.getInfo().input.indexOf("number"))switch(u.getInfo().input){case"number.high":e.answerInput.multiplier={value:1e6,label:"Mio."};break;case"number.medium":e.answerInput.multiplier={value:1e3,label:"Tsd."};break;default:e.answerInput.multiplier={value:1,label:""}}else e.answerInput.multiplier=null;A(),r(".answerInput")}else e.progressbar.set(0)},l=function(){return u},c=function(){return n.getCurrentQuestionNumber()},f=function(){return n.getNumberOfQuizQuestions()},d=function(){return C(l().question(),"question-highlight")+"?"},g=function(){return u&&u.getInfo().media?u.getInfo().media:null},p=function(){e.isResultsPageVisible=!0},h=function(){e.$$phase?e.isResultsPageVisible=!1:e.$apply(function(){e.isResultsPageVisible=!1})},m=function(){return null!==u&&(null!==u.hintsRemaining()&&u.hintsRemaining()>0)},v=function(){if(e.answerInput.answer&&!u.answered()){var n=String(e.answerInput.answer);u.getInfo().input&&0===u.getInfo().input.indexOf("number")&&(n=n.replace(",",".")),e.answerInput.multiplier&&(n*=e.answerInput.multiplier.value),t.info("submitting answer",n),e.answerInput.points=u.answer(n),r(_()?"#btnContinueFinished  ":"#btnNextQuestion")}},b=function(){return!(!n.isQuizRunning()||null===u)&&u.answered()},w=function(){n.nextQuestion(),e.answerInput.answer="",s()},O=function(){e.hint=u.hint(),r(".answerInput")},C=function(e,n){return e.replace("[","<span class='"+n+"'>").replace("]","</span>")},y=function(e){13==e.which&&v()},A=function(){var n=c()/f()*100;e.progressbar.set(n)},_=function(){return c()>=f()},S=function(n,t,r){var i=[],o=!0;if(n.indexOf("overall_best")>=0&&(i.push({text:"Du hast einen neuen absoluten Rekord geschafft!"}),o=!1),n.indexOf("overall_best_equalised")>=0&&(i.push({text:"Du hast den aktuellen absoluten Rekord eingestellt!"}),o=!1),n.indexOf("personal_best")>=0&&n.indexOf("overall_best")<0&&(i.push({text:"Du hast einen neuen persÃ¶nlichen Rekord geschafft!"}),o=!1),n.indexOf("personal_best_equalised")>=0&&n.indexOf("overall_best_equalised")<0&&(i.push({text:"Du hast gleich viele Punkte geschafft wie bei deinem persÃ¶nlichen Rekord!"}),o=!1),n.indexOf("new_daily_best")>=0&&0===i.length&&i.push({text:"Du hast einen neuen persÃ¶nlichen Tagesrekord geschafft!"}),e.achievements=i,o&&t&&t.id&&t.date&&t.score&&r&&r.id&&r.date&&r.score){var u=[];r.type="overall",u.push(r),t.id!==r.id&&(t.type="personal",u.push(t)),e.bests=u}else e.bests=null},T=function(){p(),w(),n.conclude().then(function(e){S(e.events||[],e.personalBest,e.overallBest)})["catch"](function(e){t.error(e)})},P=function(n){var t;if("personal"===n.type)t="Dein persÃ¶nlicher Rekord liegt bei <span class='bold'>{POINTS} Punkten</span>, aufgestellt am {DATE}.";else{var r=n.id===e.user._id;t=r?"Du hÃ¤ltst den absoluten Rekord mit <span class='bold'>{POINTS} Punkten</span>, aufgestellt am {DATE}.":"<span class='highlight'>{USERNAME}</span> hÃ¤lt den absoluten Rekord mit <span class='bold'>{POINTS} Punkten</span>, aufgestellt am {DATE}."}return t.replace("{POINTS}",o("number")(n.score)).replace("{DATE}",x(n.date)).replace("{USERNAME}",n.username)},x=function(e){return e=new Date(e),R(e.getDate(),"00")+"."+R(e.getMonth()+1,"00")+"."+(e.getYear()+1900)},R=function(e,n){return String(n+e).slice(-n.length)},I=function(){quiz=null,e.$emit("quiz.restart"),a(),s()},U=function(e,n){if(13==e.which)switch(n){case"next_question":w();break;case"continue_finished":T()}};e.$on("quiz.start",function(e,n){h()}),e.$on("$destroy",function(e,t){n.hasQuizStarted()&&n.hasQuizEnded()&&n.dispose()}),a(),s(),e.getQuestion=l,e.getCurrentQuestionNumber=c,e.renderQuestionText=d,e.submitAnswer=v,e.questionAnswered=b,e.nextQuestion=w,e.handleKeyPress=y,e.getQuestionMedia=g,e.requestHint=O,e.wasLastQuestion=_,e.continueFinished=T,e.getBestText=P,e.restartQuiz=I,e.hintsAvailable=m,e.enterListener=U}]),angular.module("magellan").controller("QuizCtrl",["$scope","QuizSrv","LogSrv",function(e,n,t){var r=function(e){n.init().then(function(){e&&"function"==typeof e&&e(),t.info("Quiz started")})["catch"](function(e){t.error(e)})},i=function(){return n.isQuizRunning()},o=function(){return n.hasQuizStarted()},u=function(){return n.hasQuizEnded()},a=function(){return n.getTotalPoints()};e.$on("quiz.restart",function(i,o){t.info("quiz restart"),n.dispose(),r(function(){e.$broadcast("quiz.start")})}),e.startQuiz=r,e.isQuizRunning=i,e.hasQuizStarted=o,e.hasQuizEnded=u,e.getTotalPoints=a}]),angular.module("magellan").controller("RegisterCtrl",["$scope","LogSrv","FocusSrv","UserSrv","$state","$window",function(e,n,t,r,i,o){e.newUser={},e.message=null;var u=function(t){return!!t&&void(a()&&r.register(e.newUser).then(function(n){200===n.status?(e.$emit("app.login",n.data),i.go("home",{action:"register.successful"})):e.message={type:"error",text:"Bei der Anmeldung scheint etwas schief gegangen zu sein"}})["catch"](function(t){n.error(t);var r;switch(t.message){case"Username already exists":r="Der Benutzername existiert bereits";break;default:r="Bei der Anmeldung scheint etwas schief gegangen zu sein"}e.$$phase?e.message={type:"error",text:r}:e.$apply(function(){e.message={type:"error",text:r}})}))},a=function(){e.message=null;var n=e.newUser.password,t=e.newUser.password2;return e.newUser.username&&e.newUser.email&&n&&t?""===n||""===t?e.message={type:"error",text:"Die PasswÃ¶rter kÃ¶nnen nicht leer sein"}:n!==t&&(e.message={type:"error",text:"Die PasswÃ¶rter stimmen nicht Ã¼berein"}):e.message={type:"error",text:"Alle Felder mÃ¼ssen ausgefÃ¼llt sein"},!e.message},s=function(){u(!0)};e.delegateSubmit=s,e.register=u,t("#username")}]),angular.module("magellan").controller("SettingsCtrl",["$scope","AppConfig","FocusSrv","LogSrv","UserSrv",function(e,n,t,r,i){var o=function(){e.message=null;var o=n["settings.user.colors"];e.userObj={username:e.user.username,email:e.user.email,color:e.user.color},e.userColors=o;var u=function(n){e.userObj.color=n},a=function(){i.updateBasic(e.userObj).then(function(n){e.user.username=e.userObj.username,e.user.email=e.userObj.email,e.user.color=e.userObj.color,e.$apply(function(){e.message={type:"success",text:"Einstellungen wurden erfolgreich gespeichert"}})})["catch"](function(n){r.error("Update user",n);var t;switch(n.message){case"Username already exists":t="Der Benutzername ist bereits vergeben";break;default:t="Die Einstellungen konnten nicht gespeichert werden"}e.$apply(function(){e.message={type:"error",text:t}})})},s=function(){a(!0)};e.setColor=u,e.updateUser=a,e.delegateSubmit=s,t("#username")};e.user&&o(),e.$on("user.loaded",function(e,n){o()})}]),angular.module("magellan").directive("quiz",function(){return{templateUrl:"build/views/templates/quiz-directive.template.html",scope:!0,controller:"QuizDirectiveController",restrict:"E",link:function(e,n,t){}}}),angular.module("magellan").filter("renderHtml",["$sce",function(e){return function(n){return e.trustAsHtml(n)}}]),angular.module("magellan").filter("textOrNumber",["$filter",function(e){return function(n,t){return t=void 0!==t?0:t,isNaN(n)?n:e("number")(n,t)}}]),angular.module("magellan").factory("AuthInterceptor",["AuthTokenSrv",function(e){var n=function(n){var t=e.getToken();return t&&(n.headers=n.headers||{},n.headers["X-Auth"]=t),n};return{request:n}}]),angular.module("magellan").factory("AuthTokenSrv",["$window",function(e){var n=e.sessionStorage,t="auth-token",r=function(){return n.getItem(t)},i=function(e){e?n.setItem(t,e):n.removeItem(t)};return{getToken:r,setToken:i}}]),angular.module("magellan").factory("CountrySrv",["$http","IndexedDBSrv","LogSrv",function(e,n,t){var r=null,i=null,o=null,u="magellan",a="countryStore",s="countries",l="version",c=n.indexedDBAvailable(),f=function(){return d()},d=function(){return c?new Promise(function(e,s){n.createDatabase(u,a).then(h).then(m).then(v).then(g).then(p).then(function(n){r=n.countries,t.info("loaded countries from",n.loadStrategy.toUpperCase()),i={},o={},r.forEach(function(e){i[e.alpha3Code]=e;var n=e.name.substr(0,1).toUpperCase();switch(n){case"Ã":n="A";break;case"Ã":n="O";break;case"Ã":n="U"}void 0===o[n]&&(o[n]=[]),o[n].push({alpha3Code:e.alpha3Code,name:e.name})}),e(r)})["catch"](function(e){t.error("failed to load countries",e),s(e)})}):w()},g=function(e){return new Promise(function(n,t){var r,i=e.internalVersion,o=e.externalVersion;r=null===i?"api":o>i?"api":"db",e.loadStrategy=r,n(e)})},p=function(e){return new Promise(function(t,r){var i=e.loadStrategy;switch(i){case"api":w().then(function(r){e.countries=r,n.putItem(u,a,{name:s,value:r}),n.putItem(u,a,{name:l,value:e.externalVersion}),t(e)})["catch"](function(e){r(e)});break;case"db":b(e).then(function(e){t(e)})["catch"](function(e){r(e)});break;default:r("Unknown load strategy")}})},h=function(){return new Promise(function(e,n){e({})})},m=function(e){return new Promise(function(t,r){n.retrieveItem(u,a,l).then(function(n){e.internalVersion=n.value,t(e)})["catch"](function(n){e.internalVersion=null,t(e)})})},v=function(e){return O().then(function(n){return e.externalVersion=n,e})},b=function(e){return new Promise(function(t,r){n.retrieveItem(u,a,s).then(function(n){e.countries=n.value,t(e)})["catch"](function(e){t(null)})})},w=function(){return new Promise(function(n,t){e.get("/api/countries").then(function(e){n(e.data)})["catch"](function(e){t(e)})})},O=function(){return new Promise(function(n,t){e.get("/api/countries/version").then(function(e){n(e.data.version||0)})["catch"](function(e){n(0)})})},C=function(e){return null===i?null:i[e]},y=function(){return r},A=function(){return null===o?null:o},_=function(){return null!==r&&r.length>0};return{init:f,getCountries:y,getCountryByAlpha3:C,getCountriesByLetter:A,areCountriesLoaded:_}}]),angular.module("magellan").factory("FocusSrv",["$timeout","$window",function(e,n){return function(t){e(function(){var e=n.document.querySelector(t);e&&e.focus()})}}]),angular.module("magellan").factory("IndexedDBSrv",["$window",function(e){var n="name",t=e.indexedDB||e.webkitIndexedDB||e.msIndexedDB,r=e.IDBKeyRange||e.webkitIDBKeyRange,i=e.IDBTransaction||e.webkitIDBTransaction;i&&(i.READ_WRITE=i.READ_WRITE||"readwrite",i.READ_ONLY=i.READ_ONLY||"readonly");var o=function(){return!!t},u=function(e,r){return new Promise(function(i,o){var u=t.open(e);u.onupgradeneeded=function(e){var t=e.target.result;t.createObjectStore(r,{keyPath:n})},u.onsuccess=function(e){i(e)},u.onerror=function(e){o(e)}})},a=function(e){return new Promise(function(n,r){var i=t.deleteDatabase(e);i.onsuccess=function(e){n(e)},i.onerror=function(e){r(e)}})},s=function(e,n,r){return new Promise(function(o,u){var a=t.open(e);a.onsuccess=function(e){var t=e.target.result,a=t.transaction(n,i.READ_WRITE),s=a.objectStore(n),l=s.add(r);l.onsuccess=function(e){o(e)},l.onerror=function(e){u(e)}}})},l=function(e,n,r){return new Promise(function(o,u){var a=t.open(e);a.onsuccess=function(e){var t=e.target.result,a=t.transaction(n,i.READ_WRITE),s=a.objectStore(n),l=s.put(r);l.onsuccess=function(e){o(e)},l.onerror=function(e){u(e)}}})},c=function(e,n,o){return new Promise(function(u,a){var s=null,l=t.open(e);l.onsuccess=function(e){var t=e.target.result,a=t.transaction(n,i.READ_ONLY),l=a.objectStore(n),c=r.only(o);l.openCursor(c).onsuccess=function(e){var n=e.target.result;n?(s=n.value,n["continue"]()):u(s)}},l.onerror=function(e){a(e)}})},f=function(e,n){return new Promise(function(r,o){var u=[],a=t.open(e);a.onsuccess=function(e){var t=e.target.result,o=t.transaction(n,i.READ_ONLY),a=o.objectStore(n);a.openCursor().onsuccess=function(e){var n=e.target.result;n?(u.push(n.value),n["continue"]()):r(u)}},a.onerror=function(e){o(e)}})};return{createDatabase:u,dropDatabase:a,addItem:s,putItem:l,retrieveItem:c,retrieveItems:f,indexedDBAvailable:o}}]),angular.module("magellan").factory("LogSrv",["AppConfig",function(e){var n=function(){e["log.info"]&&console.log.apply(console,arguments)},t=function(){e["log.error"]&&console.error.apply(console,arguments)};return{info:n,error:t}}]),angular.module("magellan").factory("QuizSrv",["AppConfig","CountrySrv","ScoreSrv","LogSrv",function(e,n,t,r){var i=null,o=null,u=function(e){i=e},a=function(){return null!==i&&i.length>0},s=function(){return new Promise(function(e,n){a||n("Countries have not been loaded"),o=g("country"),e(o.start())})},l=function(){o=null},c=function(){return null!==o&&(o.hasStarted()&&!o.hasEnded())},f=function(){return null!==o&&o.hasStarted()},d=function(){return null!==o&&o.hasEnded()},g=function(e){switch(e){case"country":default:return p()}},p=function(){for(var t=new Quiz,r=100,o=3,u=25,a=2.5,s=e["quiz.country.types"],l=Object.keys(s).length,c=[],f=e["quiz.country.questions"],d=0;d<f;d++){for(var g=!1;!g;){var p=i[getRandomInt(0,i.length-1)];g=c.indexOf(p.alpha3Code)<0}c.push(p.alpha3Code)}var C=0;return c.forEach(function(e){C++;var i=n.getCountryByAlpha3(e),c=s[getRandomInt(1,l)],d=h(c,i),g={type:c,input:v(c),unit:b(c)},p=m(c,i),y=w(c,r,a),A=O(c,o,u);C>=f&&(g.bonus=!0),"FLAG_OF_COUNTRY"===c&&(g.media="flag",g.alpha2Code=i.alpha2Code.toLocaleLowerCase()),t.addQuestion(new Question({text:d,info:g,answer:p,checkAnswer:y,hints:A}))}),t},h=function(e,n){switch(e){case"CAPITAL_OF_COUNTRY":return"Wie heiÃt die Hauptstadt von ["+n.name+"]";case"COUNTRY_OF_CAPITAL":return"["+n.capital+"] ist die Hauptstadt von welchem Land";case"POPULATION_OF_COUNTRY":return"Wie viele Menschen leben in ["+n.name+"]";case"AREA_OF_COUNTRY":return"Wie groÃ ist die FlÃ¤che von ["+n.name+"]";case"FLAG_OF_COUNTRY":return"Welches Land hat diese Flagge";default:return"?"}},m=function(e,n){switch(e){case"CAPITAL_OF_COUNTRY":var t=void 0!==n.altSpellings&&void 0!==n.altSpellings.capital?n.altSpellings.capital:[];return{correct:n.capital,altSpellings:t};case"COUNTRY_OF_CAPITAL":case"FLAG_OF_COUNTRY":var t=void 0!==n.altSpellings&&void 0!==n.altSpellings.name?n.altSpellings.name:[];return{correct:n.name,altSpellings:t};case"POPULATION_OF_COUNTRY":return{correct:n.population};case"AREA_OF_COUNTRY":return{correct:n.area};default:return"?"}},v=function(e){switch(e){case"POPULATION_OF_COUNTRY":return"number.high";case"AREA_OF_COUNTRY":return"number.medium";case"CAPITAL_OF_COUNTRY":case"COUNTRY_OF_CAPITAL":case"FLAG_OF_COUNTRY":default:return"text.standard"}},b=function(e){switch(e){case"AREA_OF_COUNTRY":return"kmÂ²";case"POPULATION_OF_COUNTRY":return"Einwohner";default:return null}},w=function(e,n,t){switch(e){case"CAPITAL_OF_COUNTRY":case"COUNTRY_OF_CAPITAL":case"FLAG_OF_COUNTRY":return function(e,r,i,o,u){var a=r===e.correct||e.altSpellings&&e.altSpellings.indexOf(r)>=0,s=a?n:0;return i>0&&(s-=i*o),void 0!==u&&void 0!==u.bonus&&u.bonus===!0&&(s*=t),s};case"POPULATION_OF_COUNTRY":case"AREA_OF_COUNTRY":return function(e,n,r,i,o){var u,a=Math.abs(n-e.correct)/e.correct*100;return u=a<=3?100:a<=6?90:a<=9?80:a<=12?70:a<=14?60:a<=16?50:a<=18?40:a<=20?30:a<=25?20:a<=30?10:0,r>0&&(u-=r*i),void 0!==o&&void 0!==o.bonus&&o.bonus===!0&&(u*=t),u};default:return"?"}},O=function(e,n,t){switch(e){case"CAPITAL_OF_COUNTRY":case"COUNTRY_OF_CAPITAL":case"FLAG_OF_COUNTRY":return{allowed:!0,maximum:n,cost:t,give:function(e,n){return n.correct.substr(0,e)}};case"POPULATION_OF_COUNTRY":case"AREA_OF_COUNTRY":return{allowed:!1};default:return"?"}},C=function(){return c()?o.getCurrentQuestionNumber():null},y=function(){return c()?o.getNumberOfQuestions():null},A=function(){return c()?o.currentQuestion():null},_=function(){c()&&o.nextQuestion()},S=function(){return null===o?null:o.getTotalPoints()},T=function(){return new Promise(function(e,n){null!==o&&o.hasEnded()?(o.submitted===!0&&n("Quiz has already been submitted"),o.submitted=!0,t.putHighscore(o.getTotalPoints()).then(function(n){e(n)})["catch"](function(e){n(e)})):n("No quiz is currently running")})};return{init:s,setCountries:u,isQuizRunning:c,hasQuizStarted:f,hasQuizEnded:d,getCurrentQuestionNumber:C,getNumberOfQuizQuestions:y,getCurrentQuestion:A,nextQuestion:_,getTotalPoints:S,conclude:T,dispose:l}}]),angular.module("magellan").factory("ScoreSrv",["$http",function(e){var n=function(){return new Promise(function(n,t){e.get("/api/scores/all").success(function(e){n(e)}).error(function(e){t(e)})})},t=function(){return new Promise(function(n,t){e.get("/api/scores/user").success(function(e){n(e)}).error(function(e){t(e)})})},r=function(){return new Promise(function(n,t){e.get("/api/scores/high").success(function(e){n(e)}).error(function(e){t(e)})})},i=function(n){return new Promise(function(t,r){e.put("/api/scores",{score:n}).success(function(e){t(e)}).error(function(e){r(e)})})};return{getHighscoreList:n,getUserHighscore:t,getOverallHighscore:r,putHighscore:i}}]),angular.module("magellan").factory("UserSrv",["$http","AuthTokenSrv","AppConfig",function(e,n,t){var r=this,i=function(){return e.get("/api/user")},o=function(){return new Promise(function(e,t){var r=n.getToken();r?(n.setToken(r),i().then(function(n){e(n.data)})["catch"](function(e){t(e)})):t("No token in storage")})},u=function(t,o){return e.post("/api/session",{username:t,password:o}).then(function(e){return r.token=e.data,n.setToken(r.token),i()})},a=function(){return new Promise(function(e,t){r.token=null,n.setToken(),e()})},s=function(n){return new Promise(function(r,i){var o=t["settings.user.colors"];n.color=o[getRandomInt(0,o.length-1)],e.post("/api/user",n).success(function(e){u(n.username,n.password).then(function(e){r(e)})["catch"](function(e){i(e)})}).error(function(e){i(e)})})},l=function(n){return new Promise(function(t,r){e.put("/api/user/basic",n).success(function(e){t(e)}).error(function(e){r(e)})})};return{getUser:i,getUserFromStorage:o,login:u,logout:a,register:s,updateBasic:l}}]);
//# sourceMappingURL=data:application/json;base64,
