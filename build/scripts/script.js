var magellan=angular.module("magellan",["ui.router","ngProgress","ngAnimate"],["$httpProvider",function(n){n.interceptors.push("AuthInterceptor")}]);magellan.constant("AppConfig",{"log.info":!0,"log.error":!0,"quiz.country.questions":16,"quiz.country.types":{1:"CAPITAL_OF_COUNTRY",2:"COUNTRY_OF_CAPITAL",3:"POPULATION_OF_COUNTRY",4:"AREA_OF_COUNTRY"},"settings.user.colors":["soft_red","thunderbird","old_brick","new_york_pink","snuff","honey_flower","san_marino","shakespeare","ming","gossip","eucalyptus","mountain_meadow","jade","confetti","california","burnt_orange","jaffa","gallery","edward","lynch"]}),magellan.controller("AppCtrl",["$scope","$state","UserSrv","CountrySrv","QuizSrv",function(n,t,e,r,o){n.app={config:{title:"Magellan",subtitle:"Test your knowledge about the countries of our world",author:"Michael Stifter"}},e.getUserFromStorage().then(function(t){n.user=t,r.init().then(function(t){n.$broadcast("countries.loaded",t),o.setCountries(t)})})["catch"](function(n){}),n.isProgressBarVisible=function(){return t.is("quiz")},n.$on("app.login",function(e,u){n.user=u,r.init().then(function(t){n.$broadcast("countries.loaded",t),o.setCountries(t)}),t.go("quiz")}),n.$on("app.logout",function(e,r){n.user=null,t.go("home")})}]);var Quiz=function(){var n=null,t=[];this.start=function(){if(t.length<=0)throw Error("Cannot start a quiz without questions");return this.nextQuestion()},this.isActive=function(){return this.hasStarted()&&!this.hasEnded()},this.hasStarted=function(){return null!==n},this.hasEnded=function(){return this.hasStarted()&&n>=t.length},this.addQuestion=function(n){if(void 0===n)throw Error("No question object passed");var e=!0,r=["config","hint","solution","answer","question","getInfo","info","points","answered","hintsAllowed","hintsRemaining"];r.forEach(function(t){if(!n.hasOwnProperty(t))throw e=!1,new Error("Question must have property '"+t+"'")}),e&&t.push(n)},this.nextQuestion=function(){return null===n?n=0:n++,this.hasEnded()?this.isActive():t[n]},this.currentQuestion=function(){return this.isActive()?t[n]:null},this.getTotalPoints=function(){if(!this.hasStarted())return null;var n=0;return t.forEach(function(t){var e=t.points();void 0!==e&&(n+=e)}),n},this.getCurrentQuestionNumber=function(){return null===n?null:n+1},this.getNumberOfQuestions=function(){return t.length}},Question=function(n){var t=null,e=null,r=null,o=null,u=0,i=null,a=null,s=!1,l=function(n){t=n.text,e=n.info||{},r=n.answer,i=n.checkAnswer||null,o=n.hints||{allowed:!1,maximum:0,cost:0,give:null}};n&&l(n),this.config=function(n){l(n)},this.question=function(){return t},this.info=function(n,t){return void 0===t?e[n]:void(e[n]=t)},this.getInfo=function(){return e},this.solution=function(){return s?r:null},this.hint=function(){if(!o.allowed||u>=o.maximum)return null;if(o.allowed&&!o.give)throw new Error("Hints allowed but no give method passed");return u++,o.give(u,r)},this.answer=function(n){if(!s&&i)return s=!0,a=i(r,n,e),o.allowed&&u>0&&(a-=u*o.cost),Math.max(0,a)},this.points=function(){if(s&&null!==a)return a},this.answered=function(){return s},this.hintsAllowed=function(){return null!==o?o.allowed:null},this.hintsRemaining=function(){var n=this.hintsAllowed();return null===n||n===!1?null:o.maximum-u}},getRandomInt=function(n,t){return Math.floor(Math.random()*(t-n+1))+n},getStringBetween=function(n,t,e){var r=n.indexOf(t),o=n.indexOf(e);return r>=0&&o>=0&&o>r?n.substr(r+1,o-r-1):null};"undefined"!=typeof module&&module.exports&&(module.exports.Question=Question,module.exports.Quiz=Quiz),angular.module("magellan").config(["$locationProvider","$stateProvider","$urlRouterProvider",function(n,t,e){n.html5Mode(!0),e.otherwise("/home"),t.state("home",{url:"/home",templateUrl:"/build/views/partials/home.partial.html"}).state("quiz",{url:"/quiz",templateUrl:"/build/views/partials/quiz.partial.html"}).state("countries",{url:"/countries",templateUrl:"/build/views/partials/countries.partial.html"}).state("countries.detail",{url:"/:alpha3Code",templateUrl:"/build/views/partials/countries-detail.partial.html"}).state("login",{url:"/login",templateUrl:"/build/views/partials/login.partial.html"}).state("logout",{url:"/logout",controller:"LogoutCtrl"}).state("register",{url:"/register",templateUrl:"/build/views/partials/register.partial.html"}).state("settings",{url:"/settings",templateUrl:"/build/views/partials/settings.partial.html"}).state("about",{url:"/about",templateUrl:"/build/views/partials/about.partial.html"})}]),angular.module("magellan").controller("CountriesCtrl",["$scope","CountrySrv",function(n,t){var e=null,r=null,o=function(){e=t.getCountriesByLetter(),r=Object.keys(e),n.$$phase?(n.countryKeys=r,n.countriesByLetter=e):n.$apply(function(){n.countryKeys=r,n.countriesByLetter=e})};t.areCountriesLoaded()&&o(),n.$on("countries.loaded",function(){o()})}]),angular.module("magellan").controller("CountryDetailCtrl",["$scope","CountrySrv","$stateParams",function(n,t,e){var r=e.alpha3Code;t.areCountriesLoaded()&&(n.country=t.getCountryByAlpha3(r)),n.$on("countries.loaded",function(){n.$apply(function(){n.country=t.getCountryByAlpha3(r)})});var o=function(n){return t.getCountryByAlpha3(n)};n.getCountryFromService=o}]),angular.module("magellan").controller("DropdownCtrl",["$scope",function(n){function t(){u=!u}function e(){u=!0}function r(){u=!1}function o(){return u}var u=!1;n.toggleDropdown=t,n.showDropdown=e,n.hideDropdown=r,n.isDropdownVisible=o,n.handleClickOutside=function(n){console.log("CLICKED OUTSIDE")}}]),angular.module("magellan").controller("LoginCtrl",["$scope","UserSrv","FocusSrv",function(n,t,e){n.login=function(e,r){t.login(e,r).then(function(t){n.$emit("app.login",t.data)})["catch"](function(n){console.error(n)})},e("username")}]),angular.module("magellan").controller("LogoutCtrl",["$scope","UserSrv",function(n,t){t.logout().then(function(){n.$emit("app.logout")})}]),angular.module("magellan").controller("QuizCtrl",["$scope","QuizSrv","LogSrv","FocusSrv","ngProgressFactory",function(n,t,e,r,o){n.progressbar=o.createInstance(),n.progressbar.setParent(document.getElementById("quiz-progress")),n.progressbar.setAbsolute(),n.progressbar.setColor("#336e7b");var u=null,i=function(){t.init().then(function(){e.info("Quiz started"),a()})["catch"](function(n){e.error(n)})},a=function(){u=t.getCurrentQuestion(),r("answer")},s=function(n,t){return n.replace("[","<span class='"+t+"'>").replace("]","</span>")},l=function(n){n&&(console.log(u.answer(n)),r("btnNextQuestion"))},c=function(t){13==t.which&&l(n.answerObj.answer)},f=function(){return t.isQuizRunning()},d=function(){return t.getCurrentQuestionNumber()},g=function(){return t.getNumberOfQuizQuestions()},h=function(){return!(!f()||null===u)&&u.answered()},m=function(){return null===u?null:s(u.question(),"question-highlight")+"?"},p=function(){return null===u?null:u.solution().correct},v=function(){t.nextQuestion(),n.answerObj.answer="",a()};n.startQuiz=i,n.isQuizRunning=f,n.getCurrentQuestionNumber=d,n.getNumberOfQuizQuestions=g,n.getQuestionText=m,n.getAnswerText=p,n.handleKeyPress=c,n.submitAnswer=l,n.questionAnswered=h,n.nextQuestion=v,n.answerObj={answer:""},a()}]),angular.module("magellan").controller("SettingsCtrl",["$scope","AppConfig","FocusSrv",function(n,t,e){var r=t["settings.user.colors"];n.userObj={color:null},n.userColors=r;var o=function(t){n.userObj.color=t};n.setColor=o,e("username")}]),angular.module("magellan").filter("renderHtml",["$sce",function(n){return function(t){return n.trustAsHtml(t)}}]),angular.module("magellan").factory("AuthInterceptor",["AuthTokenSrv",function(n){var t=function(t){var e=n.getToken();return e&&(t.headers=t.headers||{},t.headers["X-Auth"]=e),t};return{request:t}}]),angular.module("magellan").factory("AuthTokenSrv",["$window",function(n){var t=n.sessionStorage,e="auth-token",r=function(){return t.getItem(e)},o=function(n){n?t.setItem(e,n):t.removeItem(e)};return{getToken:r,setToken:o}}]),angular.module("magellan").factory("CountrySrv",["$http","IndexedDBSrv","LogSrv",function(n,t,e){var r=null,o=null,u=null,i="magellan",a="countryStore",s="countries",l="version",c=t.indexedDBAvailable(),f=function(){return d()},d=function(){return c?new Promise(function(n,s){t.createDatabase(i,a).then(m).then(p).then(v).then(g).then(h).then(function(t){r=t.countries,e.info("loaded countries from",t.loadStrategy.toUpperCase()),o={},u={},r.forEach(function(n){o[n.alpha3Code]=n;var t=n.name.substr(0,1).toUpperCase();switch(t){case"Ä":t="A";break;case"Ö":t="O";break;case"Ü":t="U"}void 0===u[t]&&(u[t]=[]),u[t].push({alpha3Code:n.alpha3Code,name:n.name})}),n(r)})["catch"](function(n){e.error("failed to load countries",n),s(n)})}):C()},g=function(n){return new Promise(function(t,e){var r,o=n.internalVersion,u=n.externalVersion;r=null===o?"api":u>o?"api":"db",n.loadStrategy=r,t(n)})},h=function(n){return new Promise(function(e,r){var o=n.loadStrategy;switch(o){case"api":C().then(function(r){n.countries=r,t.putItem(i,a,{name:s,value:r}),t.putItem(i,a,{name:l,value:n.externalVersion}),e(n)})["catch"](function(n){r(n)});break;case"db":w(n).then(function(n){e(n)})["catch"](function(n){r(n)});break;default:r("Unknown load strategy")}})},m=function(){return new Promise(function(n,t){n({})})},p=function(n){return new Promise(function(e,r){t.retrieveItem(i,a,l).then(function(t){n.internalVersion=t.value,e(n)})["catch"](function(t){n.internalVersion=null,e(n)})})},v=function(n){return b().then(function(t){return n.externalVersion=t,n})},w=function(n){return new Promise(function(e,r){t.retrieveItem(i,a,s).then(function(t){n.countries=t.value,e(n)})["catch"](function(n){e(null)})})},C=function(){return new Promise(function(t,e){n.get("/api/countries").then(function(n){t(n.data)})["catch"](function(n){e(n)})})},b=function(){return new Promise(function(t,e){n.get("/api/countries/version").then(function(n){t(n.data.version||0)})["catch"](function(n){t(0)})})},A=function(n){return null===o?null:o[n]},O=function(){return null===u?null:u},y=function(){return null!==r&&r.length>0};return{init:f,getCountryByAlpha3:A,getCountriesByLetter:O,areCountriesLoaded:y}}]),angular.module("magellan").factory("FocusSrv",["$timeout","$window",function(n,t){return function(e){n(function(){var n=t.document.getElementById(e);n&&n.focus()})}}]),angular.module("magellan").factory("IndexedDBSrv",["$window",function(n){var t="name",e=n.indexedDB||n.webkitIndexedDB||n.msIndexedDB,r=n.IDBKeyRange||n.webkitIDBKeyRange,o=n.IDBTransaction||n.webkitIDBTransaction;o&&(o.READ_WRITE=o.READ_WRITE||"readwrite",o.READ_ONLY=o.READ_ONLY||"readonly");var u=function(){return!!e},i=function(n,r){return new Promise(function(o,u){var i=e.open(n);i.onupgradeneeded=function(n){var e=n.target.result;e.createObjectStore(r,{keyPath:t})},i.onsuccess=function(n){o(n)},i.onerror=function(n){u(n)}})},a=function(n){return new Promise(function(t,r){var o=e.deleteDatabase(n);o.onsuccess=function(n){t(n)},o.onerror=function(n){r(n)}})},s=function(n,t,r){return new Promise(function(u,i){var a=e.open(n);a.onsuccess=function(n){var e=n.target.result,a=e.transaction(t,o.READ_WRITE),s=a.objectStore(t),l=s.add(r);l.onsuccess=function(n){u(n)},l.onerror=function(n){i(n)}}})},l=function(n,t,r){return new Promise(function(u,i){var a=e.open(n);a.onsuccess=function(n){var e=n.target.result,a=e.transaction(t,o.READ_WRITE),s=a.objectStore(t),l=s.put(r);l.onsuccess=function(n){u(n)},l.onerror=function(n){i(n)}}})},c=function(n,t,u){return new Promise(function(i,a){var s=null,l=e.open(n);l.onsuccess=function(n){var e=n.target.result,a=e.transaction(t,o.READ_ONLY),l=a.objectStore(t),c=r.only(u);l.openCursor(c).onsuccess=function(n){var t=n.target.result;t?(s=t.value,t["continue"]()):i(s)}},l.onerror=function(n){a(n)}})},f=function(n,t){return new Promise(function(r,u){var i=[],a=e.open(n);a.onsuccess=function(n){var e=n.target.result,u=e.transaction(t,o.READ_ONLY),a=u.objectStore(t);a.openCursor().onsuccess=function(n){var t=n.target.result;t?(i.push(t.value),t["continue"]()):r(i)}},a.onerror=function(n){u(n)}})};return{createDatabase:i,dropDatabase:a,addItem:s,putItem:l,retrieveItem:c,retrieveItems:f,indexedDBAvailable:u}}]),angular.module("magellan").factory("LogSrv",["AppConfig",function(n){var t=function(){n["log.info"]&&console.log.apply(console,arguments)},e=function(){n["log.error"]&&console.error.apply(console,arguments)};return{info:t,error:e}}]),angular.module("magellan").factory("QuizSrv",["AppConfig","CountrySrv","LogSrv",function(n,t,e){var r=null,o=null,u=function(n){r=n},i=function(){return null!==r&&r.length>0},a=function(){return new Promise(function(n,t){i||t("Countries have not been loaded"),o=l("country"),n(o.start())})},s=function(){return null!==o&&o.hasStarted()},l=function(n){switch(n){case"country":default:return c()}},c=function(){for(var e=new Quiz,o=100,u=3,i=25,a=2.5,s=n["quiz.country.types"],l=Object.keys(s).length,c=[],m=n["quiz.country.questions"],p=0;p<m;p++){for(var v=!1;!v;){var w=r[getRandomInt(0,r.length-1)];v=c.indexOf(w.alpha3Code)<0}c.push(w.alpha3Code)}var C=0;return c.forEach(function(n){C++;var r=t.getCountryByAlpha3(n),c=s[getRandomInt(1,l)],p=f(c,r),v={type:c},w=d(c,r),b=g(c,o,a),A=h(c,u,i);C>=m&&(v.bonus=!0),e.addQuestion(new Question({text:p,info:v,answer:w,checkAnswer:b,hints:A}))}),e},f=function(n,t){switch(n){case"CAPITAL_OF_COUNTRY":return"Wie heißt die Hauptstadt von ["+t.name+"]";case"COUNTRY_OF_CAPITAL":return"["+t.capital+"] ist die Hauptstadt von welchem Land";case"POPULATION_OF_COUNTRY":return"Wie viele Menschen leben in ["+t.name+"]";case"AREA_OF_COUNTRY":return"Wie groß ist die Fläche von ["+t.name+"]";default:return"?"}},d=function(n,t){switch(n){case"CAPITAL_OF_COUNTRY":var e=void 0!==t.altSpellings&&void 0!==t.altSpellings.capital?t.altSpellings.capital:[];return{correct:t.capital,altSpellings:e};case"COUNTRY_OF_CAPITAL":var e=void 0!==t.altSpellings&&void 0!==t.altSpellings.name?t.altSpellings.name:[];return{correct:t.name,altSpellings:e};case"POPULATION_OF_COUNTRY":return{correct:t.population};case"AREA_OF_COUNTRY":return{correct:t.area};default:return"?"}},g=function(n,t,e){switch(n){case"CAPITAL_OF_COUNTRY":case"COUNTRY_OF_CAPITAL":return function(n,r,o){var u=r===n.correct||n.altSpellings&&n.altSpellings.indexOf(r)>=0,i=u?t:0;return void 0!==o&&void 0!==o.bonus&&o.bonus===!0&&(i*=e),i};case"POPULATION_OF_COUNTRY":case"AREA_OF_COUNTRY":return function(n,t,r){var o,u=Math.abs(t-n.correct)/n.correct*100;return o=u<=3?100:u<=6?90:u<=9?80:u<=12?70:u<=14?60:u<=16?50:u<=18?40:u<=20?30:u<=25?20:u<=30?10:0,void 0!==r&&void 0!==r.bonus&&r.bonus===!0&&(o*=e),o};default:return"?"}},h=function(n,t,e){switch(n){case"CAPITAL_OF_COUNTRY":case"COUNTRY_OF_CAPITAL":return{allowed:!0,maximum:t,cost:e,give:function(n,t){return t.correct.substr(0,n)}};case"POPULATION_OF_COUNTRY":case"AREA_OF_COUNTRY":return{allowed:!1};default:return"?"}},m=function(){return s()?o.getCurrentQuestionNumber():null},p=function(){return s()?o.getNumberOfQuestions():null},v=function(){return s()?o.currentQuestion():null},w=function(){s()&&o.nextQuestion()};return{init:a,setCountries:u,isQuizRunning:s,getCurrentQuestionNumber:m,getNumberOfQuizQuestions:p,getCurrentQuestion:v,nextQuestion:w}}]),angular.module("magellan").factory("UserSrv",["$http","AuthTokenSrv",function(n,t){var e=this,r=function(){return n.get("/api/user")},o=function(){return new Promise(function(n,e){var o=t.getToken();o?(t.setToken(o),r().then(function(t){n(t.data)})["catch"](function(n){e(n)})):e("No token in storage")})},u=function(o,u){return n.post("/api/session",{username:o,password:u}).then(function(n){return e.token=n.data,t.setToken(e.token),r()})},i=function(){return new Promise(function(n,r){e.token=null,t.setToken(),n()})};return{getUser:r,getUserFromStorage:o,login:u,logout:i}}]);
//# sourceMappingURL=data:application/json;base64,
