var magellan=angular.module("magellan",["ui.router","ngProgress","ngAnimate"],["$httpProvider",function(e){e.interceptors.push("AuthInterceptor")}]);magellan.constant("AppConfig",{"log.info":!0,"log.error":!0,"quiz.country.questions":3,"quiz.country.types":{1:"CAPITAL_OF_COUNTRY",2:"COUNTRY_OF_CAPITAL",3:"POPULATION_OF_COUNTRY",4:"AREA_OF_COUNTRY",5:"FLAG_OF_COUNTRY"},"settings.user.colors":["soft_red","thunderbird","old_brick","new_york_pink","snuff","honey_flower","san_marino","shakespeare","ming","gossip","eucalyptus","mountain_meadow","jade","confetti","california","burnt_orange","jaffa","gallery","edward","lynch"]}),magellan.controller("AppCtrl",["$scope","$state","UserSrv","CountrySrv","QuizSrv",function(e,n,t,r,o){e.app={config:{title:"Magellan",subtitle:"Test your knowledge about the countries of our world",author:"Michael Stifter"}},t.getUserFromStorage().then(function(n){e.user=n,e.$broadcast("user.loaded"),r.init().then(function(n){e.$broadcast("countries.loaded",n),o.setCountries(n)})})["catch"](function(e){}),e.isProgressBarVisible=function(){return n.is("quiz")},e.$on("app.login",function(t,u){e.user=u,r.init().then(function(n){e.$broadcast("countries.loaded",n),o.setCountries(n)}),n.go("quiz")}),e.$on("app.logout",function(t,r){e.user=null,n.go("home")})}]);var Quiz=function(){var e=null,n=[];this.start=function(){if(n.length<=0)throw Error("Cannot start a quiz without questions");return this.nextQuestion()},this.isActive=function(){return this.hasStarted()&&!this.hasEnded()},this.hasStarted=function(){return null!==e},this.hasEnded=function(){return this.hasStarted()&&e>=n.length},this.submitted=!1,this.addQuestion=function(e){if(void 0===e)throw Error("No question object passed");var t=!0,r=["config","hint","solution","answer","question","getInfo","info","points","answered","hintsAllowed","hintsRemaining"];r.forEach(function(n){if(!e.hasOwnProperty(n))throw t=!1,new Error("Question must have property '"+n+"'")}),t&&n.push(e)},this.nextQuestion=function(){return null===e?e=0:e++,!this.hasEnded()&&n[e]},this.currentQuestion=function(){return this.isActive()?n[e]:null},this.getTotalPoints=function(){if(!this.hasStarted())return null;var e=0;return n.forEach(function(n){var t=n.points();void 0!==t&&(e+=t)}),e},this.getCurrentQuestionNumber=function(){return null===e?null:e+1},this.getNumberOfQuestions=function(){return n.length}},Question=function(e){var n=null,t=null,r=null,o=null,u=0,i=null,s=null,a=!1,l=function(e){n=e.text,t=e.info||{},r=e.answer,i=e.checkAnswer||null,o=e.hints||{allowed:!1,maximum:0,cost:0,give:null}};e&&l(e),this.config=function(e){l(e)},this.question=function(){return n},this.info=function(e,n){return void 0===n?t[e]:void(t[e]=n)},this.getInfo=function(){return t},this.solution=function(){return a?r:null},this.hint=function(){if(!o.allowed||u>=o.maximum)return null;if(o.allowed&&!o.give)throw new Error("Hints allowed but no give method passed");return u++,o.give(u,r)},this.answer=function(e){if(!a&&i)return a=!0,s=i(r,e,u,o.cost,t),s=Math.max(0,s)},this.points=function(){if(a&&null!==s)return s},this.answered=function(){return a},this.hintsAllowed=function(){return null!==o?o.allowed:null},this.hintsRemaining=function(){var e=this.hintsAllowed();return null===e||e===!1?null:o.maximum-u}},getRandomInt=function(e,n){return Math.floor(Math.random()*(n-e+1))+e},getStringBetween=function(e,n,t){var r=e.indexOf(n),o=e.indexOf(t);return r>=0&&o>=0&&o>r?e.substr(r+1,o-r-1):null};"undefined"!=typeof module&&module.exports&&(module.exports.Question=Question,module.exports.Quiz=Quiz),angular.module("magellan").config(["$locationProvider","$stateProvider","$urlRouterProvider",function(e,n,t){e.html5Mode(!0),t.otherwise("/home"),n.state("home",{url:"/home",templateUrl:"/build/views/partials/home.partial.html",params:{action:null}}).state("quiz",{url:"/quiz",templateUrl:"/build/views/partials/quiz.partial.html"}).state("countries",{url:"/countries",templateUrl:"/build/views/partials/countries.partial.html"}).state("countries.detail",{url:"/:alpha3Code",templateUrl:"/build/views/partials/countries-detail.partial.html"}).state("login",{url:"/login",templateUrl:"/build/views/partials/login.partial.html"}).state("logout",{url:"/logout",controller:"LogoutCtrl"}).state("register",{url:"/register",templateUrl:"/build/views/partials/register.partial.html"}).state("settings",{url:"/settings",templateUrl:"/build/views/partials/settings.partial.html"}).state("about",{url:"/about",templateUrl:"/build/views/partials/about.partial.html"})}]),angular.module("magellan").controller("CountriesCtrl",["$scope","CountrySrv",function(e,n){var t=null,r=null,o=function(){t=n.getCountriesByLetter(),r=Object.keys(t),e.$$phase?(e.countryKeys=r,e.countriesByLetter=t):e.$apply(function(){e.countryKeys=r,e.countriesByLetter=t})};n.areCountriesLoaded()&&o(),e.$on("countries.loaded",function(){o()})}]),angular.module("magellan").controller("CountryDetailCtrl",["$scope","CountrySrv","$stateParams",function(e,n,t){var r=t.alpha3Code;n.areCountriesLoaded()&&(e.country=n.getCountryByAlpha3(r)),e.$on("countries.loaded",function(){e.$apply(function(){e.country=n.getCountryByAlpha3(r)})});var o=function(e){return n.getCountryByAlpha3(e)};e.getCountryFromService=o}]),angular.module("magellan").controller("DropdownCtrl",["$scope",function(e){function n(){u=!u}function t(){u=!0}function r(){u=!1}function o(){return u}var u=!1;e.toggleDropdown=n,e.showDropdown=t,e.hideDropdown=r,e.isDropdownVisible=o,e.handleClickOutside=function(e){console.log("CLICKED OUTSIDE")}}]),angular.module("magellan").controller("HomeCtrl",["$scope","LogSrv","$stateParams",function(e,n,t){if(e.message=null,t.action){var r=t.action;switch(r){case"register.successful":e.message={type:"success",text:"Gratulation! Die Anmeldung war erfolgreich. Herzlich willkommen bei Magellan."};break;default:e.message=null}}}]),angular.module("magellan").controller("LoginCtrl",["$scope","UserSrv","FocusSrv",function(e,n,t){e.message=null,e.login=function(t,r){n.login(t,r).then(function(n){e.message=null,e.$emit("app.login",n.data)})["catch"](function(n){console.error(n);var t;t=401===n.status?"Falscher Benutzername oder Passwort":"Beim Einloggen scheint etwas schief gegangen zu sein",e.message={type:"error",text:t}})},t("#username")}]),angular.module("magellan").controller("LogoutCtrl",["$scope","UserSrv",function(e,n){n.logout().then(function(){e.$emit("app.logout")})}]),angular.module("magellan").controller("QuizDirectiveController",["$scope","QuizSrv","LogSrv","FocusSrv","ngProgressFactory",function(e,n,t,r,o){e.progressbar=o.createInstance(),e.progressbar.setParent(document.getElementById("quiz-progress")),e.progressbar.setAbsolute(),e.progressbar.setColor("#336e7b"),e.isResultsPageVisible=!1,e.achievements=[],e.answerInput={},e.hint=null,e.multiplierOptions=[{value:1,label:""},{value:1e3,label:"Tsd."},{value:1e6,label:"Mio."}];var u=null,i=function(){if(u=n.getCurrentQuestion(),e.hint=null,null!==u){if(u.getInfo().input&&0===u.getInfo().input.indexOf("number"))switch(u.getInfo().input){case"number.high":e.answerInput.multiplier={value:1e6,label:"Mio."};break;case"number.medium":e.answerInput.multiplier={value:1e3,label:"Tsd."};break;default:e.answerInput.multiplier={value:1,label:""}}else e.answerInput.multiplier=null;b(),r(".answerInput")}else e.progressbar.set(0)},s=function(){return u},a=function(){return n.getCurrentQuestionNumber()},l=function(){return n.getNumberOfQuizQuestions()},c=function(){return v(s().question(),"question-highlight")+"?"},f=function(){return u&&u.getInfo().media?u.getInfo().media:null},g=function(){e.isResultsPageVisible=!0},d=function(){if(e.answerInput.answer){var n=e.answerInput.answer;u.getInfo().input&&0===u.getInfo().input.indexOf("number")&&(n=n.replace(",",".")),e.answerInput.multiplier&&(n*=e.answerInput.multiplier.value),t.info("submitting answer",n),e.answerInput.points=u.answer(n),r("#btnNextQuestion")}},h=function(){return!(!n.isQuizRunning()||null===u)&&u.answered()},m=function(){n.nextQuestion(),e.answerInput.answer="",i()},p=function(){e.hint=u.hint(),r(".answerInput")},v=function(e,n){return e.replace("[","<span class='"+n+"'>").replace("]","</span>")},w=function(e){13==e.which&&d()},b=function(){var n=a()/l()*100;e.progressbar.set(n)},O=function(){return a()>=l()},C=function(n){var t=[];n.indexOf("overall_best")>=0&&t.push({text:"Du hast einen neuen absoluten Rekord geschafft!"}),n.indexOf("overall_best_equalised")>=0&&t.push({text:"Du hast den aktuellen absoluten Rekord eingestellt!"}),n.indexOf("personal_best")>=0&&t.push({text:"Du hast einen neuen persönlichen Rekord geschafft!"}),n.indexOf("personal_best_equalised")>=0&&t.push({text:"Du hast gleich viele Punkte geschafft wie bei deinem persönlichen Rekord!"}),n.indexOf("new_daily_best")>=0&&t.push({text:"Du hast einen neuen persönlichen Tagesrekord geschafft!"}),e.achievements=t},A=function(){g(),m(),n.conclude().then(function(e){C(e.events||[])})["catch"](function(e){t.error(e)})};i(),e.getQuestion=s,e.getCurrentQuestionNumber=a,e.renderQuestionText=c,e.submitAnswer=d,e.questionAnswered=h,e.nextQuestion=m,e.handleKeyPress=w,e.getQuestionMedia=f,e.requestHint=p,e.wasLastQuestion=O,e.continueFinished=A}]),angular.module("magellan").controller("QuizCtrl",["$scope","QuizSrv","LogSrv",function(e,n,t){var r=function(){n.init().then(function(){t.info("Quiz started")})["catch"](function(e){t.error(e)})},o=function(){return n.isQuizRunning()},u=function(){return n.hasQuizStarted()},i=function(){return n.hasQuizEnded()},s=function(){return n.getTotalPoints()};e.startQuiz=r,e.isQuizRunning=o,e.hasQuizStarted=u,e.hasQuizEnded=i,e.getTotalPoints=s}]),angular.module("magellan").controller("RegisterCtrl",["$scope","LogSrv","FocusSrv","UserSrv","$state","$window",function(e,n,t,r,o,u){e.newUser={},e.message=null;var i=function(t){return!!t&&void(s()&&r.register(e.newUser).then(function(n){200===n.status?(e.$emit("app.login",n.data),o.go("home",{action:"register.successful"})):e.message={type:"error",text:"Bei der Anmeldung scheint etwas schief gegangen zu sein"}})["catch"](function(t){n.error(t);var r;switch(t.message){case"Username already exists":r="Der Benutzername existiert bereits";break;default:r="Bei der Anmeldung scheint etwas schief gegangen zu sein"}e.$$phase?e.message={type:"error",text:r}:e.$apply(function(){e.message={type:"error",text:r}})}))},s=function(){e.message=null;var n=e.newUser.password,t=e.newUser.password2;return e.newUser.username&&e.newUser.email&&n&&t?""===n||""===t?e.message={type:"error",text:"Die Passwörter können nicht leer sein"}:n!==t&&(e.message={type:"error",text:"Die Passwörter stimmen nicht überein"}):e.message={type:"error",text:"Alle Felder müssen ausgefüllt sein"},!e.message},a=function(){i(!0)};e.delegateSubmit=a,e.register=i,t("#username")}]),angular.module("magellan").controller("SettingsCtrl",["$scope","AppConfig","FocusSrv","LogSrv","UserSrv",function(e,n,t,r,o){var u=function(){e.message=null;var u=n["settings.user.colors"];e.userObj={username:e.user.username,email:e.user.email,color:e.user.color},e.userColors=u;var i=function(n){e.userObj.color=n},s=function(){o.updateBasic(e.userObj).then(function(n){e.user.username=e.userObj.username,e.user.email=e.userObj.email,e.user.color=e.userObj.color,e.$apply(function(){e.message={type:"success",text:"Einstellungen wurden erfolgreich gespeichert"}})})["catch"](function(n){r.error("Update user",n);var t;switch(n.message){case"Username already exists":t="Der Benutzername ist bereits vergeben";break;default:t="Die Einstellungen konnten nicht gespeichert werden"}e.$apply(function(){e.message={type:"error",text:t}})})},a=function(){s(!0)};e.setColor=i,e.updateUser=s,e.delegateSubmit=a,t("#username")};e.user&&u(),e.$on("user.loaded",function(e,n){u()})}]),angular.module("magellan").directive("quiz",function(){return{templateUrl:"build/views/templates/quiz-directive.template.html",scope:!0,controller:"QuizDirectiveController",restrict:"E",link:function(e,n,t){}}}),angular.module("magellan").filter("renderHtml",["$sce",function(e){return function(n){return e.trustAsHtml(n)}}]),angular.module("magellan").factory("AuthInterceptor",["AuthTokenSrv",function(e){var n=function(n){var t=e.getToken();return t&&(n.headers=n.headers||{},n.headers["X-Auth"]=t),n};return{request:n}}]),angular.module("magellan").factory("AuthTokenSrv",["$window",function(e){var n=e.sessionStorage,t="auth-token",r=function(){return n.getItem(t)},o=function(e){e?n.setItem(t,e):n.removeItem(t)};return{getToken:r,setToken:o}}]),angular.module("magellan").factory("CountrySrv",["$http","IndexedDBSrv","LogSrv",function(e,n,t){var r=null,o=null,u=null,i="magellan",s="countryStore",a="countries",l="version",c=n.indexedDBAvailable(),f=function(){return g()},g=function(){return c?new Promise(function(e,a){n.createDatabase(i,s).then(m).then(p).then(v).then(d).then(h).then(function(n){r=n.countries,t.info("loaded countries from",n.loadStrategy.toUpperCase()),o={},u={},r.forEach(function(e){o[e.alpha3Code]=e;var n=e.name.substr(0,1).toUpperCase();switch(n){case"Ä":n="A";break;case"Ö":n="O";break;case"Ü":n="U"}void 0===u[n]&&(u[n]=[]),u[n].push({alpha3Code:e.alpha3Code,name:e.name})}),e(r)})["catch"](function(e){t.error("failed to load countries",e),a(e)})}):b()},d=function(e){return new Promise(function(n,t){var r,o=e.internalVersion,u=e.externalVersion;r=null===o?"api":u>o?"api":"db",e.loadStrategy=r,n(e)})},h=function(e){return new Promise(function(t,r){var o=e.loadStrategy;switch(o){case"api":b().then(function(r){e.countries=r,n.putItem(i,s,{name:a,value:r}),n.putItem(i,s,{name:l,value:e.externalVersion}),t(e)})["catch"](function(e){r(e)});break;case"db":w(e).then(function(e){t(e)})["catch"](function(e){r(e)});break;default:r("Unknown load strategy")}})},m=function(){return new Promise(function(e,n){e({})})},p=function(e){return new Promise(function(t,r){n.retrieveItem(i,s,l).then(function(n){e.internalVersion=n.value,t(e)})["catch"](function(n){e.internalVersion=null,t(e)})})},v=function(e){return O().then(function(n){return e.externalVersion=n,e})},w=function(e){return new Promise(function(t,r){n.retrieveItem(i,s,a).then(function(n){e.countries=n.value,t(e)})["catch"](function(e){t(null)})})},b=function(){return new Promise(function(n,t){e.get("/api/countries").then(function(e){n(e.data)})["catch"](function(e){t(e)})})},O=function(){return new Promise(function(n,t){e.get("/api/countries/version").then(function(e){n(e.data.version||0)})["catch"](function(e){n(0)})})},C=function(e){return null===o?null:o[e]},A=function(){return null===u?null:u},y=function(){return null!==r&&r.length>0};return{init:f,getCountryByAlpha3:C,getCountriesByLetter:A,areCountriesLoaded:y}}]),angular.module("magellan").factory("FocusSrv",["$timeout","$window",function(e,n){return function(t){e(function(){var e=n.document.querySelector(t);e&&e.focus()})}}]),angular.module("magellan").factory("IndexedDBSrv",["$window",function(e){var n="name",t=e.indexedDB||e.webkitIndexedDB||e.msIndexedDB,r=e.IDBKeyRange||e.webkitIDBKeyRange,o=e.IDBTransaction||e.webkitIDBTransaction;o&&(o.READ_WRITE=o.READ_WRITE||"readwrite",o.READ_ONLY=o.READ_ONLY||"readonly");var u=function(){return!!t},i=function(e,r){return new Promise(function(o,u){var i=t.open(e);i.onupgradeneeded=function(e){var t=e.target.result;t.createObjectStore(r,{keyPath:n})},i.onsuccess=function(e){o(e)},i.onerror=function(e){u(e)}})},s=function(e){return new Promise(function(n,r){var o=t.deleteDatabase(e);o.onsuccess=function(e){n(e)},o.onerror=function(e){r(e)}})},a=function(e,n,r){return new Promise(function(u,i){var s=t.open(e);s.onsuccess=function(e){var t=e.target.result,s=t.transaction(n,o.READ_WRITE),a=s.objectStore(n),l=a.add(r);l.onsuccess=function(e){u(e)},l.onerror=function(e){i(e)}}})},l=function(e,n,r){return new Promise(function(u,i){var s=t.open(e);s.onsuccess=function(e){var t=e.target.result,s=t.transaction(n,o.READ_WRITE),a=s.objectStore(n),l=a.put(r);l.onsuccess=function(e){u(e)},l.onerror=function(e){i(e)}}})},c=function(e,n,u){return new Promise(function(i,s){var a=null,l=t.open(e);l.onsuccess=function(e){var t=e.target.result,s=t.transaction(n,o.READ_ONLY),l=s.objectStore(n),c=r.only(u);l.openCursor(c).onsuccess=function(e){var n=e.target.result;n?(a=n.value,n["continue"]()):i(a)}},l.onerror=function(e){s(e)}})},f=function(e,n){return new Promise(function(r,u){var i=[],s=t.open(e);s.onsuccess=function(e){var t=e.target.result,u=t.transaction(n,o.READ_ONLY),s=u.objectStore(n);s.openCursor().onsuccess=function(e){var n=e.target.result;n?(i.push(n.value),n["continue"]()):r(i)}},s.onerror=function(e){u(e)}})};return{createDatabase:i,dropDatabase:s,addItem:a,putItem:l,retrieveItem:c,retrieveItems:f,indexedDBAvailable:u}}]),angular.module("magellan").factory("LogSrv",["AppConfig",function(e){var n=function(){e["log.info"]&&console.log.apply(console,arguments)},t=function(){e["log.error"]&&console.error.apply(console,arguments)};return{info:n,error:t}}]),angular.module("magellan").factory("QuizSrv",["AppConfig","CountrySrv","ScoreSrv","LogSrv",function(e,n,t,r){var o=null,u=null,i=function(e){o=e},s=function(){return null!==o&&o.length>0},a=function(){return new Promise(function(e,n){s||n("Countries have not been loaded"),u=g("country"),e(u.start())})},l=function(){return null!==u&&(u.hasStarted()&&!u.hasEnded())},c=function(){return null!==u&&u.hasStarted()},f=function(){return null!==u&&u.hasEnded()},g=function(e){switch(e){case"country":default:return d()}},d=function(){for(var t=new Quiz,r=100,u=3,i=25,s=2.5,a=e["quiz.country.types"],l=Object.keys(a).length,c=[],f=e["quiz.country.questions"],g=0;g<f;g++){for(var d=!1;!d;){var O=o[getRandomInt(0,o.length-1)];d=c.indexOf(O.alpha3Code)<0}c.push(O.alpha3Code)}var C=0;return c.forEach(function(e){C++;var o=n.getCountryByAlpha3(e),c=a[getRandomInt(1,l)],g=h(c,o),d={type:c,input:p(c),unit:v(c)},O=m(c,o),A=w(c,r,s),y=b(c,u,i);C>=f&&(d.bonus=!0),"FLAG_OF_COUNTRY"===c&&(d.media="flag",d.alpha2Code=o.alpha2Code.toLocaleLowerCase()),t.addQuestion(new Question({text:g,info:d,answer:O,checkAnswer:A,hints:y}))}),t},h=function(e,n){switch(e){case"CAPITAL_OF_COUNTRY":return"Wie heißt die Hauptstadt von ["+n.name+"]";case"COUNTRY_OF_CAPITAL":return"["+n.capital+"] ist die Hauptstadt von welchem Land";case"POPULATION_OF_COUNTRY":return"Wie viele Menschen leben in ["+n.name+"]";case"AREA_OF_COUNTRY":return"Wie groß ist die Fläche von ["+n.name+"]";case"FLAG_OF_COUNTRY":return"Welches Land hat diese Flagge";default:return"?"}},m=function(e,n){switch(e){case"CAPITAL_OF_COUNTRY":var t=void 0!==n.altSpellings&&void 0!==n.altSpellings.capital?n.altSpellings.capital:[];return{correct:n.capital,altSpellings:t};case"COUNTRY_OF_CAPITAL":case"FLAG_OF_COUNTRY":var t=void 0!==n.altSpellings&&void 0!==n.altSpellings.name?n.altSpellings.name:[];return{correct:n.name,altSpellings:t};case"POPULATION_OF_COUNTRY":return{correct:n.population};case"AREA_OF_COUNTRY":return{correct:n.area};default:return"?"}},p=function(e){switch(e){case"POPULATION_OF_COUNTRY":return"number.high";case"AREA_OF_COUNTRY":return"number.medium";case"CAPITAL_OF_COUNTRY":case"COUNTRY_OF_CAPITAL":case"FLAG_OF_COUNTRY":default:return"text.standard"}},v=function(e){switch(e){case"AREA_OF_COUNTRY":return"km²";case"POPULATION_OF_COUNTRY":return"Einwohner";default:return null}},w=function(e,n,t){switch(e){case"CAPITAL_OF_COUNTRY":case"COUNTRY_OF_CAPITAL":case"FLAG_OF_COUNTRY":return function(e,r,o,u,i){var s=r===e.correct||e.altSpellings&&e.altSpellings.indexOf(r)>=0,a=s?n:0;return o>0&&(a-=o*u),void 0!==i&&void 0!==i.bonus&&i.bonus===!0&&(a*=t),a};case"POPULATION_OF_COUNTRY":case"AREA_OF_COUNTRY":return function(e,n,r,o,u){var i,s=Math.abs(n-e.correct)/e.correct*100;return i=s<=3?100:s<=6?90:s<=9?80:s<=12?70:s<=14?60:s<=16?50:s<=18?40:s<=20?30:s<=25?20:s<=30?10:0,r>0&&(i-=r*o),void 0!==u&&void 0!==u.bonus&&u.bonus===!0&&(i*=t),i};default:return"?"}},b=function(e,n,t){switch(e){case"CAPITAL_OF_COUNTRY":case"COUNTRY_OF_CAPITAL":case"FLAG_OF_COUNTRY":return{allowed:!0,maximum:n,cost:t,give:function(e,n){return n.correct.substr(0,e)}};case"POPULATION_OF_COUNTRY":case"AREA_OF_COUNTRY":return{allowed:!1};default:return"?"}},O=function(){return l()?u.getCurrentQuestionNumber():null},C=function(){return l()?u.getNumberOfQuestions():null},A=function(){return l()?u.currentQuestion():null},y=function(){l()&&u.nextQuestion()},_=function(){return null===u?null:u.getTotalPoints()},T=function(){return new Promise(function(e,n){null!==u&&u.hasEnded()?(u.submitted===!0&&n("Quiz has already been submitted"),u.submitted=!0,t.putHighscore(u.getTotalPoints()).then(function(n){e(n)})["catch"](function(e){n(e)})):n("No quiz is currently running")})};return{init:a,setCountries:i,isQuizRunning:l,hasQuizStarted:c,hasQuizEnded:f,getCurrentQuestionNumber:O,getNumberOfQuizQuestions:C,getCurrentQuestion:A,nextQuestion:y,getTotalPoints:_,conclude:T}}]),angular.module("magellan").factory("ScoreSrv",["$http",function(e){var n=function(){return new Promise(function(n,t){e.get("/api/scores/all").success(function(e){n(e)}).error(function(e){t(e)})})},t=function(){return new Promise(function(n,t){e.get("/api/scores/user").success(function(e){n(e)}).error(function(e){t(e)})})},r=function(){return new Promise(function(n,t){e.get("/api/scores/high").success(function(e){n(e)}).error(function(e){t(e)})})},o=function(n){return new Promise(function(t,r){e.put("/api/scores",{score:n}).success(function(e){t(e)}).error(function(e){r(e)})})};return{getHighscoreList:n,getUserHighscore:t,getOverallHighscore:r,putHighscore:o}}]),angular.module("magellan").factory("UserSrv",["$http","AuthTokenSrv","AppConfig",function(e,n,t){var r=this,o=function(){return e.get("/api/user")},u=function(){return new Promise(function(e,t){var r=n.getToken();r?(n.setToken(r),o().then(function(n){e(n.data)})["catch"](function(e){t(e)})):t("No token in storage")})},i=function(t,u){return e.post("/api/session",{username:t,password:u}).then(function(e){return r.token=e.data,n.setToken(r.token),o()})},s=function(){return new Promise(function(e,t){r.token=null,n.setToken(),e()})},a=function(n){return new Promise(function(r,o){var u=t["settings.user.colors"];n.color=u[getRandomInt(0,u.length-1)],e.post("/api/user",n).success(function(e){i(n.username,n.password).then(function(e){r(e)})["catch"](function(e){o(e)})}).error(function(e){o(e)})})},l=function(n){return new Promise(function(t,r){e.put("/api/user/basic",n).success(function(e){t(e)}).error(function(e){r(e)})})};return{getUser:o,getUserFromStorage:u,login:i,logout:s,register:a,updateBasic:l}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInNjcmlwdC5qcyIsIm1vZGVscy5qcyIsInJvdXRlcy5qcyIsImNvbnRyb2xsZXJzL2NvdW50cmllcy5jdHJsLmpzIiwiY29udHJvbGxlcnMvY291bnRyeS1kZXRhaWwuY3RybC5qcyIsImNvbnRyb2xsZXJzL2Ryb3Bkb3duLmN0cmwuanMiLCJjb250cm9sbGVycy9ob21lLmN0cmwuanMiLCJjb250cm9sbGVycy9sb2dpbi5jdHJsLmpzIiwiY29udHJvbGxlcnMvbG9nb3V0LmN0cmwuanMiLCJjb250cm9sbGVycy9xdWl6LWRpcmVjdGl2ZS5jdHJsLmpzIiwiY29udHJvbGxlcnMvcXVpei5jdHJsLmpzIiwiY29udHJvbGxlcnMvcmVnaXN0ZXIuY3RybC5qcyIsImNvbnRyb2xsZXJzL3NldHRpbmdzLmN0cmwuanMiLCJkaXJlY3RpdmVzL3F1aXouZGlyZWN0aXZlLmpzIiwiZmlsdGVycy9yZW5kZXJIdG1sLmZpbHRlci5qcyIsImludGVyY2VwdG9ycy9hdXRoLmludGVyY2VwdG9yLmpzIiwic2VydmljZXMvYXV0aC10b2tlbi5zZXJ2aWNlLmpzIiwic2VydmljZXMvY291bnRyeS5zZXJ2aWNlLmpzIiwic2VydmljZXMvZm9jdXMuc2VydmljZS5qcyIsInNlcnZpY2VzL2luZGV4ZWQtZGIuc2VydmljZS5qcyIsInNlcnZpY2VzL2xvZy5zZXJ2aWNlLmpzIiwic2VydmljZXMvcXVpei5zZXJ2aWNlLmpzIiwic2VydmljZXMvc2NvcmUuc2VydmljZS5qcyIsInNlcnZpY2VzL3VzZXIuc2VydmljZS5qcyJdLCJuYW1lcyI6WyJtYWdlbGxhbiIsImFuZ3VsYXIiLCJtb2R1bGUiLCIkaHR0cFByb3ZpZGVyIiwiaW50ZXJjZXB0b3JzIiwicHVzaCIsImNvbnN0YW50IiwibG9nLmluZm8iLCJsb2cuZXJyb3IiLCJxdWl6LmNvdW50cnkucXVlc3Rpb25zIiwicXVpei5jb3VudHJ5LnR5cGVzIiwiMSIsIjIiLCIzIiwiNCIsIjUiLCJzZXR0aW5ncy51c2VyLmNvbG9ycyIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCIkc3RhdGUiLCJVc2VyU3J2IiwiQ291bnRyeVNydiIsIlF1aXpTcnYiLCJhcHAiLCJjb25maWciLCJ0aXRsZSIsInN1YnRpdGxlIiwiYXV0aG9yIiwiZ2V0VXNlckZyb21TdG9yYWdlIiwidGhlbiIsInVzZXIiLCIkYnJvYWRjYXN0IiwiaW5pdCIsImNvdW50cmllcyIsInNldENvdW50cmllcyIsImVyciIsImlzUHJvZ3Jlc3NCYXJWaXNpYmxlIiwiaXMiLCIkb24iLCJldmVudCIsImRhdGEiLCJnbyIsIlF1aXoiLCJjdXJyZW50UXVlc3Rpb25JZHgiLCJxdWVzdGlvbnMiLCJ0aGlzIiwic3RhcnQiLCJsZW5ndGgiLCJFcnJvciIsIm5leHRRdWVzdGlvbiIsImlzQWN0aXZlIiwiaGFzU3RhcnRlZCIsImhhc0VuZGVkIiwic3VibWl0dGVkIiwiYWRkUXVlc3Rpb24iLCJxdWVzdGlvbiIsInVuZGVmaW5lZCIsInZhbGlkIiwibmVjZXNzYXJ5UHJvcGVydGllcyIsImZvckVhY2giLCJwcm9wZXJ0eSIsImhhc093blByb3BlcnR5IiwiY3VycmVudFF1ZXN0aW9uIiwiZ2V0VG90YWxQb2ludHMiLCJ0b3RhbFBvaW50cyIsInBvaW50cyIsImdldEN1cnJlbnRRdWVzdGlvbk51bWJlciIsImdldE51bWJlck9mUXVlc3Rpb25zIiwiUXVlc3Rpb24iLCJvcHRpb25zIiwidGV4dCIsImluZm8iLCJhbnN3ZXIiLCJoaW50cyIsImhpbnRzVXNlZCIsImNoZWNrQW5zd2VyIiwiYW5zd2VyZWQiLCJvcHRzIiwiYWxsb3dlZCIsIm1heGltdW0iLCJjb3N0IiwiZ2l2ZSIsInByb3AiLCJ2YWx1ZSIsImdldEluZm8iLCJzb2x1dGlvbiIsImhpbnQiLCJzdWJtaXR0ZWRBbnN3ZXIiLCJNYXRoIiwibWF4IiwiaGludHNBbGxvd2VkIiwiaGludHNSZW1haW5pbmciLCJnZXRSYW5kb21JbnQiLCJtaW4iLCJmbG9vciIsInJhbmRvbSIsImdldFN0cmluZ0JldHdlZW4iLCJmaXJzdFN0cmluZyIsInNlY29uZFN0cmluZyIsImZpcnN0UG9zIiwiaW5kZXhPZiIsInNlY29uZFBvcyIsInN1YnN0ciIsImV4cG9ydHMiLCIkbG9jYXRpb25Qcm92aWRlciIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiaHRtbDVNb2RlIiwib3RoZXJ3aXNlIiwic3RhdGUiLCJ1cmwiLCJ0ZW1wbGF0ZVVybCIsInBhcmFtcyIsImFjdGlvbiIsImNvdW50cmllc0J5TGV0dGVyIiwiY291bnRyeUtleXMiLCJnZXRDb3VudHJpZXNCeUxldHRlciIsIk9iamVjdCIsImtleXMiLCIkJHBoYXNlIiwiJGFwcGx5IiwiYXJlQ291bnRyaWVzTG9hZGVkIiwiJHN0YXRlUGFyYW1zIiwiYWxwaGEzQ29kZSIsImNvdW50cnkiLCJnZXRDb3VudHJ5QnlBbHBoYTMiLCJnZXRDb3VudHJ5RnJvbVNlcnZpY2UiLCJhbHBoYTMiLCJ0b2dnbGVEcm9wZG93biIsInZpc2libGUiLCJzaG93RHJvcGRvd24iLCJoaWRlRHJvcGRvd24iLCJpc0Ryb3Bkb3duVmlzaWJsZSIsImhhbmRsZUNsaWNrT3V0c2lkZSIsImNvbnNvbGUiLCJsb2ciLCJMb2dTcnYiLCJtZXNzYWdlIiwidHlwZSIsIkZvY3VzU3J2IiwibG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwicmVzcG9uc2UiLCIkZW1pdCIsImVycm9yIiwibWVzc2FnZVRleHQiLCJzdGF0dXMiLCJsb2dvdXQiLCJuZ1Byb2dyZXNzRmFjdG9yeSIsInByb2dyZXNzYmFyIiwiY3JlYXRlSW5zdGFuY2UiLCJzZXRQYXJlbnQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwic2V0QWJzb2x1dGUiLCJzZXRDb2xvciIsImlzUmVzdWx0c1BhZ2VWaXNpYmxlIiwiYWNoaWV2ZW1lbnRzIiwiYW5zd2VySW5wdXQiLCJtdWx0aXBsaWVyT3B0aW9ucyIsImxhYmVsIiwidXBkYXRlVWkiLCJnZXRDdXJyZW50UXVlc3Rpb24iLCJpbnB1dCIsIm11bHRpcGxpZXIiLCJ1cGRhdGVQcm9ncmVzc0JhciIsInNldCIsImdldFF1ZXN0aW9uIiwiZ2V0TnVtYmVyT2ZRdWl6UXVlc3Rpb25zIiwicmVuZGVyUXVlc3Rpb25UZXh0IiwicmVuZGVyIiwiZ2V0UXVlc3Rpb25NZWRpYSIsIm1lZGlhIiwic2hvd1Jlc3VsdHNQYWdlIiwic3VibWl0QW5zd2VyIiwicmVwbGFjZSIsInF1ZXN0aW9uQW5zd2VyZWQiLCJpc1F1aXpSdW5uaW5nIiwicmVxdWVzdEhpbnQiLCJjbGFzc05hbWUiLCJoYW5kbGVLZXlQcmVzcyIsImtleUV2ZW50Iiwid2hpY2giLCJwcm9ncmVzc1BlcmNlbnQiLCJ3YXNMYXN0UXVlc3Rpb24iLCJwYXJzZUV2ZW50cyIsImV2ZW50cyIsImNvbnRpbnVlRmluaXNoZWQiLCJjb25jbHVkZSIsInN0YXJ0UXVpeiIsImhhc1F1aXpTdGFydGVkIiwiaGFzUXVpekVuZGVkIiwiJHdpbmRvdyIsIm5ld1VzZXIiLCJyZWdpc3RlciIsImlzVmFsaWQiLCJ2YWxpZGF0ZUJlZm9yZVN1Ym1pdCIsInBhc3N3b3JkMiIsImVtYWlsIiwiZGVsZWdhdGVTdWJtaXQiLCJBcHBDb25maWciLCJjb2xvcnMiLCJ1c2VyT2JqIiwiY29sb3IiLCJ1c2VyQ29sb3JzIiwibmV3Q29sb3IiLCJ1cGRhdGVVc2VyIiwidXBkYXRlQmFzaWMiLCJkaXJlY3RpdmUiLCJzY29wZSIsInJlc3RyaWN0IiwibGluayIsImVsZW1lbnQiLCJhdHRycyIsImZpbHRlciIsIiRzY2UiLCJ0cnVzdEFzSHRtbCIsImZhY3RvcnkiLCJBdXRoVG9rZW5TcnYiLCJhZGRUb2tlbiIsInRva2VuIiwiZ2V0VG9rZW4iLCJoZWFkZXJzIiwicmVxdWVzdCIsInN0b3JlIiwic2Vzc2lvblN0b3JhZ2UiLCJrZXkiLCJnZXRJdGVtIiwic2V0VG9rZW4iLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsIiRodHRwIiwiSW5kZXhlZERCU3J2IiwiY291bnRyaWVzQnlBbHBoYTMiLCJkYXRhYmFzZSIsImtleUNvdW50cmllcyIsImtleVZlcnNpb24iLCJpbmRleGVkREJBdmFpbGFibGUiLCJsb2FkQ291bnRyaWVzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjcmVhdGVEYXRhYmFzZSIsImdldEVtcHR5T2JqZWN0IiwiZ2V0SW50ZXJuYWxWZXJzaW9uIiwiZ2V0RXh0ZXJuYWxWZXJzaW9uIiwiZGV0ZXJtaW5lTG9hZFN0cmF0ZWd5IiwibG9hZERhdGEiLCJvYmoiLCJ0b1VwcGVyQ2FzZSIsImMiLCJmaXJzdExldHRlciIsIm5hbWUiLCJnZXRDb3VudHJpZXNGcm9tQVBJIiwic3RyYXRlZ3kiLCJpbnRlcm5hbFZlcnNpb24iLCJleHRlcm5hbFZlcnNpb24iLCJwdXRJdGVtIiwiZ2V0Q291bnRyaWVzRnJvbURCIiwiX29iaiIsInJldHJpZXZlSXRlbSIsIml0ZW0iLCJnZXRWZXJzaW9uRnJvbUFQSSIsInZlcnNpb24iLCJnZXQiLCIkdGltZW91dCIsInNlbGVjdG9yIiwicXVlcnlTZWxlY3RvciIsImZvY3VzIiwia2V5UGF0aCIsImluZGV4ZWREQiIsIndlYmtpdEluZGV4ZWREQiIsIm1zSW5kZXhlZERCIiwiSURCS2V5UmFuZ2UiLCJ3ZWJraXRJREJLZXlSYW5nZSIsIklEQlRyYW5zYWN0aW9uIiwid2Via2l0SURCVHJhbnNhY3Rpb24iLCJSRUFEX1dSSVRFIiwiUkVBRF9PTkxZIiwiZGJOYW1lIiwic3RvcmVOYW1lIiwib3BlbiIsIm9udXBncmFkZW5lZWRlZCIsImUiLCJpZGIiLCJ0YXJnZXQiLCJyZXN1bHQiLCJjcmVhdGVPYmplY3RTdG9yZSIsIm9uc3VjY2VzcyIsIm9uZXJyb3IiLCJkcm9wRGF0YWJhc2UiLCJkZWxldGVEYXRhYmFzZSIsImFkZEl0ZW0iLCJ0cmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlIiwicmVxdWVzdEFkZCIsImFkZCIsInB1dCIsIml0ZW1OYW1lIiwicmFuZ2UiLCJvbmx5Iiwib3BlbkN1cnNvciIsImN1cnNvciIsInJldHJpZXZlSXRlbXMiLCJpdGVtcyIsImxvZ0luZm8iLCJhcHBseSIsImFyZ3VtZW50cyIsImxvZ0Vycm9yIiwiU2NvcmVTcnYiLCJxdWl6IiwiX2NvdW50cmllcyIsImNvdW50cmllc0xvYWRlZCIsImNyZWF0ZVF1aXoiLCJxdWl6VHlwZSIsImNyZWF0ZUNvdW50cnlRdWl6IiwiY291bnRyeVF1aXoiLCJmdWxsUG9pbnRzIiwiaGludE1heGltdW0iLCJoaW50Q29zdCIsImxhc3RRdWVzdGlvbkJvbnVzIiwicXVlc3Rpb25UeXBlcyIsInF1ZXN0aW9uVHlwZXNMZW5ndGgiLCJzZWxlY3RlZENvdW50cmllcyIsIm51bWJlck9mUXVlc3Rpb25zIiwiaSIsImNvdW50cnlPayIsInFjbnQiLCJxdWVzdGlvblR5cGUiLCJnZXRRdWVzdGlvblRleHQiLCJnZXRRdWVzdGlvbklucHV0IiwidW5pdCIsImdldFF1ZXN0aW9uVW5pdCIsImdldFF1ZXN0aW9uQW5zd2VyIiwiZ2V0Q2hlY2tBbnN3ZXJMYW1iZGEiLCJnZXRRdWVzdGlvbkhpbnRzIiwiYWxwaGEyQ29kZSIsInRvTG9jYWxlTG93ZXJDYXNlIiwiY2FwaXRhbCIsImFsdFNwZWxsaW5ncyIsImNvcnJlY3QiLCJwb3B1bGF0aW9uIiwiYXJlYSIsImJvbnVzIiwiZXJyb3JQZXJjZW50YWdlIiwiYWJzIiwiaGludHNQb3NzaWJsZSIsInB1dEhpZ2hzY29yZSIsImdldEhpZ2hzY29yZUxpc3QiLCJzdWNjZXNzIiwibGlzdCIsImdldFVzZXJIaWdoc2NvcmUiLCJzY29yZSIsImdldE92ZXJhbGxIaWdoc2NvcmUiLCJzZWxmIiwiZ2V0VXNlciIsInBvc3QiXSwibWFwcGluZ3MiOiJBQUFBLEdBQUFBLFVBQUFDLFFBQUFDLE9BQUEsWUFDQSxZQUNBLGFBQ0EsY0NDSSxnQkRBSixTQUFBQyxHQUNBQSxFQUFBQyxhQUFBQyxLQUFBLHFCQUlBTCxVQUFBTSxTQUFBLGFBQ0FDLFlBQUEsRUFDQUMsYUFBQSxFQUVBQyx5QkFBQSxFQUNBQyxzQkFDQUMsRUFBQSxxQkFDQUMsRUFBQSxxQkFDQUMsRUFBQSx3QkFDQUMsRUFBQSxrQkFDQUMsRUFBQSxtQkFH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LEVBQUF0SSxPQUVBdUksT0FJQWhOLEVBQUEsV0FDQSxNQUFBLElBQUE0RixTQUFBLFNBQUFDLEVBQUFDLEdBQ0FpSCxFQUFBdEksTUFBQSxLQUdBRixFQUFBVSxXQUVBWSxPQUlBOUMsRUFBQSxTQUFBRCxHQUNBLE1BQUEsSUFBQThDLFNBQUEsU0FBQUMsRUFBQUMsR0FFQSxHQUFBeEMsR0FBQUQsRUFBQSx1QkFDQVAsR0FBQVUsTUFBQUYsRUFBQTlHLGFBQUEsRUFBQThHLEVBQUEzSixPQUFBLElBRUF5TCxFQUFBNkgsS0FBQSxZQUFBbkssR0FDQTRKLFFBQUEsU0FBQXRULEdBRUFvRyxFQUFBc0QsRUFBQXJELFNBQUFxRCxFQUFBcEQsVUFDQWpILEtBQUEsU0FBQVcsR0FDQXlNLEVBQUF6TSxLQUZBb0csU0FJQSxTQUFBekcsR0FDQStNLEVBQUEvTSxPQUdBOEcsTUFBQSxTQUFBOUcsR0FDQStNLEVBQUEvTSxRQUtBNkssRUFBQSxTQUFBbEwsR0FDQSxNQUFBLElBQUFrTixTQUFBLFNBQUFDLEVBQUFDLEdBQ0FWLEVBQUFrRSxJQUFBLGtCQUFBNVEsR0FDQWdVLFFBQUEsU0FBQXRULEdBQ0F5TSxFQUFBek0sS0FFQXlHLE1BQUEsU0FBQTlHLEdBQ0ErTSxFQUFBL00sT0FLQSxRQUNBaVUsUUFBQUEsRUFDQXhVLG1CQUFBQSxFQUNBZ0gsTUFBQUEsRUFDQVEsT0FBQUEsRUFDQStDLFNBQUFBLEVBQ0FhLFlBQUFBIiwiZmlsZSI6InNjcmlwdC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBtYWdlbGxhbiA9IGFuZ3VsYXIubW9kdWxlKFwibWFnZWxsYW5cIiwgW1xyXG4gICAgJ3VpLnJvdXRlcicsXHJcbiAgICAnbmdQcm9ncmVzcycsXHJcbiAgICAnbmdBbmltYXRlJ1xyXG5dLCBmdW5jdGlvbiBjb25maWcoJGh0dHBQcm92aWRlcikge1xyXG4gICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaCgnQXV0aEludGVyY2VwdG9yJyk7XHJcbn0pO1xyXG5cclxuLy8gZGVmaW5lIGFwcGxpY2F0aW9uIGNvbnN0YW50c1xyXG5tYWdlbGxhbi5jb25zdGFudChcIkFwcENvbmZpZ1wiLCB7XHJcbiAgICBcImxvZy5pbmZvXCI6IHRydWUsXHJcbiAgICBcImxvZy5lcnJvclwiOiB0cnVlLFxyXG5cclxuICAgIFwicXVpei5jb3VudHJ5LnF1ZXN0aW9uc1wiOiAzLFxyXG4gICAgXCJxdWl6LmNvdW50cnkudHlwZXNcIjoge1xyXG4gICAgICAgIDE6IFwiQ0FQSVRBTF9PRl9DT1VOVFJZXCIsXHJcbiAgICAgICAgMjogXCJDT1VOVFJZX09GX0NBUElUQUxcIixcclxuICAgICAgICAzOiBcIlBPUFVMQVRJT05fT0ZfQ09VTlRSWVwiLFxyXG4gICAgICAgIDQ6IFwiQVJFQV9PRl9DT1VOVFJZXCIsXHJcbiAgICAgICAgNTogXCJGTEFHX09GX0NPVU5UUllcIlxyXG4gICAgfSxcclxuXHJcbiAgICBcInNldHRpbmdzLnVzZXIuY29sb3JzXCI6IFtcclxuICAgICAgICAnc29mdF9yZWQnLFxyXG4gICAgICAgICd0aHVuZGVyYmlyZCcsXHJcbiAgICAgICAgJ29sZF9icmljaycsXHJcbiAgICAgICAgJ25ld195b3JrX3BpbmsnLFxyXG4gICAgICAgICdzbnVmZicsXHJcbiAgICAgICAgJ2hvbmV5X2Zsb3dlcicsXHJcbiAgICAgICAgJ3Nhbl9tYXJpbm8nLFxyXG4gICAgICAgICdzaGFrZXNwZWFyZScsXHJcbiAgICAgICAgJ21pbmcnLFxyXG4gICAgICAgICdnb3NzaXAnLFxyXG4gICAgICAgICdldWNhbHlwdHVzJyxcclxuICAgICAgICAnbW91bnRhaW5fbWVhZG93JyxcclxuICAgICAgICAnamFkZScsXHJcbiAgICAgICAgJ2NvbmZldHRpJyxcclxuICAgICAgICAnY2FsaWZvcm5pYScsXHJcbiAgICAgICAgJ2J1cm50X29yYW5nZScsXHJcbiAgICAgICAgJ2phZmZhJyxcclxuICAgICAgICAnZ2FsbGVyeScsXHJcbiAgICAgICAgJ2Vkd2FyZCcsXHJcbiAgICAgICAgJ2x5bmNoJ1xyXG4gICAgXVxyXG59KTtcclxuXHJcbm1hZ2VsbGFuLmNvbnRyb2xsZXIoXCJBcHBDdHJsXCIsIGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlLCBVc2VyU3J2LCBDb3VudHJ5U3J2LCBRdWl6U3J2KSB7XHJcbiAgICAvLyAtLS0tLS0tLS0tLSBBcHAgY29uZmlnIC0tLS0tLS0tLS0tLVxyXG4gICAgJHNjb3BlLmFwcCA9IHtcclxuICAgICAgICBjb25maWc6IHtcclxuICAgICAgICAgICAgdGl0bGU6IFwiTWFnZWxsYW5cIixcclxuICAgICAgICAgICAgc3VidGl0bGU6IFwiVGVzdCB5b3VyIGtub3dsZWRnZSBhYm91dCB0aGUgY291bnRyaWVzIG9mIG91ciB3b3JsZFwiLFxyXG4gICAgICAgICAgICBhdXRob3I6IFwiTWljaGFlbCBTdGlmdGVyXCJcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIC0tLS0tLS0tLS0tIEFwcCBpbml0aWFsaXphdGlvbiAtLS0tLS0tLS0tLS1cclxuICAgIFVzZXJTcnYuZ2V0VXNlckZyb21TdG9yYWdlKClcclxuICAgICAgICAudGhlbihmdW5jdGlvbih1c2VyKSB7XHJcbiAgICAgICAgICAgIC8vIHN0b3JlIHVzZXIgb2JqZWN0IGluIHNjb3BlXHJcbiAgICAgICAgICAgICRzY29wZS51c2VyID0gdXNlcjtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCd1c2VyLmxvYWRlZCcpO1xyXG5cclxuICAgICAgICAgICAgLy8gaW5pdCBjb3VudHJ5IHNlcnZpY2VcclxuICAgICAgICAgICAgQ291bnRyeVNydi5pbml0KClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGNvdW50cmllcykge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdjb3VudHJpZXMubG9hZGVkJywgY291bnRyaWVzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGNvdW50cmllcyBpbiBxdWl6IHNlcnZpY2VcclxuICAgICAgICAgICAgICAgICAgICBRdWl6U3J2LnNldENvdW50cmllcyhjb3VudHJpZXMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgIC8vIHRoZSBvbmx5IGVycm9yIHRoYXQgY2FuIG9jY3VyIGlzIHRoYXQgdGhlcmUgaXMgbm8gdG9rZW4gaW4gc3RvcmFnZSwgd2UgZG8gbm90IG5lZWQgdG8gcmVhY3QgdG8gdGhhdFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICRzY29wZS5pc1Byb2dyZXNzQmFyVmlzaWJsZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAkc3RhdGUuaXMoJ3F1aXonKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0gRXZlbnQgaGFuZGxpbmcgLS0tLS0tLS0tLS0tXHJcbiAgICAkc2NvcGUuJG9uKCdhcHAubG9naW4nLCBmdW5jdGlvbihldmVudCwgZGF0YSkge1xyXG4gICAgICAgIC8vIHN0b3JlIHVzZXIgb2JqZWN0IGluIHNjb3BlXHJcbiAgICAgICAgJHNjb3BlLnVzZXIgPSBkYXRhO1xyXG5cclxuICAgICAgICAvLyBpbml0IGNvdW50cnkgc2VydmljZVxyXG4gICAgICAgIENvdW50cnlTcnYuaW5pdCgpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGNvdW50cmllcykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ2NvdW50cmllcy5sb2FkZWQnLCBjb3VudHJpZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHNldCBjb3VudHJpZXMgaW4gcXVpeiBzZXJ2aWNlXHJcbiAgICAgICAgICAgICAgICBRdWl6U3J2LnNldENvdW50cmllcyhjb3VudHJpZXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gZ28gdG8gcXVpeiBwYWdlXHJcbiAgICAgICAgJHN0YXRlLmdvKCdxdWl6Jyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuJG9uKCdhcHAubG9nb3V0JywgZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcclxuICAgICAgICAvLyByZW1vdmUgdXNlciBvYmplY3QgZnJvbSBzY29wZVxyXG4gICAgICAgICRzY29wZS51c2VyID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gZ28gdG8gaG9tZSBwYWdlXHJcbiAgICAgICAgJHN0YXRlLmdvKCdob21lJyk7XHJcbiAgICB9KTtcclxufSk7IiwidmFyIG1hZ2VsbGFuID0gYW5ndWxhci5tb2R1bGUoXCJtYWdlbGxhblwiLCBbXHJcbiAgICAndWkucm91dGVyJyxcclxuICAgICduZ1Byb2dyZXNzJyxcclxuICAgICduZ0FuaW1hdGUnXHJcbl0sIFtcIiRodHRwUHJvdmlkZXJcIiwgZnVuY3Rpb24gY29uZmlnKCRodHRwUHJvdmlkZXIpIHtcclxuICAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goJ0F1dGhJbnRlcmNlcHRvcicpO1xyXG59XSk7XHJcblxyXG4vLyBkZWZpbmUgYXBwbGljYXRpb24gY29uc3RhbnRzXHJcbm1hZ2VsbGFuLmNvbnN0YW50KFwiQXBwQ29uZmlnXCIsIHtcclxuICAgIFwibG9nLmluZm9cIjogdHJ1ZSxcclxuICAgIFwibG9nLmVycm9yXCI6IHRydWUsXHJcblxyXG4gICAgXCJxdWl6LmNvdW50cnkucXVlc3Rpb25zXCI6IDMsXHJcbiAgICBcInF1aXouY291bnRyeS50eXBlc1wiOiB7XHJcbiAgICAgICAgMTogXCJDQVBJVEFMX09GX0NPVU5UUllcIixcclxuICAgICAgICAyOiBcIkNPVU5UUllfT0ZfQ0FQSVRBTFwiLFxyXG4gICAgICAgIDM6IFwiUE9QVUxBVElPTl9PRl9DT1VOVFJZXCIsXHJcbiAgICAgICAgNDogXCJBUkVBX09GX0NPVU5UUllcIixcclxuICAgICAgICA1OiBcIkZMQUdfT0ZfQ09VTlRSWVwiXHJcbiAgICB9LFxyXG5cclxuICAgIFwic2V0dGluZ3MudXNlci5jb2xvcnNcIjogW1xyXG4gICAgICAgICdzb2Z0X3JlZCcsXHJcbiAgICAgICAgJ3RodW5kZXJiaXJkJyxcclxuICAgICAgICAnb2xkX2JyaWNrJyxcclxuICAgICAgICAnbmV3X3lvcmtfcGluaycsXHJcbiAgICAgICAgJ3NudWZmJyxcclxuICAgICAgICAnaG9uZXlfZmxvd2VyJyxcclxuICAgICAgICAnc2FuX21hcmlubycsXHJcbiAgICAgICAgJ3NoYWtlc3BlYXJlJyxcclxuICAgICAgICAnbWluZycsXHJcbiAgICAgICAgJ2dvc3NpcCcsXHJcbiAgICAgICAgJ2V1Y2FseXB0dXMnLFxyXG4gICAgICAgICdtb3VudGFpbl9tZWFkb3cnLFxyXG4gICAgICAgICdqYWRlJyxcclxuICAgICAgICAnY29uZmV0dGknLFxyXG4gICAgICAgICdjYWxpZm9ybmlhJyxcclxuICAgICAgICAnYnVybnRfb3JhbmdlJyxcclxuICAgICAgICAnamFmZmEnLFxyXG4gICAgICAgICdnYWxsZXJ5JyxcclxuICAgICAgICAnZWR3YXJkJyxcclxuICAgICAgICAnbHluY2gnXHJcbiAgICBdXHJcbn0pO1xyXG5cclxubWFnZWxsYW4uY29udHJvbGxlcihcIkFwcEN0cmxcIiwgW1wiJHNjb3BlXCIsIFwiJHN0YXRlXCIsIFwiVXNlclNydlwiLCBcIkNvdW50cnlTcnZcIiwgXCJRdWl6U3J2XCIsIGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlLCBVc2VyU3J2LCBDb3VudHJ5U3J2LCBRdWl6U3J2KSB7XHJcbiAgICAvLyAtLS0tLS0tLS0tLSBBcHAgY29uZmlnIC0tLS0tLS0tLS0tLVxyXG4gICAgJHNjb3BlLmFwcCA9IHtcclxuICAgICAgICBjb25maWc6IHtcclxuICAgICAgICAgICAgdGl0bGU6IFwiTWFnZWxsYW5cIixcclxuICAgICAgICAgICAgc3VidGl0bGU6IFwiVGVzdCB5b3VyIGtub3dsZWRnZSBhYm91dCB0aGUgY291bnRyaWVzIG9mIG91ciB3b3JsZFwiLFxyXG4gICAgICAgICAgICBhdXRob3I6IFwiTWljaGFlbCBTdGlmdGVyXCJcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIC0tLS0tLS0tLS0tIEFwcCBpbml0aWFsaXphdGlvbiAtLS0tLS0tLS0tLS1cclxuICAgIFVzZXJTcnYuZ2V0VXNlckZyb21TdG9yYWdlKClcclxuICAgICAgICAudGhlbihmdW5jdGlvbih1c2VyKSB7XHJcbiAgICAgICAgICAgIC8vIHN0b3JlIHVzZXIgb2JqZWN0IGluIHNjb3BlXHJcbiAgICAgICAgICAgICRzY29wZS51c2VyID0gdXNlcjtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCd1c2VyLmxvYWRlZCcpO1xyXG5cclxuICAgICAgICAgICAgLy8gaW5pdCBjb3VudHJ5IHNlcnZpY2VcclxuICAgICAgICAgICAgQ291bnRyeVNydi5pbml0KClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGNvdW50cmllcykge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdjb3VudHJpZXMubG9hZGVkJywgY291bnRyaWVzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGNvdW50cmllcyBpbiBxdWl6IHNlcnZpY2VcclxuICAgICAgICAgICAgICAgICAgICBRdWl6U3J2LnNldENvdW50cmllcyhjb3VudHJpZXMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgIC8vIHRoZSBvbmx5IGVycm9yIHRoYXQgY2FuIG9jY3VyIGlzIHRoYXQgdGhlcmUgaXMgbm8gdG9rZW4gaW4gc3RvcmFnZSwgd2UgZG8gbm90IG5lZWQgdG8gcmVhY3QgdG8gdGhhdFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICRzY29wZS5pc1Byb2dyZXNzQmFyVmlzaWJsZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAkc3RhdGUuaXMoJ3F1aXonKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0gRXZlbnQgaGFuZGxpbmcgLS0tLS0tLS0tLS0tXHJcbiAgICAkc2NvcGUuJG9uKCdhcHAubG9naW4nLCBmdW5jdGlvbihldmVudCwgZGF0YSkge1xyXG4gICAgICAgIC8vIHN0b3JlIHVzZXIgb2JqZWN0IGluIHNjb3BlXHJcbiAgICAgICAgJHNjb3BlLnVzZXIgPSBkYXRhO1xyXG5cclxuICAgICAgICAvLyBpbml0IGNvdW50cnkgc2VydmljZVxyXG4gICAgICAgIENvdW50cnlTcnYuaW5pdCgpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGNvdW50cmllcykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ2NvdW50cmllcy5sb2FkZWQnLCBjb3VudHJpZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHNldCBjb3VudHJpZXMgaW4gcXVpeiBzZXJ2aWNlXHJcbiAgICAgICAgICAgICAgICBRdWl6U3J2LnNldENvdW50cmllcyhjb3VudHJpZXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gZ28gdG8gcXVpeiBwYWdlXHJcbiAgICAgICAgJHN0YXRlLmdvKCdxdWl6Jyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuJG9uKCdhcHAubG9nb3V0JywgZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcclxuICAgICAgICAvLyByZW1vdmUgdXNlciBvYmplY3QgZnJvbSBzY29wZVxyXG4gICAgICAgICRzY29wZS51c2VyID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gZ28gdG8gaG9tZSBwYWdlXHJcbiAgICAgICAgJHN0YXRlLmdvKCdob21lJyk7XHJcbiAgICB9KTtcclxufV0pO1xuLy8gb3duIGNsYXNzZXMgYW5kIGZ1bmN0aW9uc1xyXG5cclxuLy8gLS0tLS0tLS0tLSBRVUlaIC0tLS0tLS0tLS1cclxudmFyIFF1aXogPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIGluZGV4IG9mIGN1cnJlbnQgcXVlc3Rpb25cclxuICAgIHZhciBjdXJyZW50UXVlc3Rpb25JZHggPSBudWxsO1xyXG5cclxuICAgIC8vIGFycmF5IGNvbnRhaW5pbmcgYWxsIHF1ZXN0aW9uc1xyXG4gICAgdmFyIHF1ZXN0aW9ucyA9IFtdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3RhcnRzIHRoZSBxdWl6LlxyXG4gICAgICovXHJcbiAgICB0aGlzLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gY2hlY2sgaWYgcXVpeiBoYXMgcXVlc3Rpb25zXHJcbiAgICAgICAgaWYgKHF1ZXN0aW9ucy5sZW5ndGggPD0gMClcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJDYW5ub3Qgc3RhcnQgYSBxdWl6IHdpdGhvdXQgcXVlc3Rpb25zXCIpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5uZXh0UXVlc3Rpb24oKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5pc0FjdGl2ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhhc1N0YXJ0ZWQoKSAmJiAhdGhpcy5oYXNFbmRlZCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmhhc1N0YXJ0ZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gY3VycmVudFF1ZXN0aW9uSWR4ICE9PSBudWxsO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmhhc0VuZGVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzU3RhcnRlZCgpICYmIGN1cnJlbnRRdWVzdGlvbklkeCA+PSBxdWVzdGlvbnMubGVuZ3RoO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnN1Ym1pdHRlZCA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIG5ldyBxdWVzdGlvbiB0byB0aGUgcXVpei5cclxuICAgICAqIFRoZSBwYXJhbWV0ZXIgbXVzdCBiZSBhbiBxdWVzdGlvbiBvYmplY3QuXHJcbiAgICAgKiBJZiBubyBxdWVzdGlvbiBvYmplY3QgaXMgcGFzc2VkIG9yIGFuIG9iamVjdCB3aXRoIG1pc3NpbmcgcHJvcGVydGllcywgYW4gZXJyb3IgaXMgdGhyb3duLlxyXG4gICAgICovXHJcbiAgICB0aGlzLmFkZFF1ZXN0aW9uID0gZnVuY3Rpb24ocXVlc3Rpb24pIHtcclxuICAgICAgICBpZiAocXVlc3Rpb24gPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJObyBxdWVzdGlvbiBvYmplY3QgcGFzc2VkXCIpO1xyXG5cclxuICAgICAgICB2YXIgdmFsaWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyBhIHF1ZXN0aW9uIG9iamVjdCBtdXN0IGNvbnRhaW4gYWxsIHRoZXNlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgbmVjZXNzYXJ5UHJvcGVydGllcyA9IFsnY29uZmlnJywgJ2hpbnQnLCAnc29sdXRpb24nLCAnYW5zd2VyJywgJ3F1ZXN0aW9uJywgJ2dldEluZm8nLCAnaW5mbycsICdwb2ludHMnLCAnYW5zd2VyZWQnLCAnaGludHNBbGxvd2VkJywgJ2hpbnRzUmVtYWluaW5nJ107XHJcblxyXG4gICAgICAgIG5lY2Vzc2FyeVByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbihwcm9wZXJ0eSkge1xyXG4gICAgICAgICAgICBpZiAoIXF1ZXN0aW9uLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xyXG4gICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlF1ZXN0aW9uIG11c3QgaGF2ZSBwcm9wZXJ0eSAnXCIgKyBwcm9wZXJ0eSArIFwiJ1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgcXVlc3Rpb25zLnB1c2gocXVlc3Rpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBuZXh0IHF1ZXN0aW9uIG9mIHRoZSBxdWl6LlxyXG4gICAgICogSWYgdGhlIHF1aXogaGFzIGVuZGVkLCBpdCByZXR1cm5zIG5vdGhpbmcuXHJcbiAgICAgKi9cclxuICAgIHRoaXMubmV4dFF1ZXN0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRRdWVzdGlvbklkeCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjdXJyZW50UXVlc3Rpb25JZHggPSAwO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRRdWVzdGlvbklkeCsrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaGFzRW5kZWQoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcXVlc3Rpb25zW2N1cnJlbnRRdWVzdGlvbklkeF07XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuY3VycmVudFF1ZXN0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQWN0aXZlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcXVlc3Rpb25zW2N1cnJlbnRRdWVzdGlvbklkeF07XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZ2V0VG90YWxQb2ludHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmhhc1N0YXJ0ZWQoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB0b3RhbFBvaW50cyA9IDA7XHJcblxyXG4gICAgICAgIHF1ZXN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHF1ZXN0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciBwb2ludHMgPSBxdWVzdGlvbi5wb2ludHMoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChwb2ludHMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdG90YWxQb2ludHMgKz0gcG9pbnRzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0b3RhbFBvaW50cztcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5nZXRDdXJyZW50UXVlc3Rpb25OdW1iZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoY3VycmVudFF1ZXN0aW9uSWR4ID09PSBudWxsKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRRdWVzdGlvbklkeCArIDE7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZ2V0TnVtYmVyT2ZRdWVzdGlvbnMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gcXVlc3Rpb25zLmxlbmd0aDtcclxuICAgIH07XHJcbn07XHJcblxyXG4vLyAtLS0tLS0tLS0tIFFVRVNUSU9OIC0tLS0tLS0tLS1cclxudmFyIFF1ZXN0aW9uID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgLy8gVGV4dCBvZiB0aGUgcXVlc3Rpb25cclxuICAgIHZhciB0ZXh0ID0gbnVsbDtcclxuXHJcbiAgICAvLyBJbmZvIG9iamVjdCBmb3IgdGhlIHF1ZXN0aW9uXHJcbiAgICB2YXIgaW5mbyA9IG51bGw7XHJcblxyXG4gICAgLy8gQW5zd2VyIG9mIHRoZSBxdWVzdGlvblxyXG4gICAgdmFyIGFuc3dlciA9IG51bGw7XHJcblxyXG4gICAgLy8gSGludHMgb2YgdGhlIHF1ZXN0aW9uXHJcbiAgICB2YXIgaGludHMgPSBudWxsO1xyXG4gICAgdmFyIGhpbnRzVXNlZCA9IDA7XHJcblxyXG4gICAgLy8gTGFtYmRhIGZ1bmN0aW9uIHRvIGRldGVybWluZSB0aGUgYW5zd2VyIHN0YXR1cyBvZiB0aGUgcXVlc3Rpb25cclxuICAgIHZhciBjaGVja0Fuc3dlciA9IG51bGw7XHJcblxyXG4gICAgLy8gUG9pbnRzIGF3YXJkZWQgZm9yIHRoZSBxdWVzdGlvblxyXG4gICAgdmFyIHBvaW50cyA9IG51bGw7XHJcblxyXG4gICAgLy8gRmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgcXVlc3Rpb24gaGFzIGFscmVhZHkgYmVlbiBhbnN3ZXJlZFxyXG4gICAgdmFyIGFuc3dlcmVkID0gZmFsc2U7XHJcblxyXG4gICAgdmFyIGluaXQgPSBmdW5jdGlvbihvcHRzKSB7XHJcbiAgICAgICAgdGV4dCA9IG9wdHMudGV4dDtcclxuICAgICAgICBpbmZvID0gb3B0cy5pbmZvIHx8IHt9O1xyXG4gICAgICAgIGFuc3dlciA9IG9wdHMuYW5zd2VyO1xyXG4gICAgICAgIGNoZWNrQW5zd2VyID0gb3B0cy5jaGVja0Fuc3dlciB8fCBudWxsO1xyXG5cclxuICAgICAgICBoaW50cyA9IG9wdHMuaGludHMgfHwge1xyXG4gICAgICAgICAgICAgICAgYWxsb3dlZDogZmFsc2UsICAgICAvLyBpcyBhIGhpbnQgYWxsb3dlZD9cclxuICAgICAgICAgICAgICAgIG1heGltdW06IDAsICAgICAgICAgLy8gbWF4aW11bSBudW1iZXIgb2YgaGludHMgZm9yIHRoaXMgcXVlc3Rpb24gKGlycmVsZXZhbnQgaWYgYWxsb3dlZCBpcyBzZXQgdG8gZmFsc2UpXHJcbiAgICAgICAgICAgICAgICBjb3N0OiAwLCAgICAgICAgICAgIC8vIG51bWJlciBvZiBwb2ludHMgc3VidHJhY3RlZCBwZXIgdXNlZCBoaW50IChpcnJlbGV2YW50IGlmIGFsbG93ZWQgaXMgc2V0IHRvIGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgZ2l2ZTogbnVsbCAgICAgICAgICAvLyBsYW1iZGEgZnVuY3Rpb24gdG8gZ2l2ZSBhIGhpbnQgZm9yIGEgcXVlc3Rpb25cclxuICAgICAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgaWYgKG9wdGlvbnMpIHtcclxuICAgICAgICBpbml0KG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY29uZmlnID0gZnVuY3Rpb24ob3B0cykge1xyXG4gICAgICAgIGluaXQob3B0cyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgcXVlc3Rpb24gdGV4dC5cclxuICAgICAqL1xyXG4gICAgdGhpcy5xdWVzdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIHF1ZXN0aW9uIGluZm8gb2JqZWN0LlxyXG4gICAgICogQWN0cyBhcyBnZXR0ZXIgKHdpdGggb25seSBvbmUgYXJndW1lbnQpIGFuZCBzZXR0ZXIgKHdpdGggdHdvIGFyZ3VtZW50cylcclxuICAgICAqL1xyXG4gICAgdGhpcy5pbmZvID0gZnVuY3Rpb24ocHJvcCwgdmFsdWUpIHtcclxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAvLyBzZXR0ZXJcclxuICAgICAgICAgICAgaW5mb1twcm9wXSA9IHZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGdldHRlclxyXG4gICAgICAgICAgICByZXR1cm4gaW5mb1twcm9wXTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgZW50aXJlIGluZm8gb2JqZWN0LlxyXG4gICAgICovXHJcbiAgICB0aGlzLmdldEluZm8gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gaW5mbztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBjb3JyZWN0IGFuc3dlciB0byB0aGUgcXVlc3Rpb24gYWZ0ZXIgdGhlIHF1ZXN0aW9uIGhhcyBiZWVuIGFuc3dlcmVkLlxyXG4gICAgICogSWYgdGhlIHF1ZXN0aW9uIGhhcyBub3QgYmVlbiBhbnN3ZXJlZCB5ZXQsIGl0IHJldHVybnMgbnVsbC5cclxuICAgICAqL1xyXG4gICAgdGhpcy5zb2x1dGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmIChhbnN3ZXJlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYW5zd2VyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIGhpbnQgZm9yIHRoZSBxdWVzdGlvbi5cclxuICAgICAqIElmIG5vIGhpbnRzIGFyZSBhbGxvd2VkLCBvciB0aGUgbWF4aW11bSBudW1iZXIgb2YgaGludHMgaGF2ZSBiZWVuIHVzZWQsIG51bGwgaXMgcmV0dXJuZWQuXHJcbiAgICAgKi9cclxuICAgIHRoaXMuaGludCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghaGludHMuYWxsb3dlZCB8fCBoaW50c1VzZWQgPj0gaGludHMubWF4aW11bSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChoaW50cy5hbGxvd2VkICYmICFoaW50cy5naXZlKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkhpbnRzIGFsbG93ZWQgYnV0IG5vIGdpdmUgbWV0aG9kIHBhc3NlZFwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGhpbnRzVXNlZCsrO1xyXG5cclxuICAgICAgICByZXR1cm4gaGludHMuZ2l2ZShoaW50c1VzZWQsIGFuc3dlcik7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3VibWl0cyBhbiBhbnN3ZXIgdG8gdGhlIHF1ZXN0aW9uLlxyXG4gICAgICogSWYgdGhlIHF1ZXN0aW9uIGhhcyBhbHJlYWR5IGJlZW4gYW5zd2VyZWQgb3Igbm8gY2hlY2tBbnN3ZXIgbGFtYmRhIGhhcyBiZWVuIHNldCwgdGhpcyBtZXRob2QgZG9lcyBub3RoaW5nLlxyXG4gICAgICovXHJcbiAgICB0aGlzLmFuc3dlciA9IGZ1bmN0aW9uKHN1Ym1pdHRlZEFuc3dlcikge1xyXG4gICAgICAgIGlmIChhbnN3ZXJlZCB8fCFjaGVja0Fuc3dlcikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhbnN3ZXJlZCA9IHRydWU7XHJcblxyXG4gICAgICAgIC8vIGNoZWNrQW5zd2VyIG1ldGhvZCBzaG91bGQgcmV0dXJuIHRoZSBzdGF0dXMgcmVzdWx0c1xyXG4gICAgICAgIHBvaW50cyA9IGNoZWNrQW5zd2VyKGFuc3dlciwgc3VibWl0dGVkQW5zd2VyLCBoaW50c1VzZWQsIGhpbnRzLmNvc3QsIGluZm8pO1xyXG5cclxuICAgICAgICAvLyBlbnN1cmUgdGhhdCBubyBuZWdhdGl2ZSBwb2ludHMgYXJlIGF3YXJkZWRcclxuICAgICAgICBwb2ludHMgPSBNYXRoLm1heCgwLCBwb2ludHMpO1xyXG5cclxuICAgICAgICByZXR1cm4gcG9pbnRzO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnBvaW50cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghYW5zd2VyZWQgfHwgcG9pbnRzID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwb2ludHM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBzdGF0ZSBvZiB0aGUgcXVlc3Rpb24uXHJcbiAgICAgKi9cclxuICAgIHRoaXMuYW5zd2VyZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gYW5zd2VyZWQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0cnVlIGlmIGhpbnRzIGFyZSBhbGxvd2VkIGZvciB0aGlzIHF1ZXN0aW9uLCBmYWxzZSBpZiBub3QuXHJcbiAgICAgKiBJZiBoaW50cyBoYXZlIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldCwgbnVsbCBpcyByZXR1cm5lZC5cclxuICAgICAqL1xyXG4gICAgdGhpcy5oaW50c0FsbG93ZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoaGludHMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGhpbnRzLmFsbG93ZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgcmVtYWluaW5nIGhpbnRzLlxyXG4gICAgICogSWYgbm8gaGludHMgYXJlIGFsbG93ZWQgZm9yIHRoaXMgcXVlc3Rpb24sIG51bGwgaXMgcmV0dXJuZWQuXHJcbiAgICAgKi9cclxuICAgIHRoaXMuaGludHNSZW1haW5pbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgYWxsb3dlZCA9IHRoaXMuaGludHNBbGxvd2VkKCk7XHJcblxyXG4gICAgICAgIGlmIChhbGxvd2VkID09PSBudWxsIHx8IGFsbG93ZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGhpbnRzLm1heGltdW0gLSBoaW50c1VzZWQ7XHJcbiAgICB9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSByYW5kb20gaW50ZWdlciBiZXR3ZWVuIG1pbiAoaW5jbHVzaXZlKSBhbmQgbWF4IChpbmNsdXNpdmUpXHJcbiAqIFVzaW5nIE1hdGgucm91bmQoKSB3aWxsIGdpdmUgeW91IGEgbm9uLXVuaWZvcm0gZGlzdHJpYnV0aW9uIVxyXG4gKi9cclxudmFyIGdldFJhbmRvbUludCA9IGZ1bmN0aW9uKG1pbiwgbWF4KSB7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSB0ZXh0IGJldHdlZW4gdHdvIGRlbGltaXRpbmcgdGV4dCBvY2N1cnJlbmNlc1xyXG4gKi9cclxudmFyIGdldFN0cmluZ0JldHdlZW4gPSBmdW5jdGlvbih0ZXh0LCBmaXJzdFN0cmluZywgc2Vjb25kU3RyaW5nKSB7XHJcbiAgICB2YXIgZmlyc3RQb3MgPSB0ZXh0LmluZGV4T2YoZmlyc3RTdHJpbmcpO1xyXG4gICAgdmFyIHNlY29uZFBvcyA9IHRleHQuaW5kZXhPZihzZWNvbmRTdHJpbmcpO1xyXG5cclxuICAgIGlmIChmaXJzdFBvcyA+PSAwICYmIHNlY29uZFBvcyA+PSAwICYmIHNlY29uZFBvcyA+IGZpcnN0UG9zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRleHQuc3Vic3RyKGZpcnN0UG9zICsgMSwgc2Vjb25kUG9zIC0gZmlyc3RQb3MgLSAxKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuXHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xyXG4gICAgbW9kdWxlLmV4cG9ydHMuUXVlc3Rpb24gPSBRdWVzdGlvbjtcclxuICAgIG1vZHVsZS5leHBvcnRzLlF1aXogPSBRdWl6O1xyXG59XG5hbmd1bGFyLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmNvbmZpZyhbXCIkbG9jYXRpb25Qcm92aWRlclwiLCBcIiRzdGF0ZVByb3ZpZGVyXCIsIFwiJHVybFJvdXRlclByb3ZpZGVyXCIsIGZ1bmN0aW9uKCRsb2NhdGlvblByb3ZpZGVyLCAkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XHJcbiAgICAgICAgLy8gZW5hYmxlIEhUTUw1IHB1c2hzdGF0ZVxyXG4gICAgICAgICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcclxuXHJcbiAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnL2hvbWUnKTtcclxuXHJcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcclxuICAgICAgICAgICAgLnN0YXRlKCdob21lJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2hvbWUnLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYnVpbGQvdmlld3MvcGFydGlhbHMvaG9tZS5wYXJ0aWFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBudWxsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgncXVpeicsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9xdWl6JyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2J1aWxkL3ZpZXdzL3BhcnRpYWxzL3F1aXoucGFydGlhbC5odG1sJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvdW50cmllcycsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9jb3VudHJpZXMnLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYnVpbGQvdmlld3MvcGFydGlhbHMvY291bnRyaWVzLnBhcnRpYWwuaHRtbCdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdjb3VudHJpZXMuZGV0YWlsJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnLzphbHBoYTNDb2RlJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2J1aWxkL3ZpZXdzL3BhcnRpYWxzL2NvdW50cmllcy1kZXRhaWwucGFydGlhbC5odG1sJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2xvZ2luJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2xvZ2luJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2J1aWxkL3ZpZXdzL3BhcnRpYWxzL2xvZ2luLnBhcnRpYWwuaHRtbCdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdsb2dvdXQnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvbG9nb3V0JyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdMb2dvdXRDdHJsJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ3JlZ2lzdGVyJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL3JlZ2lzdGVyJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2J1aWxkL3ZpZXdzL3BhcnRpYWxzL3JlZ2lzdGVyLnBhcnRpYWwuaHRtbCdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdzZXR0aW5ncycsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9zZXR0aW5ncycsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9idWlsZC92aWV3cy9wYXJ0aWFscy9zZXR0aW5ncy5wYXJ0aWFsLmh0bWwnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnYWJvdXQnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvYWJvdXQnLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYnVpbGQvdmlld3MvcGFydGlhbHMvYWJvdXQucGFydGlhbC5odG1sJ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5jb250cm9sbGVyKCdDb3VudHJpZXNDdHJsJywgW1wiJHNjb3BlXCIsIFwiQ291bnRyeVNydlwiLCBmdW5jdGlvbigkc2NvcGUsIENvdW50cnlTcnYpIHtcclxuICAgICAgICB2YXIgY291bnRyaWVzQnlMZXR0ZXIgPSBudWxsO1xyXG4gICAgICAgIHZhciBjb3VudHJ5S2V5cyA9IG51bGw7XHJcblxyXG4gICAgICAgIHZhciBpbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGNvdW50cmllc0J5TGV0dGVyID0gQ291bnRyeVNydi5nZXRDb3VudHJpZXNCeUxldHRlcigpO1xyXG4gICAgICAgICAgICBjb3VudHJ5S2V5cyA9IE9iamVjdC5rZXlzKGNvdW50cmllc0J5TGV0dGVyKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghJHNjb3BlLiQkcGhhc2UpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvdW50cnlLZXlzID0gY291bnRyeUtleXM7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvdW50cmllc0J5TGV0dGVyID0gY291bnRyaWVzQnlMZXR0ZXI7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jb3VudHJ5S2V5cyA9IGNvdW50cnlLZXlzO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvdW50cmllc0J5TGV0dGVyID0gY291bnRyaWVzQnlMZXR0ZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAoQ291bnRyeVNydi5hcmVDb3VudHJpZXNMb2FkZWQoKSkge1xyXG4gICAgICAgICAgICBpbml0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkc2NvcGUuJG9uKCdjb3VudHJpZXMubG9hZGVkJywgZnVuY3Rpb24oKSAge1xyXG4gICAgICAgICAgICBpbml0KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XSk7XG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuY29udHJvbGxlcignQ291bnRyeURldGFpbEN0cmwnLCBbXCIkc2NvcGVcIiwgXCJDb3VudHJ5U3J2XCIsIFwiJHN0YXRlUGFyYW1zXCIsIGZ1bmN0aW9uKCRzY29wZSwgQ291bnRyeVNydiwgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICAgICAgdmFyIGFscGhhM0NvZGUgPSAkc3RhdGVQYXJhbXMuYWxwaGEzQ29kZTtcclxuXHJcbiAgICAgICAgaWYgKENvdW50cnlTcnYuYXJlQ291bnRyaWVzTG9hZGVkKCkpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmNvdW50cnkgPSBDb3VudHJ5U3J2LmdldENvdW50cnlCeUFscGhhMyhhbHBoYTNDb2RlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRzY29wZS4kb24oJ2NvdW50cmllcy5sb2FkZWQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jb3VudHJ5ID0gQ291bnRyeVNydi5nZXRDb3VudHJ5QnlBbHBoYTMoYWxwaGEzQ29kZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHZhciBnZXRDb3VudHJ5RnJvbVNlcnZpY2UgPSBmdW5jdGlvbihhbHBoYTMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIENvdW50cnlTcnYuZ2V0Q291bnRyeUJ5QWxwaGEzKGFscGhhMyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLmdldENvdW50cnlGcm9tU2VydmljZSA9IGdldENvdW50cnlGcm9tU2VydmljZTtcclxuICAgIH1dKTtcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5jb250cm9sbGVyKCdEcm9wZG93bkN0cmwnLCBbXCIkc2NvcGVcIiwgZnVuY3Rpb24oJHNjb3BlKSB7XHJcbiAgICAgICAgdmFyIHZpc2libGUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgJHNjb3BlLnRvZ2dsZURyb3Bkb3duID0gdG9nZ2xlRHJvcGRvd247XHJcbiAgICAgICAgJHNjb3BlLnNob3dEcm9wZG93biA9IHNob3dEcm9wZG93bjtcclxuICAgICAgICAkc2NvcGUuaGlkZURyb3Bkb3duID0gaGlkZURyb3Bkb3duO1xyXG4gICAgICAgICRzY29wZS5pc0Ryb3Bkb3duVmlzaWJsZSA9IGlzRHJvcGRvd25WaXNpYmxlO1xyXG5cclxuICAgICAgICAkc2NvcGUuaGFuZGxlQ2xpY2tPdXRzaWRlID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDTElDS0VEIE9VVFNJREVcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB0b2dnbGVEcm9wZG93bigpIHtcclxuICAgICAgICAgICAgdmlzaWJsZSA9ICF2aXNpYmxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2hvd0Ryb3Bkb3duKCkge1xyXG4gICAgICAgICAgICB2aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGhpZGVEcm9wZG93bigpIHtcclxuICAgICAgICAgICAgdmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaXNEcm9wZG93blZpc2libGUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2aXNpYmxlO1xyXG4gICAgICAgIH1cclxuICAgIH1dKTtcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5jb250cm9sbGVyKCdIb21lQ3RybCcsIFtcIiRzY29wZVwiLCBcIkxvZ1NydlwiLCBcIiRzdGF0ZVBhcmFtc1wiLCBmdW5jdGlvbigkc2NvcGUsIExvZ1NydiwgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSBudWxsO1xyXG5cclxuICAgICAgICAvLyBjaGVjayBzdGF0ZSBwYXJhbXNcclxuICAgICAgICBpZiAoJHN0YXRlUGFyYW1zLmFjdGlvbikge1xyXG4gICAgICAgICAgICB2YXIgYWN0aW9uID0gJHN0YXRlUGFyYW1zLmFjdGlvbjtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdyZWdpc3Rlci5zdWNjZXNzZnVsJzpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVzc2FnZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnR3JhdHVsYXRpb24hIERpZSBBbm1lbGR1bmcgd2FyIGVyZm9sZ3JlaWNoLiBIZXJ6bGljaCB3aWxsa29tbWVuIGJlaSBNYWdlbGxhbi4nXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVzc2FnZSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XSk7XG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuY29udHJvbGxlcignTG9naW5DdHJsJywgW1wiJHNjb3BlXCIsIFwiVXNlclNydlwiLCBcIkZvY3VzU3J2XCIsIGZ1bmN0aW9uKCRzY29wZSwgVXNlclNydiwgRm9jdXNTcnYpIHtcclxuICAgICAgICAkc2NvcGUubWVzc2FnZSA9IG51bGw7XHJcblxyXG4gICAgICAgICRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xyXG4gICAgICAgICAgICBVc2VyU3J2LmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBpbmZvcm0gYXBwbGljYXRpb24gY29udHJvbCBhYm91dCBsb2dpbiBldmVudFxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnYXBwLmxvZ2luJywgcmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VUZXh0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyLnN0YXR1cyA9PT0gNDAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VUZXh0ID0gJ0ZhbHNjaGVyIEJlbnV0emVybmFtZSBvZGVyIFBhc3N3b3J0JztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlVGV4dCA9ICdCZWltIEVpbmxvZ2dlbiBzY2hlaW50IGV0d2FzIHNjaGllZiBnZWdhbmdlbiB6dSBzZWluJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5tZXNzYWdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBtZXNzYWdlVGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBmb2N1cyB1c2VybmFtZSBmaWVsZFxyXG4gICAgICAgIEZvY3VzU3J2KCcjdXNlcm5hbWUnKTtcclxuICAgIH1dKTtcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5jb250cm9sbGVyKCdMb2dvdXRDdHJsJywgW1wiJHNjb3BlXCIsIFwiVXNlclNydlwiLCBmdW5jdGlvbigkc2NvcGUsIFVzZXJTcnYpIHtcclxuICAgICAgICBVc2VyU3J2LmxvZ291dCgpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgLy8gaW5mb3JtIGFwcGxpY2F0aW9uIGNvbnRyb2wgYWJvdXQgbG9nb3V0IGV2ZW50XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2FwcC5sb2dvdXQnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuY29udHJvbGxlcignUXVpekRpcmVjdGl2ZUNvbnRyb2xsZXInLCBbXCIkc2NvcGVcIiwgXCJRdWl6U3J2XCIsIFwiTG9nU3J2XCIsIFwiRm9jdXNTcnZcIiwgXCJuZ1Byb2dyZXNzRmFjdG9yeVwiLCBmdW5jdGlvbigkc2NvcGUsIFF1aXpTcnYsIExvZ1NydiwgRm9jdXNTcnYsIG5nUHJvZ3Jlc3NGYWN0b3J5KSB7XHJcbiAgICAgICAgLy8gUHJvZ3Jlc3MgYmFyIGluaXRpYWxpemF0aW9uXHJcbiAgICAgICAgJHNjb3BlLnByb2dyZXNzYmFyID0gbmdQcm9ncmVzc0ZhY3RvcnkuY3JlYXRlSW5zdGFuY2UoKTtcclxuICAgICAgICAkc2NvcGUucHJvZ3Jlc3NiYXIuc2V0UGFyZW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxdWl6LXByb2dyZXNzJykpO1xyXG4gICAgICAgICRzY29wZS5wcm9ncmVzc2Jhci5zZXRBYnNvbHV0ZSgpO1xyXG4gICAgICAgICRzY29wZS5wcm9ncmVzc2Jhci5zZXRDb2xvcihcIiMzMzZlN2JcIik7XHJcblxyXG4gICAgICAgICRzY29wZS5pc1Jlc3VsdHNQYWdlVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5hY2hpZXZlbWVudHMgPSBbXTtcclxuXHJcbiAgICAgICAgJHNjb3BlLmFuc3dlcklucHV0ID0ge307XHJcbiAgICAgICAgJHNjb3BlLmhpbnQgPSBudWxsO1xyXG5cclxuICAgICAgICAvLyBhZGQgb3B0aW9ucyBmb3IgbXVsdGlwbGllciBzZWxlY3Rpb25cclxuICAgICAgICAkc2NvcGUubXVsdGlwbGllck9wdGlvbnMgPSBbXHJcbiAgICAgICAgICAgIHsgdmFsdWU6IDEsIGxhYmVsOiAnJyB9LFxyXG4gICAgICAgICAgICB7IHZhbHVlOiAxMDAwLCBsYWJlbDogJ1RzZC4nfSxcclxuICAgICAgICAgICAgeyB2YWx1ZTogMTAwMDAwMCwgbGFiZWw6ICdNaW8uJ31cclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICB2YXIgcXVlc3Rpb24gPSBudWxsO1xyXG5cclxuICAgICAgICB2YXIgdXBkYXRlVWkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gZ2V0IGN1cnJlbnQgcXVlc3Rpb24gZnJvbSBxdWl6IHNlcnZpY2VcclxuICAgICAgICAgICAgcXVlc3Rpb24gPSBRdWl6U3J2LmdldEN1cnJlbnRRdWVzdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgLy8gZGVsZXRlIHByZXZpb3VzIGhpbnRzXHJcbiAgICAgICAgICAgICRzY29wZS5oaW50ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmIChxdWVzdGlvbiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgLy8gbXVsdGlwbGllcnMgZm9yIHF1ZXN0aW9ucyBjb250YWluaW5nIG51bWJlcnNcclxuICAgICAgICAgICAgICAgIGlmIChxdWVzdGlvbi5nZXRJbmZvKCkuaW5wdXQgJiYgcXVlc3Rpb24uZ2V0SW5mbygpLmlucHV0LmluZGV4T2YoJ251bWJlcicpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChxdWVzdGlvbi5nZXRJbmZvKCkuaW5wdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbnVtYmVyLmhpZ2gnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFuc3dlcklucHV0Lm11bHRpcGxpZXIgPSB7IHZhbHVlOiAxMDAwMDAwLCBsYWJlbDogJ01pby4nfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbnVtYmVyLm1lZGl1bSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYW5zd2VySW5wdXQubXVsdGlwbGllciA9IHsgdmFsdWU6IDEwMDAsIGxhYmVsOiAnVHNkLid9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFuc3dlcklucHV0Lm11bHRpcGxpZXIgPSB7IHZhbHVlOiAxLCBsYWJlbDogJycgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFuc3dlcklucHV0Lm11bHRpcGxpZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBwcm9ncmVzcyBiYXJcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVByb2dyZXNzQmFyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gZm9jdXMgYW5zd2VyIGlucHV0XHJcbiAgICAgICAgICAgICAgICBGb2N1c1NydignLmFuc3dlcklucHV0Jyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBxdWl6IGhhcyBlbmRlZCwgc2V0IHByb2dyZXNzIGJhciB0byAwXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucHJvZ3Jlc3NiYXIuc2V0KDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldFF1ZXN0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBxdWVzdGlvbjtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0Q3VycmVudFF1ZXN0aW9uTnVtYmVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBRdWl6U3J2LmdldEN1cnJlbnRRdWVzdGlvbk51bWJlcigpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXROdW1iZXJPZlF1aXpRdWVzdGlvbnMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFF1aXpTcnYuZ2V0TnVtYmVyT2ZRdWl6UXVlc3Rpb25zKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHJlbmRlclF1ZXN0aW9uVGV4dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyKGdldFF1ZXN0aW9uKCkucXVlc3Rpb24oKSwgJ3F1ZXN0aW9uLWhpZ2hsaWdodCcpICsgJz8nO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRRdWVzdGlvbk1lZGlhID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICghcXVlc3Rpb24gfHwgIXF1ZXN0aW9uLmdldEluZm8oKS5tZWRpYSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHF1ZXN0aW9uLmdldEluZm8oKS5tZWRpYTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgc2hvd1Jlc3VsdHNQYWdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5pc1Jlc3VsdHNQYWdlVmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHN1Ym1pdEFuc3dlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLmFuc3dlcklucHV0LmFuc3dlcikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFuc3dlciA9ICRzY29wZS5hbnN3ZXJJbnB1dC5hbnN3ZXI7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gaWYgaXQgaXMgYSBudW1iZXIgaW5wdXQsIHJlcGxhY2UgJywnIHdpdGggJy4nXHJcbiAgICAgICAgICAgICAgICBpZiAocXVlc3Rpb24uZ2V0SW5mbygpLmlucHV0ICYmIHF1ZXN0aW9uLmdldEluZm8oKS5pbnB1dC5pbmRleE9mKCdudW1iZXInKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuc3dlciA9IGFuc3dlci5yZXBsYWNlKCcsJywgJy4nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBpZiBhIG11bHRpcGxpZXIgaXMgYXZhaWxhYmxlLCBjYWxjdWxhdGUgYW5zd2VyXHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFuc3dlcklucHV0Lm11bHRpcGxpZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbnN3ZXIgKj0gJHNjb3BlLmFuc3dlcklucHV0Lm11bHRpcGxpZXIudmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgTG9nU3J2LmluZm8oJ3N1Ym1pdHRpbmcgYW5zd2VyJywgYW5zd2VyKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hbnN3ZXJJbnB1dC5wb2ludHMgPSBxdWVzdGlvbi5hbnN3ZXIoYW5zd2VyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBzZXQgZm9jdXMgdG8gbmV4dCBxdWVzdGlvbiBidXR0b25cclxuICAgICAgICAgICAgICAgIEZvY3VzU3J2KCcjYnRuTmV4dFF1ZXN0aW9uJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgcXVlc3Rpb25BbnN3ZXJlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoIVF1aXpTcnYuaXNRdWl6UnVubmluZygpIHx8IHF1ZXN0aW9uID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBxdWVzdGlvbi5hbnN3ZXJlZCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBuZXh0UXVlc3Rpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgUXVpelNydi5uZXh0UXVlc3Rpb24oKTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5hbnN3ZXJJbnB1dC5hbnN3ZXIgPSBcIlwiO1xyXG5cclxuICAgICAgICAgICAgdXBkYXRlVWkoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgcmVxdWVzdEhpbnQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmhpbnQgPSBxdWVzdGlvbi5oaW50KCk7XHJcblxyXG4gICAgICAgICAgICBGb2N1c1NydignLmFuc3dlcklucHV0Jyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHJlbmRlciA9IGZ1bmN0aW9uKHRleHQsIGNsYXNzTmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGV4dFxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoXCJbXCIsIFwiPHNwYW4gY2xhc3M9J1wiICsgY2xhc3NOYW1lICsgXCInPlwiKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoXCJdXCIsIFwiPC9zcGFuPlwiKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgaGFuZGxlS2V5UHJlc3MgPSBmdW5jdGlvbihrZXlFdmVudCkge1xyXG4gICAgICAgICAgICBpZiAoa2V5RXZlbnQud2hpY2ggPT0gMTMpIHtcclxuICAgICAgICAgICAgICAgIHN1Ym1pdEFuc3dlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHVwZGF0ZVByb2dyZXNzQmFyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBwcm9ncmVzc1BlcmNlbnQgPSBnZXRDdXJyZW50UXVlc3Rpb25OdW1iZXIoKSAvIGdldE51bWJlck9mUXVpelF1ZXN0aW9ucygpICogMTAwO1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLnByb2dyZXNzYmFyLnNldChwcm9ncmVzc1BlcmNlbnQpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciB3YXNMYXN0UXVlc3Rpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldEN1cnJlbnRRdWVzdGlvbk51bWJlcigpID49IGdldE51bWJlck9mUXVpelF1ZXN0aW9ucygpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBwYXJzZUV2ZW50cyA9IGZ1bmN0aW9uKGV2ZW50cykge1xyXG4gICAgICAgICAgICB2YXIgYWNoaWV2ZW1lbnRzID0gW107XHJcblxyXG4gICAgICAgICAgICBpZiAoZXZlbnRzLmluZGV4T2YoJ292ZXJhbGxfYmVzdCcpID49IDApIHtcclxuICAgICAgICAgICAgICAgIGFjaGlldmVtZW50cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnRHUgaGFzdCBlaW5lbiBuZXVlbiBhYnNvbHV0ZW4gUmVrb3JkIGdlc2NoYWZmdCEnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGV2ZW50cy5pbmRleE9mKCdvdmVyYWxsX2Jlc3RfZXF1YWxpc2VkJykgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgYWNoaWV2ZW1lbnRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICdEdSBoYXN0IGRlbiBha3R1ZWxsZW4gYWJzb2x1dGVuIFJla29yZCBlaW5nZXN0ZWxsdCEnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGV2ZW50cy5pbmRleE9mKCdwZXJzb25hbF9iZXN0JykgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgYWNoaWV2ZW1lbnRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICdEdSBoYXN0IGVpbmVuIG5ldWVuIHBlcnPDtm5saWNoZW4gUmVrb3JkIGdlc2NoYWZmdCEnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGV2ZW50cy5pbmRleE9mKCdwZXJzb25hbF9iZXN0X2VxdWFsaXNlZCcpID49IDApIHtcclxuICAgICAgICAgICAgICAgIGFjaGlldmVtZW50cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnRHUgaGFzdCBnbGVpY2ggdmllbGUgUHVua3RlIGdlc2NoYWZmdCB3aWUgYmVpIGRlaW5lbSBwZXJzw7ZubGljaGVuIFJla29yZCEnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGV2ZW50cy5pbmRleE9mKCduZXdfZGFpbHlfYmVzdCcpID49IDApIHtcclxuICAgICAgICAgICAgICAgIGFjaGlldmVtZW50cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnRHUgaGFzdCBlaW5lbiBuZXVlbiBwZXJzw7ZubGljaGVuIFRhZ2VzcmVrb3JkIGdlc2NoYWZmdCEnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmFjaGlldmVtZW50cyA9IGFjaGlldmVtZW50cztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY29udGludWVGaW5pc2hlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzaG93UmVzdWx0c1BhZ2UoKTtcclxuXHJcbiAgICAgICAgICAgIG5leHRRdWVzdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgLy8gY29uY2x1ZGUgdGhlIHF1aXogYW5kIHdyaXRlIHJlc3VsdCB0byBkYXRhYmFzZVxyXG4gICAgICAgICAgICBRdWl6U3J2LmNvbmNsdWRlKClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJzZUV2ZW50cyhkYXRhLmV2ZW50cyB8fCBbXSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZ1Nydi5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gaW5pdGlhbGx5IHVwZGF0ZSBVSVxyXG4gICAgICAgIHVwZGF0ZVVpKCk7XHJcblxyXG4gICAgICAgICRzY29wZS5nZXRRdWVzdGlvbiA9IGdldFF1ZXN0aW9uO1xyXG4gICAgICAgICRzY29wZS5nZXRDdXJyZW50UXVlc3Rpb25OdW1iZXIgPSBnZXRDdXJyZW50UXVlc3Rpb25OdW1iZXI7XHJcbiAgICAgICAgJHNjb3BlLnJlbmRlclF1ZXN0aW9uVGV4dCA9IHJlbmRlclF1ZXN0aW9uVGV4dDtcclxuICAgICAgICAkc2NvcGUuc3VibWl0QW5zd2VyID0gc3VibWl0QW5zd2VyO1xyXG4gICAgICAgICRzY29wZS5xdWVzdGlvbkFuc3dlcmVkID0gcXVlc3Rpb25BbnN3ZXJlZDtcclxuICAgICAgICAkc2NvcGUubmV4dFF1ZXN0aW9uID0gbmV4dFF1ZXN0aW9uO1xyXG4gICAgICAgICRzY29wZS5oYW5kbGVLZXlQcmVzcyA9IGhhbmRsZUtleVByZXNzO1xyXG4gICAgICAgICRzY29wZS5nZXRRdWVzdGlvbk1lZGlhID0gZ2V0UXVlc3Rpb25NZWRpYTtcclxuICAgICAgICAkc2NvcGUucmVxdWVzdEhpbnQgPSByZXF1ZXN0SGludDtcclxuICAgICAgICAkc2NvcGUud2FzTGFzdFF1ZXN0aW9uID0gd2FzTGFzdFF1ZXN0aW9uO1xyXG4gICAgICAgICRzY29wZS5jb250aW51ZUZpbmlzaGVkID0gY29udGludWVGaW5pc2hlZDtcclxuICAgIH1dKTtcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5jb250cm9sbGVyKCdRdWl6Q3RybCcsIFtcIiRzY29wZVwiLCBcIlF1aXpTcnZcIiwgXCJMb2dTcnZcIiwgZnVuY3Rpb24oJHNjb3BlLCBRdWl6U3J2LCBMb2dTcnYpIHtcclxuXHJcbiAgICAgICAgdmFyIHN0YXJ0UXVpeiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBRdWl6U3J2LmluaXQoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmluZm8oXCJRdWl6IHN0YXJ0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZ1Nydi5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGlzUXVpelJ1bm5pbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFF1aXpTcnYuaXNRdWl6UnVubmluZygpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBoYXNRdWl6U3RhcnRlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUXVpelNydi5oYXNRdWl6U3RhcnRlZCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBoYXNRdWl6RW5kZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFF1aXpTcnYuaGFzUXVpekVuZGVkKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldFRvdGFsUG9pbnRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBRdWl6U3J2LmdldFRvdGFsUG9pbnRzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkc2NvcGUuc3RhcnRRdWl6ID0gc3RhcnRRdWl6O1xyXG4gICAgICAgICRzY29wZS5pc1F1aXpSdW5uaW5nID0gaXNRdWl6UnVubmluZztcclxuICAgICAgICAkc2NvcGUuaGFzUXVpelN0YXJ0ZWQgPSBoYXNRdWl6U3RhcnRlZDtcclxuICAgICAgICAkc2NvcGUuaGFzUXVpekVuZGVkID0gaGFzUXVpekVuZGVkO1xyXG4gICAgICAgICRzY29wZS5nZXRUb3RhbFBvaW50cyA9IGdldFRvdGFsUG9pbnRzO1xyXG4gICAgfV0pO1xuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmNvbnRyb2xsZXIoJ1JlZ2lzdGVyQ3RybCcsIFtcIiRzY29wZVwiLCBcIkxvZ1NydlwiLCBcIkZvY3VzU3J2XCIsIFwiVXNlclNydlwiLCBcIiRzdGF0ZVwiLCBcIiR3aW5kb3dcIiwgZnVuY3Rpb24oJHNjb3BlLCBMb2dTcnYsIEZvY3VzU3J2LCBVc2VyU3J2LCAkc3RhdGUsICR3aW5kb3cpIHtcclxuICAgICAgICAvLyBuZXcgdXNlciBvYmplY3RcclxuICAgICAgICAkc2NvcGUubmV3VXNlciA9IHt9O1xyXG5cclxuICAgICAgICAvLyBtZXNzYWdlIG9iamVjdFxyXG4gICAgICAgICRzY29wZS5tZXNzYWdlID0gbnVsbDtcclxuXHJcbiAgICAgICAgdmFyIHJlZ2lzdGVyID0gZnVuY3Rpb24gKGlzVmFsaWQpIHtcclxuICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh2YWxpZGF0ZUJlZm9yZVN1Ym1pdCgpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBwZXJmb3JtIGFwaSBjYWxsXHJcbiAgICAgICAgICAgICAgICBVc2VyU3J2LnJlZ2lzdGVyKCRzY29wZS5uZXdVc2VyKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5mb3JtIGFwcCBjb250cm9sbGVyIGFib3V0IGxvZ2luXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2FwcC5sb2dpbicsIHJlc3BvbnNlLmRhdGEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlZGlyZWN0IHRvIGhvbWUgcGFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdob21lJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3JlZ2lzdGVyLnN1Y2Nlc3NmdWwnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tZXNzYWdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0JlaSBkZXIgQW5tZWxkdW5nIHNjaGVpbnQgZXR3YXMgc2NoaWVmIGdlZ2FuZ2VuIHp1IHNlaW4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmVycm9yKGVycik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZVRleHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGVyci5tZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdVc2VybmFtZSBhbHJlYWR5IGV4aXN0cyc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVRleHQgPSAnRGVyIEJlbnV0emVybmFtZSBleGlzdGllcnQgYmVyZWl0cyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlVGV4dCA9ICdCZWkgZGVyIEFubWVsZHVuZyBzY2hlaW50IGV0d2FzIHNjaGllZiBnZWdhbmdlbiB6dSBzZWluJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUuJCRwaGFzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVzc2FnZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogbWVzc2FnZVRleHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVzc2FnZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG1lc3NhZ2VUZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgdmFsaWRhdGVCZWZvcmVTdWJtaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHR3byBwYXNzd29yZHMgbWF0Y2hcclxuICAgICAgICAgICAgdmFyIHBhc3N3b3JkID0gJHNjb3BlLm5ld1VzZXIucGFzc3dvcmQ7XHJcbiAgICAgICAgICAgIHZhciBwYXNzd29yZDIgPSAkc2NvcGUubmV3VXNlci5wYXNzd29yZDI7XHJcblxyXG4gICAgICAgICAgICBpZiAoISRzY29wZS5uZXdVc2VyLnVzZXJuYW1lIHx8ICEkc2NvcGUubmV3VXNlci5lbWFpbCB8fCAhcGFzc3dvcmQgfHwgIXBhc3N3b3JkMikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnQWxsZSBGZWxkZXIgbcO8c3NlbiBhdXNnZWbDvGxsdCBzZWluJ1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXNzd29yZCA9PT0gXCJcIiB8fCBwYXNzd29yZDIgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5tZXNzYWdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0RpZSBQYXNzd8O2cnRlciBrw7ZubmVuIG5pY2h0IGxlZXIgc2VpbidcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFzc3dvcmQgIT09IHBhc3N3b3JkMikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnRGllIFBhc3N3w7ZydGVyIHN0aW1tZW4gbmljaHQgw7xiZXJlaW4nXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gISRzY29wZS5tZXNzYWdlID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBkZWxlZ2F0ZVN1Ym1pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZWdpc3Rlcih0cnVlKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUuZGVsZWdhdGVTdWJtaXQgPSBkZWxlZ2F0ZVN1Ym1pdDtcclxuXHJcbiAgICAgICAgJHNjb3BlLnJlZ2lzdGVyID0gcmVnaXN0ZXI7XHJcblxyXG4gICAgICAgIC8vIGZvY3VzIHVzZXIgbmFtZSBmaWVsZFxyXG4gICAgICAgIEZvY3VzU3J2KCcjdXNlcm5hbWUnKTtcclxuICAgIH1dKTtcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5jb250cm9sbGVyKCdTZXR0aW5nc0N0cmwnLCBbXCIkc2NvcGVcIiwgXCJBcHBDb25maWdcIiwgXCJGb2N1c1NydlwiLCBcIkxvZ1NydlwiLCBcIlVzZXJTcnZcIiwgZnVuY3Rpb24oJHNjb3BlLCBBcHBDb25maWcsIEZvY3VzU3J2LCBMb2dTcnYsIFVzZXJTcnYpIHtcclxuICAgICAgICB2YXIgaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUubWVzc2FnZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAvLyB1c2VyIGNvbG91cnNcclxuICAgICAgICAgICAgdmFyIGNvbG9ycyA9IEFwcENvbmZpZ1snc2V0dGluZ3MudXNlci5jb2xvcnMnXTtcclxuXHJcbiAgICAgICAgICAgIC8vIHVzZXIgb2JqZWN0XHJcbiAgICAgICAgICAgICRzY29wZS51c2VyT2JqID0ge1xyXG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6ICRzY29wZS51c2VyLnVzZXJuYW1lLFxyXG4gICAgICAgICAgICAgICAgZW1haWw6ICRzY29wZS51c2VyLmVtYWlsLFxyXG4gICAgICAgICAgICAgICAgY29sb3I6ICRzY29wZS51c2VyLmNvbG9yXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUudXNlckNvbG9ycyA9IGNvbG9ycztcclxuXHJcbiAgICAgICAgICAgIHZhciBzZXRDb2xvciA9IGZ1bmN0aW9uKG5ld0NvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudXNlck9iai5jb2xvciA9IG5ld0NvbG9yO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdmFyIHVwZGF0ZVVzZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIFVzZXJTcnYudXBkYXRlQmFzaWMoJHNjb3BlLnVzZXJPYmopLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB1c2VyIG9iamVjdFxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS51c2VyLnVzZXJuYW1lID0gJHNjb3BlLnVzZXJPYmoudXNlcm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVzZXIuZW1haWwgPSAkc2NvcGUudXNlck9iai5lbWFpbDtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXNlci5jb2xvciA9ICRzY29wZS51c2VyT2JqLmNvbG9yO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVzc2FnZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdFaW5zdGVsbHVuZ2VuIHd1cmRlbiBlcmZvbGdyZWljaCBnZXNwZWljaGVydCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZ1Nydi5lcnJvcignVXBkYXRlIHVzZXInLCBlcnIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZVRleHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZXJyLm1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnVXNlcm5hbWUgYWxyZWFkeSBleGlzdHMnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVRleHQgPSAnRGVyIEJlbnV0emVybmFtZSBpc3QgYmVyZWl0cyB2ZXJnZWJlbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlVGV4dCA9ICdEaWUgRWluc3RlbGx1bmdlbiBrb25udGVuIG5pY2h0IGdlc3BlaWNoZXJ0IHdlcmRlbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tZXNzYWdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG1lc3NhZ2VUZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHZhciBkZWxlZ2F0ZVN1Ym1pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlVXNlcih0cnVlKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5zZXRDb2xvciA9IHNldENvbG9yO1xyXG4gICAgICAgICAgICAkc2NvcGUudXBkYXRlVXNlciA9IHVwZGF0ZVVzZXI7XHJcbiAgICAgICAgICAgICRzY29wZS5kZWxlZ2F0ZVN1Ym1pdCA9IGRlbGVnYXRlU3VibWl0O1xyXG5cclxuICAgICAgICAgICAgLy8gZm9jdXMgdXNlcm5hbWUgZmllbGRcclxuICAgICAgICAgICAgRm9jdXNTcnYoJyN1c2VybmFtZScpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmICgkc2NvcGUudXNlcikge1xyXG4gICAgICAgICAgICBpbml0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBvdGhlcndpc2UsIHdhaXQgZm9yIHVzZXIubG9hZGVkIGV2ZW50XHJcbiAgICAgICAgJHNjb3BlLiRvbigndXNlci5sb2FkZWQnLCBmdW5jdGlvbihldmVudCwgZGF0YSkge1xyXG4gICAgICAgICAgICBpbml0KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XSk7XG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuZGlyZWN0aXZlKCdxdWl6JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdidWlsZC92aWV3cy90ZW1wbGF0ZXMvcXVpei1kaXJlY3RpdmUudGVtcGxhdGUuaHRtbCcsXHJcbiAgICAgICAgICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUXVpekRpcmVjdGl2ZUNvbnRyb2xsZXInLFxyXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuZmlsdGVyKCdyZW5kZXJIdG1sJywgW1wiJHNjZVwiLCBmdW5jdGlvbigkc2NlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHRleHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRzY2UudHJ1c3RBc0h0bWwodGV4dCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5mYWN0b3J5KCdBdXRoSW50ZXJjZXB0b3InLCBbXCJBdXRoVG9rZW5TcnZcIiwgZnVuY3Rpb24oQXV0aFRva2VuU3J2KSB7XHJcbiAgICAgICAgdmFyIGFkZFRva2VuID0gZnVuY3Rpb24oY29uZmlnKSB7XHJcbiAgICAgICAgICAgIHZhciB0b2tlbiA9IEF1dGhUb2tlblNydi5nZXRUb2tlbigpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRva2VuKSB7XHJcbiAgICAgICAgICAgICAgICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgY29uZmlnLmhlYWRlcnNbJ1gtQXV0aCddID0gdG9rZW47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjb25maWc7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVxdWVzdDogYWRkVG9rZW5cclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmZhY3RvcnkoJ0F1dGhUb2tlblNydicsIFtcIiR3aW5kb3dcIiwgZnVuY3Rpb24oJHdpbmRvdykge1xyXG4gICAgICAgIHZhciBzdG9yZSA9ICR3aW5kb3cuc2Vzc2lvblN0b3JhZ2U7XHJcbiAgICAgICAgdmFyIGtleSA9ICdhdXRoLXRva2VuJztcclxuXHJcbiAgICAgICAgdmFyIGdldFRva2VuID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdG9yZS5nZXRJdGVtKGtleSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHNldFRva2VuID0gZnVuY3Rpb24odG9rZW4pIHtcclxuICAgICAgICAgICAgaWYgKHRva2VuKSB7XHJcbiAgICAgICAgICAgICAgICBzdG9yZS5zZXRJdGVtKGtleSwgdG9rZW4pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3RvcmUucmVtb3ZlSXRlbShrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0VG9rZW46IGdldFRva2VuLFxyXG4gICAgICAgICAgICBzZXRUb2tlbjogc2V0VG9rZW5cclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmZhY3RvcnkoJ0NvdW50cnlTcnYnLCBbXCIkaHR0cFwiLCBcIkluZGV4ZWREQlNydlwiLCBcIkxvZ1NydlwiLCBmdW5jdGlvbigkaHR0cCwgSW5kZXhlZERCU3J2LCBMb2dTcnYpIHtcclxuICAgICAgICAvLyBDb3VudHJpZXMgYXJyYXlcclxuICAgICAgICB2YXIgY291bnRyaWVzID0gbnVsbDtcclxuXHJcbiAgICAgICAgdmFyIGNvdW50cmllc0J5QWxwaGEzID0gbnVsbDtcclxuICAgICAgICB2YXIgY291bnRyaWVzQnlMZXR0ZXIgPSBudWxsO1xyXG5cclxuICAgICAgICAvLyBJbmRleGVkREJcclxuICAgICAgICB2YXIgZGF0YWJhc2UgPSAnbWFnZWxsYW4nO1xyXG4gICAgICAgIHZhciBzdG9yZSA9ICdjb3VudHJ5U3RvcmUnO1xyXG4gICAgICAgIHZhciBrZXlDb3VudHJpZXMgPSAnY291bnRyaWVzJztcclxuICAgICAgICB2YXIga2V5VmVyc2lvbiA9ICd2ZXJzaW9uJztcclxuXHJcbiAgICAgICAgdmFyIGluZGV4ZWREQkF2YWlsYWJsZSA9IEluZGV4ZWREQlNydi5pbmRleGVkREJBdmFpbGFibGUoKTtcclxuXHJcbiAgICAgICAgdmFyIGluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxvYWRDb3VudHJpZXMoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgbG9hZENvdW50cmllcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAvLyBjaGVjayBpZiBpbmRleGVkREIgaXMgYXZhaWxhYmxlXHJcbiAgICAgICAgICAgIGlmIChpbmRleGVkREJBdmFpbGFibGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgZGF0YWJhc2UgZXhpc3RzXHJcbiAgICAgICAgICAgICAgICAgICAgSW5kZXhlZERCU3J2LmNyZWF0ZURhdGFiYXNlKGRhdGFiYXNlLCBzdG9yZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZ2V0RW1wdHlPYmplY3QpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGdldEludGVybmFsVmVyc2lvbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZ2V0RXh0ZXJuYWxWZXJzaW9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihkZXRlcm1pbmVMb2FkU3RyYXRlZ3kpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGxvYWREYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cmllcyA9IG9ialsnY291bnRyaWVzJ107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmluZm8oXCJsb2FkZWQgY291bnRyaWVzIGZyb21cIiwgb2JqWydsb2FkU3RyYXRlZ3knXS50b1VwcGVyQ2FzZSgpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGRpdGlvbmFsbHkgbWFwIGNvdW50cmllcyBieSB2YXJpb3VzIHByb3BlcnRpZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cmllc0J5QWxwaGEzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJpZXNCeUxldHRlciA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cmllcy5mb3JFYWNoKGZ1bmN0aW9uKGMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBieSBhbHBoYTMgY29kZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cmllc0J5QWxwaGEzW2NbJ2FscGhhM0NvZGUnXV0gPSBjO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBieSBsZXR0ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlyc3RMZXR0ZXIgPSBjWyduYW1lJ10uc3Vic3RyKDAsIDEpLnRvVXBwZXJDYXNlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZmlyc3RMZXR0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnw4QnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RMZXR0ZXIgPSAnQSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ8OWJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0TGV0dGVyID0gJ08nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICfDnCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdExldHRlciA9ICdVJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3VudHJpZXNCeUxldHRlcltmaXJzdExldHRlcl0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJpZXNCeUxldHRlcltmaXJzdExldHRlcl0gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cmllc0J5TGV0dGVyW2ZpcnN0TGV0dGVyXS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxwaGEzQ29kZTogYy5hbHBoYTNDb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBjLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoY291bnRyaWVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmVycm9yKFwiZmFpbGVkIHRvIGxvYWQgY291bnRyaWVzXCIsIGVycik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBub3QsIHdlIGFsd2F5cyB0cnkgdG8gZG93bmxvYWQgaXQgZnJvbSB0aGUgY291bnRyeSBBUEkgZW5kcG9pbnRcclxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRDb3VudHJpZXNGcm9tQVBJKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZGV0ZXJtaW5lTG9hZFN0cmF0ZWd5ID0gZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdHJhdGVneTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJuYWxWZXJzaW9uID0gb2JqW1wiaW50ZXJuYWxWZXJzaW9uXCJdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGV4dGVybmFsVmVyc2lvbiA9IG9ialtcImV4dGVybmFsVmVyc2lvblwiXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJuYWxWZXJzaW9uID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyYXRlZ3kgPSAnYXBpJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXh0ZXJuYWxWZXJzaW9uID4gaW50ZXJuYWxWZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyYXRlZ3kgPSAnYXBpJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyYXRlZ3kgPSAnZGInO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIG9ialsnbG9hZFN0cmF0ZWd5J10gPSBzdHJhdGVneTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKG9iaik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBsb2FkRGF0YSA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RyYXRlZ3kgPSBvYmpbJ2xvYWRTdHJhdGVneSddO1xyXG5cclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoc3RyYXRlZ3kpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdhcGknOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRDb3VudHJpZXNGcm9tQVBJKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGNvdW50cmllcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ialtcImNvdW50cmllc1wiXSA9IGNvdW50cmllcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3RvcmUgY291bnRyaWVzIGFuZCB2ZXJzaW9uIG51bWJlciBpbiBkYXRhYmFzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEluZGV4ZWREQlNydi5wdXRJdGVtKGRhdGFiYXNlLCBzdG9yZSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBrZXlDb3VudHJpZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAgY291bnRyaWVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEluZGV4ZWREQlNydi5wdXRJdGVtKGRhdGFiYXNlLCBzdG9yZSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBrZXlWZXJzaW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogb2JqW1wiZXh0ZXJuYWxWZXJzaW9uXCJdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUob2JqKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdkYic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldENvdW50cmllc0Zyb21EQihvYmopXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihfb2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShfb2JqKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoJ1Vua25vd24gbG9hZCBzdHJhdGVneScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0RW1wdHlPYmplY3QgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh7fSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRJbnRlcm5hbFZlcnNpb24gPSBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgSW5kZXhlZERCU3J2LnJldHJpZXZlSXRlbShkYXRhYmFzZSwgc3RvcmUsIGtleVZlcnNpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmpbXCJpbnRlcm5hbFZlcnNpb25cIl0gPSBpdGVtLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmpbXCJpbnRlcm5hbFZlcnNpb25cIl0gPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0RXh0ZXJuYWxWZXJzaW9uID0gZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRWZXJzaW9uRnJvbUFQSSgpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbih2ZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqW1wiZXh0ZXJuYWxWZXJzaW9uXCJdID0gdmVyc2lvbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRDb3VudHJpZXNGcm9tREIgPSBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgSW5kZXhlZERCU3J2LnJldHJpZXZlSXRlbShkYXRhYmFzZSwgc3RvcmUsIGtleUNvdW50cmllcylcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ialtcImNvdW50cmllc1wiXSA9IGl0ZW0udmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldENvdW50cmllc0Zyb21BUEkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL2NvdW50cmllcycpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRWZXJzaW9uRnJvbUFQSSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJy9hcGkvY291bnRyaWVzL3ZlcnNpb24nKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UuZGF0YS52ZXJzaW9uIHx8IDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0Q291bnRyeUJ5QWxwaGEzID0gZnVuY3Rpb24oYWxwaGEzKSB7XHJcbiAgICAgICAgICAgIGlmIChjb3VudHJpZXNCeUFscGhhMyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjb3VudHJpZXNCeUFscGhhM1thbHBoYTNdO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRDb3VudHJpZXNCeUxldHRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoY291bnRyaWVzQnlMZXR0ZXIgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY291bnRyaWVzQnlMZXR0ZXI7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGFyZUNvdW50cmllc0xvYWRlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gY291bnRyaWVzICE9PSBudWxsICYmIGNvdW50cmllcy5sZW5ndGggPiAwO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGluaXQ6IGluaXQsXHJcbiAgICAgICAgICAgIGdldENvdW50cnlCeUFscGhhMzogZ2V0Q291bnRyeUJ5QWxwaGEzLFxyXG4gICAgICAgICAgICBnZXRDb3VudHJpZXNCeUxldHRlcjogZ2V0Q291bnRyaWVzQnlMZXR0ZXIsXHJcbiAgICAgICAgICAgIGFyZUNvdW50cmllc0xvYWRlZDogYXJlQ291bnRyaWVzTG9hZGVkXHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5mYWN0b3J5KCdGb2N1c1NydicsIFtcIiR0aW1lb3V0XCIsIFwiJHdpbmRvd1wiLCBmdW5jdGlvbigkdGltZW91dCwgJHdpbmRvdykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbihzZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAvLyB0aW1lb3V0IG1ha2VzIHN1cmUgdGhhdCBpcyBpbnZva2VkIGFmdGVyIGFueSBvdGhlciBldmVudCBoYXMgYmVlbiB0cmlnZ2VyZWQuXHJcbiAgICAgICAgICAgIC8vIGUuZy4gY2xpY2sgZXZlbnRzIHRoYXQgbmVlZCB0byBydW4gYmVmb3JlIHRoZSBmb2N1cyBvclxyXG4gICAgICAgICAgICAvLyBpbnB1dHMgZWxlbWVudHMgdGhhdCBhcmUgaW4gYSBkaXNhYmxlZCBzdGF0ZSBidXQgYXJlIGVuYWJsZWQgd2hlbiB0aG9zZSBldmVudHNcclxuICAgICAgICAgICAgLy8gYXJlIHRyaWdnZXJlZC5cclxuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9ICR3aW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuZmFjdG9yeSgnSW5kZXhlZERCU3J2JywgW1wiJHdpbmRvd1wiLCBmdW5jdGlvbigkd2luZG93KSB7XHJcbiAgICAgICAgdmFyIGtleVBhdGggPSAnbmFtZSc7XHJcblxyXG4gICAgICAgIHZhciBpbmRleGVkREIgPSAkd2luZG93LmluZGV4ZWREQiB8fCAkd2luZG93LndlYmtpdEluZGV4ZWREQiB8fCAkd2luZG93Lm1zSW5kZXhlZERCO1xyXG4gICAgICAgIHZhciBJREJLZXlSYW5nZSA9ICR3aW5kb3cuSURCS2V5UmFuZ2UgfHwgJHdpbmRvdy53ZWJraXRJREJLZXlSYW5nZTtcclxuXHJcbiAgICAgICAgdmFyIElEQlRyYW5zYWN0aW9uID0gJHdpbmRvdy5JREJUcmFuc2FjdGlvbiB8fCAkd2luZG93LndlYmtpdElEQlRyYW5zYWN0aW9uO1xyXG5cclxuICAgICAgICBpZiAoSURCVHJhbnNhY3Rpb24pIHtcclxuICAgICAgICAgICAgSURCVHJhbnNhY3Rpb24uUkVBRF9XUklURSA9IElEQlRyYW5zYWN0aW9uLlJFQURfV1JJVEUgfHwgJ3JlYWR3cml0ZSc7XHJcbiAgICAgICAgICAgIElEQlRyYW5zYWN0aW9uLlJFQURfT05MWSA9IElEQlRyYW5zYWN0aW9uLlJFQURfT05MWSB8fCAncmVhZG9ubHknO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGluZGV4ZWREQkF2YWlsYWJsZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5kZXhlZERCID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjcmVhdGVEYXRhYmFzZSA9IGZ1bmN0aW9uKGRiTmFtZSwgc3RvcmVOYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4oZGJOYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBlIGlzIGFuIGluc3RhbmNlIG9mIElEQlZlcnNpb25DaGFuZ2VFdmVudFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZGIgPSBlLnRhcmdldC5yZXN1bHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IGlkYi5jcmVhdGVPYmplY3RTdG9yZShzdG9yZU5hbWUsIHsga2V5UGF0aDoga2V5UGF0aCB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkLCB1cGRhdGUsIGRlbGV0ZVxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGUgZXJyb3JcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZHJvcERhdGFiYXNlID0gZnVuY3Rpb24oZGJOYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKGRiTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZHJvcCBzdWNjZXNzZnVsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShlKTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRyb3AgZmFpbGVkXHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGFkZEl0ZW0gPSBmdW5jdGlvbihkYk5hbWUsIHN0b3JlTmFtZSwgaXRlbSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKGRiTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlkYiA9IGUudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNhY3Rpb24gPSBpZGIudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCBJREJUcmFuc2FjdGlvbi5SRUFEX1dSSVRFKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShzdG9yZU5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBhZGRcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdEFkZCA9IHN0b3JlLmFkZChpdGVtKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEFkZC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEFkZC5vbmVycm9yID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBwdXRJdGVtID0gZnVuY3Rpb24oZGJOYW1lLCBzdG9yZU5hbWUsIGl0ZW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihkYk5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZGIgPSBlLnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zYWN0aW9uID0gaWRiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgSURCVHJhbnNhY3Rpb24uUkVBRF9XUklURSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoc3RvcmVOYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcXVlc3RBZGQgPSBzdG9yZS5wdXQoaXRlbSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBZGQub25zdWNjZXNzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBZGQub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgcmV0cmlldmVJdGVtID0gZnVuY3Rpb24oZGJOYW1lLCBzdG9yZU5hbWUsIGl0ZW1OYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKGRiTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlkYiA9IGUudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNhY3Rpb24gPSBpZGIudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCBJREJUcmFuc2FjdGlvbi5SRUFEX09OTFkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHN0b3JlTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IElEQktleVJhbmdlLm9ubHkoaXRlbU5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzdG9yZS5vcGVuQ3Vyc29yKHJhbmdlKS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJzb3IgPSBlLnRhcmdldC5yZXN1bHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3Vyc29yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gY3Vyc29yLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciByZXRyaWV2ZUl0ZW1zID0gZnVuY3Rpb24oZGJOYW1lLCBzdG9yZU5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihkYk5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZGIgPSBlLnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zYWN0aW9uID0gaWRiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgSURCVHJhbnNhY3Rpb24uUkVBRF9PTkxZKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShzdG9yZU5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzdG9yZS5vcGVuQ3Vyc29yKCkub25zdWNjZXNzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3Vyc29yID0gZS50YXJnZXQucmVzdWx0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnNvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChjdXJzb3IudmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShpdGVtcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjcmVhdGVEYXRhYmFzZTogY3JlYXRlRGF0YWJhc2UsXHJcbiAgICAgICAgICAgIGRyb3BEYXRhYmFzZTogZHJvcERhdGFiYXNlLFxyXG4gICAgICAgICAgICBhZGRJdGVtOiBhZGRJdGVtLFxyXG4gICAgICAgICAgICBwdXRJdGVtOiBwdXRJdGVtLFxyXG4gICAgICAgICAgICByZXRyaWV2ZUl0ZW06IHJldHJpZXZlSXRlbSxcclxuICAgICAgICAgICAgcmV0cmlldmVJdGVtczogcmV0cmlldmVJdGVtcyxcclxuICAgICAgICAgICAgaW5kZXhlZERCQXZhaWxhYmxlOiBpbmRleGVkREJBdmFpbGFibGVcclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmZhY3RvcnkoJ0xvZ1NydicsIFtcIkFwcENvbmZpZ1wiLCBmdW5jdGlvbihBcHBDb25maWcpIHtcclxuICAgICAgICB2YXIgbG9nSW5mbyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoQXBwQ29uZmlnW1wibG9nLmluZm9cIl0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgbG9nRXJyb3IgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKEFwcENvbmZpZ1tcImxvZy5lcnJvclwiXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaW5mbzogbG9nSW5mbyxcclxuICAgICAgICAgICAgZXJyb3I6IGxvZ0Vycm9yXHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5mYWN0b3J5KCdRdWl6U3J2JywgW1wiQXBwQ29uZmlnXCIsIFwiQ291bnRyeVNydlwiLCBcIlNjb3JlU3J2XCIsIFwiTG9nU3J2XCIsIGZ1bmN0aW9uKEFwcENvbmZpZywgQ291bnRyeVNydiwgU2NvcmVTcnYsIExvZ1Nydikge1xyXG4gICAgICAgIHZhciBjb3VudHJpZXMgPSBudWxsO1xyXG4gICAgICAgIHZhciBjb3VudHJpZXNCeUFscGhhMyA9IG51bGw7XHJcblxyXG4gICAgICAgIHZhciBxdWl6ID0gbnVsbDtcclxuXHJcbiAgICAgICAgdmFyIHNldENvdW50cmllcyA9IGZ1bmN0aW9uKF9jb3VudHJpZXMpIHtcclxuICAgICAgICAgICAgY291bnRyaWVzID0gX2NvdW50cmllcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY291bnRyaWVzTG9hZGVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb3VudHJpZXMgIT09IG51bGwgJiYgY291bnRyaWVzLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjb3VudHJpZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJDb3VudHJpZXMgaGF2ZSBub3QgYmVlbiBsb2FkZWRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcXVpeiA9IGNyZWF0ZVF1aXooJ2NvdW50cnknKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHF1aXouc3RhcnQoKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBpc1F1aXpSdW5uaW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChxdWl6ID09PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHF1aXouaGFzU3RhcnRlZCgpICYmICFxdWl6Lmhhc0VuZGVkKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGhhc1F1aXpTdGFydGVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChxdWl6ID09PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHF1aXouaGFzU3RhcnRlZCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBoYXNRdWl6RW5kZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHF1aXogPT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcXVpei5oYXNFbmRlZCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjcmVhdGVRdWl6ID0gZnVuY3Rpb24ocXVpelR5cGUpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChxdWl6VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY291bnRyeSc6XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVDb3VudHJ5UXVpeigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNyZWF0ZUNvdW50cnlRdWl6ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBjb3VudHJ5UXVpeiA9IG5ldyBRdWl6KCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZnVsbFBvaW50cyA9IDEwMDtcclxuICAgICAgICAgICAgdmFyIGhpbnRNYXhpbXVtID0gMztcclxuICAgICAgICAgICAgdmFyIGhpbnRDb3N0ID0gMjU7XHJcblxyXG4gICAgICAgICAgICB2YXIgbGFzdFF1ZXN0aW9uQm9udXMgPSAyLjU7XHJcblxyXG4gICAgICAgICAgICB2YXIgcXVlc3Rpb25UeXBlcyA9IEFwcENvbmZpZ1sncXVpei5jb3VudHJ5LnR5cGVzJ107XHJcbiAgICAgICAgICAgIHZhciBxdWVzdGlvblR5cGVzTGVuZ3RoID0gT2JqZWN0LmtleXMocXVlc3Rpb25UeXBlcykubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgLy8gc2VsZWN0IGNvdW50cmllcyBmb3IgcXVlc3Rpb25zXHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZENvdW50cmllcyA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgbnVtYmVyT2ZRdWVzdGlvbnMgPSBBcHBDb25maWdbJ3F1aXouY291bnRyeS5xdWVzdGlvbnMnXTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyT2ZRdWVzdGlvbnM7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvdW50cnlPayA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIHdoaWxlICghY291bnRyeU9rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvdW50cnkgPSBjb3VudHJpZXNbZ2V0UmFuZG9tSW50KDAsIGNvdW50cmllcy5sZW5ndGggLSAxKV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnlPayA9IHNlbGVjdGVkQ291bnRyaWVzLmluZGV4T2YoY291bnRyeVsnYWxwaGEzQ29kZSddKSA8IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkQ291bnRyaWVzLnB1c2goY291bnRyeVsnYWxwaGEzQ29kZSddKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gY3JlYXRlIHF1ZXN0aW9ucyBmb3IgcXVpelxyXG4gICAgICAgICAgICB2YXIgcWNudCA9IDA7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkQ291bnRyaWVzLmZvckVhY2goZnVuY3Rpb24oYWxwaGEzKSB7XHJcbiAgICAgICAgICAgICAgICBxY250Kys7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGNvdW50cnkgPSBDb3VudHJ5U3J2LmdldENvdW50cnlCeUFscGhhMyhhbHBoYTMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBxdWVzdGlvblR5cGUgPSBxdWVzdGlvblR5cGVzW2dldFJhbmRvbUludCgxLCBxdWVzdGlvblR5cGVzTGVuZ3RoKV07XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHRleHQgPSBnZXRRdWVzdGlvblRleHQocXVlc3Rpb25UeXBlLCBjb3VudHJ5KTtcclxuICAgICAgICAgICAgICAgIHZhciBpbmZvID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHF1ZXN0aW9uVHlwZSxcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dDogZ2V0UXVlc3Rpb25JbnB1dChxdWVzdGlvblR5cGUpLFxyXG4gICAgICAgICAgICAgICAgICAgIHVuaXQ6IGdldFF1ZXN0aW9uVW5pdChxdWVzdGlvblR5cGUpXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdmFyIGFuc3dlciA9IGdldFF1ZXN0aW9uQW5zd2VyKHF1ZXN0aW9uVHlwZSwgY291bnRyeSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hlY2tBbnN3ZXIgPSBnZXRDaGVja0Fuc3dlckxhbWJkYShxdWVzdGlvblR5cGUsIGZ1bGxQb2ludHMsIGxhc3RRdWVzdGlvbkJvbnVzKTtcclxuICAgICAgICAgICAgICAgIHZhciBoaW50cyA9IGdldFF1ZXN0aW9uSGludHMocXVlc3Rpb25UeXBlLCBoaW50TWF4aW11bSwgaGludENvc3QpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHRoZSBsYXN0IHF1ZXN0aW9uIGlzIHRoZSBib251cyBxdWVzdGlvblxyXG4gICAgICAgICAgICAgICAgaWYgKHFjbnQgPj0gbnVtYmVyT2ZRdWVzdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmZvWydib251cyddID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBhZGQgaW5mbyBmb3IgZmxhZyBvZiBjb3VudHJ5XHJcbiAgICAgICAgICAgICAgICBpZiAocXVlc3Rpb25UeXBlID09PSAnRkxBR19PRl9DT1VOVFJZJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZm8ubWVkaWEgPSAnZmxhZyc7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5mby5hbHBoYTJDb2RlID0gY291bnRyeS5hbHBoYTJDb2RlLnRvTG9jYWxlTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY291bnRyeVF1aXouYWRkUXVlc3Rpb24obmV3IFF1ZXN0aW9uKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0ZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgIGluZm86IGluZm8sXHJcbiAgICAgICAgICAgICAgICAgICAgYW5zd2VyOiBhbnN3ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tBbnN3ZXI6IGNoZWNrQW5zd2VyLFxyXG4gICAgICAgICAgICAgICAgICAgIGhpbnRzOiBoaW50c1xyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjb3VudHJ5UXVpejtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0UXVlc3Rpb25UZXh0ID0gZnVuY3Rpb24odHlwZSwgY291bnRyeSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0NBUElUQUxfT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiV2llIGhlacOfdCBkaWUgSGF1cHRzdGFkdCB2b24gW1wiICsgY291bnRyeS5uYW1lICsgXCJdXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnQ09VTlRSWV9PRl9DQVBJVEFMJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJbXCIgKyBjb3VudHJ5LmNhcGl0YWwgKyBcIl0gaXN0IGRpZSBIYXVwdHN0YWR0IHZvbiB3ZWxjaGVtIExhbmRcIlxyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ1BPUFVMQVRJT05fT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiV2llIHZpZWxlIE1lbnNjaGVuIGxlYmVuIGluIFtcIiArIGNvdW50cnkubmFtZSArIFwiXVwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ0FSRUFfT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiV2llIGdyb8OfIGlzdCBkaWUgRmzDpGNoZSB2b24gW1wiICsgY291bnRyeS5uYW1lICsgXCJdXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnRkxBR19PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJXZWxjaGVzIExhbmQgaGF0IGRpZXNlIEZsYWdnZVwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiP1wiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0UXVlc3Rpb25BbnN3ZXIgPSBmdW5jdGlvbih0eXBlLCBjb3VudHJ5KSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnQ0FQSVRBTF9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYWx0U3BlbGxpbmdzID0gY291bnRyeS5hbHRTcGVsbGluZ3MgIT09IHVuZGVmaW5lZCAmJiBjb3VudHJ5LmFsdFNwZWxsaW5nc1snY2FwaXRhbCddICE9PSB1bmRlZmluZWQgPyBjb3VudHJ5LmFsdFNwZWxsaW5nc1snY2FwaXRhbCddIDogW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcnJlY3Q6IGNvdW50cnkuY2FwaXRhbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWx0U3BlbGxpbmdzOiBhbHRTcGVsbGluZ3NcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ0NPVU5UUllfT0ZfQ0FQSVRBTCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdGTEFHX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbHRTcGVsbGluZ3MgPSBjb3VudHJ5LmFsdFNwZWxsaW5ncyAhPT0gdW5kZWZpbmVkICYmIGNvdW50cnkuYWx0U3BlbGxpbmdzWyduYW1lJ10gIT09IHVuZGVmaW5lZCA/IGNvdW50cnkuYWx0U3BlbGxpbmdzWyduYW1lJ10gOiBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29ycmVjdDogY291bnRyeS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRTcGVsbGluZ3M6IGFsdFNwZWxsaW5nc1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnUE9QVUxBVElPTl9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JyZWN0OiBjb3VudHJ5LnBvcHVsYXRpb25cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ0FSRUFfT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29ycmVjdDogY291bnRyeS5hcmVhXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIj9cIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldFF1ZXN0aW9uSW5wdXQgPSBmdW5jdGlvbih0eXBlKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnUE9QVUxBVElPTl9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ251bWJlci5oaWdoJztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdBUkVBX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnbnVtYmVyLm1lZGl1bSc7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnQ0FQSVRBTF9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0NPVU5UUllfT0ZfQ0FQSVRBTCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdGTEFHX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RleHQuc3RhbmRhcmQnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldFF1ZXN0aW9uVW5pdCA9IGZ1bmN0aW9uKHR5cGUpIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdBUkVBX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAna23Csic7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnUE9QVUxBVElPTl9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0VpbndvaG5lcic7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRDaGVja0Fuc3dlckxhbWJkYSA9IGZ1bmN0aW9uKHR5cGUsIGZ1bGxQb2ludHMsIGxhc3RRdWVzdGlvbkJvbnVzKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnQ0FQSVRBTF9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0NPVU5UUllfT0ZfQ0FQSVRBTCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdGTEFHX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihhbnN3ZXIsIHN1Ym1pdHRlZEFuc3dlciwgaGludHNVc2VkLCBoaW50Q29zdCwgaW5mbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29ycmVjdCA9IHN1Ym1pdHRlZEFuc3dlciA9PT0gYW5zd2VyLmNvcnJlY3QgfHwgKGFuc3dlci5hbHRTcGVsbGluZ3MgJiYgYW5zd2VyLmFsdFNwZWxsaW5ncy5pbmRleE9mKHN1Ym1pdHRlZEFuc3dlcikgPj0gMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9pbnRzID0gY29ycmVjdCA/IGZ1bGxQb2ludHMgOiAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgaGludHMgYXJlIGFsbG93ZWQgYW5kIGhhdmUgYmVlbiB1c2VkLCBzdWJ0cmFjdCB0aGUgcG9pbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoaW50c1VzZWQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgLT0gKGhpbnRzVXNlZCAqIGhpbnRDb3N0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYm9udXMgcG9pbnRzIGZvciBsYXN0IHF1ZXN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvICE9PSB1bmRlZmluZWQgJiYgaW5mby5ib251cyAhPT0gdW5kZWZpbmVkICYmIGluZm8uYm9udXMgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyAqPSBsYXN0UXVlc3Rpb25Cb251cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50cztcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ1BPUFVMQVRJT05fT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdBUkVBX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihhbnN3ZXIsIHN1Ym1pdHRlZEFuc3dlciwgaGludHNVc2VkLCBoaW50Q29zdCwgaW5mbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgcGVyY2VudGFnZSBkaWZmZXJlbmNlIGZyb20gY29ycmVjdCBhbnN3ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yUGVyY2VudGFnZSA9IE1hdGguYWJzKHN1Ym1pdHRlZEFuc3dlciAtIGFuc3dlci5jb3JyZWN0KSAvIGFuc3dlci5jb3JyZWN0ICogMTAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvaW50cztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvclBlcmNlbnRhZ2UgPD0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gMTAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yUGVyY2VudGFnZSA8PSA2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSA5MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvclBlcmNlbnRhZ2UgPD0gOSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gODA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3JQZXJjZW50YWdlIDw9IDEyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSA3MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvclBlcmNlbnRhZ2UgPD0gMTQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IDYwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yUGVyY2VudGFnZSA8PSAxNikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gNTA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3JQZXJjZW50YWdlIDw9IDE4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSA0MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvclBlcmNlbnRhZ2UgPD0gMjApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IDMwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yUGVyY2VudGFnZSA8PSAyNSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gMjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3JQZXJjZW50YWdlIDw9IDMwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSAxMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGhpbnRzIGFyZSBhbGxvd2VkIGFuZCBoYXZlIGJlZW4gdXNlZCwgc3VidHJhY3QgdGhlIHBvaW50c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGludHNVc2VkID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzIC09IChoaW50c1VzZWQgKiBoaW50Q29zdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJvbnVzIHBvaW50cyBmb3IgbGFzdCBxdWVzdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5mbyAhPT0gdW5kZWZpbmVkICYmIGluZm8uYm9udXMgIT09IHVuZGVmaW5lZCAmJiBpbmZvLmJvbnVzID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgKj0gbGFzdFF1ZXN0aW9uQm9udXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwb2ludHM7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIj9cIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRRdWVzdGlvbkhpbnRzID0gZnVuY3Rpb24odHlwZSwgaGludHNQb3NzaWJsZSwgaGludENvc3QpIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdDQVBJVEFMX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnQ09VTlRSWV9PRl9DQVBJVEFMJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0ZMQUdfT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogaGludHNQb3NzaWJsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29zdDogaGludENvc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdpdmU6IGZ1bmN0aW9uKGhpbnRzVXNlZCwgYW5zd2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYW5zd2VyLmNvcnJlY3Quc3Vic3RyKDAsIGhpbnRzVXNlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ1BPUFVMQVRJT05fT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdBUkVBX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93ZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIj9cIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRDdXJyZW50UXVlc3Rpb25OdW1iZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCFpc1F1aXpSdW5uaW5nKCkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBxdWl6LmdldEN1cnJlbnRRdWVzdGlvbk51bWJlcigpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXROdW1iZXJPZlF1aXpRdWVzdGlvbnMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCFpc1F1aXpSdW5uaW5nKCkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBxdWl6LmdldE51bWJlck9mUXVlc3Rpb25zKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldEN1cnJlbnRRdWVzdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoIWlzUXVpelJ1bm5pbmcoKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHF1aXouY3VycmVudFF1ZXN0aW9uKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIG5leHRRdWVzdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoIWlzUXVpelJ1bm5pbmcoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBxdWl6Lm5leHRRdWVzdGlvbigpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRUb3RhbFBvaW50cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAocXVpeiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBxdWl6LmdldFRvdGFsUG9pbnRzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb25jbHVkZXMgdGhlIHF1aXogYW5kIHB1dHMgdGhlIHNjb3JlIHRvIHRoZSBBUEkgZW5kcG9pbnQuXHJcbiAgICAgICAgICogUmV0dXJucyBhIHByb21pc2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmFyIGNvbmNsdWRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIGlmIChxdWl6ICE9PSBudWxsICYmIHF1aXouaGFzRW5kZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChxdWl6LnN1Ym1pdHRlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoJ1F1aXogaGFzIGFscmVhZHkgYmVlbiBzdWJtaXR0ZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHF1aXouc3VibWl0dGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgU2NvcmVTcnYucHV0SGlnaHNjb3JlKHF1aXouZ2V0VG90YWxQb2ludHMoKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoJ05vIHF1aXogaXMgY3VycmVudGx5IHJ1bm5pbmcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaW5pdDogaW5pdCxcclxuICAgICAgICAgICAgc2V0Q291bnRyaWVzOiBzZXRDb3VudHJpZXMsXHJcbiAgICAgICAgICAgIGlzUXVpelJ1bm5pbmc6IGlzUXVpelJ1bm5pbmcsXHJcbiAgICAgICAgICAgIGhhc1F1aXpTdGFydGVkOiBoYXNRdWl6U3RhcnRlZCxcclxuICAgICAgICAgICAgaGFzUXVpekVuZGVkOiBoYXNRdWl6RW5kZWQsXHJcbiAgICAgICAgICAgIGdldEN1cnJlbnRRdWVzdGlvbk51bWJlcjogZ2V0Q3VycmVudFF1ZXN0aW9uTnVtYmVyLFxyXG4gICAgICAgICAgICBnZXROdW1iZXJPZlF1aXpRdWVzdGlvbnM6IGdldE51bWJlck9mUXVpelF1ZXN0aW9ucyxcclxuICAgICAgICAgICAgZ2V0Q3VycmVudFF1ZXN0aW9uOiBnZXRDdXJyZW50UXVlc3Rpb24sXHJcbiAgICAgICAgICAgIG5leHRRdWVzdGlvbjogbmV4dFF1ZXN0aW9uLFxyXG4gICAgICAgICAgICBnZXRUb3RhbFBvaW50czogZ2V0VG90YWxQb2ludHMsXHJcbiAgICAgICAgICAgIGNvbmNsdWRlOiBjb25jbHVkZVxyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuZmFjdG9yeSgnU2NvcmVTcnYnLCBbXCIkaHR0cFwiLCBmdW5jdGlvbigkaHR0cCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEZldGNoZXMgdGhlIGVudGlyZSBoaWdoc2NvcmUgbGlzdCBpbiBhbiBhcnJheSBmcm9tIHRoZSBBUEkuXHJcbiAgICAgICAgICogUmV0dXJucyBhIHByb21pc2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmFyIGdldEhpZ2hzY29yZUxpc3QgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL3Njb3Jlcy9hbGwnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGxpc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShsaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEZldGNoZXMgdGhlIGhpZ2hzY29yZSBvYmplY3QgZm9yIHRoZSBsb2dnZWQgaW4gdXNlci5cclxuICAgICAgICAgKiBJZiB0aGUgdXNlciBoYXMgbm8gcmVzdWx0IHlldCwgYW4gZW1wdHkgb2JqZWN0IGlzIHJldHVybmVkLlxyXG4gICAgICAgICAqIFJldHVybnMgYSBwcm9taXNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZhciBnZXRVc2VySGlnaHNjb3JlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICRodHRwLmdldCgnL2FwaS9zY29yZXMvdXNlcicpXHJcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oc2NvcmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzY29yZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBGZXRjaGVzIHRoZSBoaWdoc2NvcmUgb2JqZWN0IGZvciB0aGUgb3ZlcmFsbCBoaWdoc2NvcmUuXHJcbiAgICAgICAgICogSWYgdGhlcmUgaXMgY3VycmVudGx5IG5vIHJlc3VsdCB5ZXQsIGFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZC5cclxuICAgICAgICAgKiBSZXR1cm5zIGEgcHJvbWlzZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB2YXIgZ2V0T3ZlcmFsbEhpZ2hzY29yZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJy9hcGkvc2NvcmVzL2hpZ2gnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKHNjb3JlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc2NvcmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUHV0cyBhIGhpZ2hzY29yZSByZXN1bHQgZm9yIHRoZSBsb2dnZWQgaW4gdXNlci5cclxuICAgICAgICAgKiBAcGFyYW0gc2NvcmUgICAgIE51bWJlciB3aXRoIHRoZSBhY2hpZXZlZCBzY29yZS5cclxuICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cclxuICAgICAgICAgKi9cclxuICAgICAgICB2YXIgcHV0SGlnaHNjb3JlID0gZnVuY3Rpb24oc2NvcmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgJGh0dHAucHV0KCcvYXBpL3Njb3JlcycsIHsgc2NvcmU6IHNjb3JlIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0SGlnaHNjb3JlTGlzdDogZ2V0SGlnaHNjb3JlTGlzdCxcclxuICAgICAgICAgICAgZ2V0VXNlckhpZ2hzY29yZTogZ2V0VXNlckhpZ2hzY29yZSxcclxuICAgICAgICAgICAgZ2V0T3ZlcmFsbEhpZ2hzY29yZTogZ2V0T3ZlcmFsbEhpZ2hzY29yZSxcclxuICAgICAgICAgICAgcHV0SGlnaHNjb3JlOiBwdXRIaWdoc2NvcmVcclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmZhY3RvcnkoJ1VzZXJTcnYnLCBbXCIkaHR0cFwiLCBcIkF1dGhUb2tlblNydlwiLCBcIkFwcENvbmZpZ1wiLCBmdW5jdGlvbigkaHR0cCwgQXV0aFRva2VuU3J2LCBBcHBDb25maWcpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgIHZhciBnZXRVc2VyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcicpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRVc2VyRnJvbVN0b3JhZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuID0gQXV0aFRva2VuU3J2LmdldFRva2VuKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgQXV0aFRva2VuU3J2LnNldFRva2VuKHRva2VuKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0VXNlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIHRva2VuLCB3ZSByZWplY3QgdGhlIHByb21pc2VcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJObyB0b2tlbiBpbiBzdG9yYWdlXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgbG9naW4gPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvc2Vzc2lvbicsIHtcclxuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcclxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZFxyXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnRva2VuID0gcmVzcG9uc2UuZGF0YTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBzYXZlIHRva2VuIGxvY2FsbHlcclxuICAgICAgICAgICAgICAgIEF1dGhUb2tlblNydi5zZXRUb2tlbihzZWxmLnRva2VuKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0VXNlcigpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgbG9nb3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYudG9rZW4gPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSB0b2tlbiBsb2NhbGx5XHJcbiAgICAgICAgICAgICAgICBBdXRoVG9rZW5TcnYuc2V0VG9rZW4oKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciByZWdpc3RlciA9IGZ1bmN0aW9uKG5ld1VzZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgLy8gc2VsZWN0IGEgcmFuZG9tIGNvbG9yIGZvciB0aGUgdXNlclxyXG4gICAgICAgICAgICAgICAgdmFyIGNvbG9ycyA9IEFwcENvbmZpZ1snc2V0dGluZ3MudXNlci5jb2xvcnMnXTtcclxuICAgICAgICAgICAgICAgIG5ld1VzZXIuY29sb3IgPSBjb2xvcnNbZ2V0UmFuZG9tSW50KDAsIGNvbG9ycy5sZW5ndGggLSAxKV07XHJcblxyXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdCgnL2FwaS91c2VyJywgbmV3VXNlcilcclxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGltbWVkaWF0ZWx5IGxvZyB0aGUgdXNlciBpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dpbihuZXdVc2VyLnVzZXJuYW1lLCBuZXdVc2VyLnBhc3N3b3JkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KSAgO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciB1cGRhdGVCYXNpYyA9IGZ1bmN0aW9uKHVzZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgJGh0dHAucHV0KCcvYXBpL3VzZXIvYmFzaWMnLCB1c2VyKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0VXNlcjogZ2V0VXNlcixcclxuICAgICAgICAgICAgZ2V0VXNlckZyb21TdG9yYWdlOiBnZXRVc2VyRnJvbVN0b3JhZ2UsXHJcbiAgICAgICAgICAgIGxvZ2luOiBsb2dpbixcclxuICAgICAgICAgICAgbG9nb3V0OiBsb2dvdXQsXHJcbiAgICAgICAgICAgIHJlZ2lzdGVyOiByZWdpc3RlcixcclxuICAgICAgICAgICAgdXBkYXRlQmFzaWM6IHVwZGF0ZUJhc2ljXHJcbiAgICAgICAgfTtcclxuICAgIH1dKTsiLCIvLyBvd24gY2xhc3NlcyBhbmQgZnVuY3Rpb25zXHJcblxyXG4vLyAtLS0tLS0tLS0tIFFVSVogLS0tLS0tLS0tLVxyXG52YXIgUXVpeiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gaW5kZXggb2YgY3VycmVudCBxdWVzdGlvblxyXG4gICAgdmFyIGN1cnJlbnRRdWVzdGlvbklkeCA9IG51bGw7XHJcblxyXG4gICAgLy8gYXJyYXkgY29udGFpbmluZyBhbGwgcXVlc3Rpb25zXHJcbiAgICB2YXIgcXVlc3Rpb25zID0gW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdGFydHMgdGhlIHF1aXouXHJcbiAgICAgKi9cclxuICAgIHRoaXMuc3RhcnQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyBjaGVjayBpZiBxdWl6IGhhcyBxdWVzdGlvbnNcclxuICAgICAgICBpZiAocXVlc3Rpb25zLmxlbmd0aCA8PSAwKVxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIkNhbm5vdCBzdGFydCBhIHF1aXogd2l0aG91dCBxdWVzdGlvbnNcIik7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLm5leHRRdWVzdGlvbigpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmlzQWN0aXZlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzU3RhcnRlZCgpICYmICF0aGlzLmhhc0VuZGVkKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuaGFzU3RhcnRlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBjdXJyZW50UXVlc3Rpb25JZHggIT09IG51bGw7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuaGFzRW5kZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5oYXNTdGFydGVkKCkgJiYgY3VycmVudFF1ZXN0aW9uSWR4ID49IHF1ZXN0aW9ucy5sZW5ndGg7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuc3VibWl0dGVkID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgbmV3IHF1ZXN0aW9uIHRvIHRoZSBxdWl6LlxyXG4gICAgICogVGhlIHBhcmFtZXRlciBtdXN0IGJlIGFuIHF1ZXN0aW9uIG9iamVjdC5cclxuICAgICAqIElmIG5vIHF1ZXN0aW9uIG9iamVjdCBpcyBwYXNzZWQgb3IgYW4gb2JqZWN0IHdpdGggbWlzc2luZyBwcm9wZXJ0aWVzLCBhbiBlcnJvciBpcyB0aHJvd24uXHJcbiAgICAgKi9cclxuICAgIHRoaXMuYWRkUXVlc3Rpb24gPSBmdW5jdGlvbihxdWVzdGlvbikge1xyXG4gICAgICAgIGlmIChxdWVzdGlvbiA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIk5vIHF1ZXN0aW9uIG9iamVjdCBwYXNzZWRcIik7XHJcblxyXG4gICAgICAgIHZhciB2YWxpZCA9IHRydWU7XHJcblxyXG4gICAgICAgIC8vIGEgcXVlc3Rpb24gb2JqZWN0IG11c3QgY29udGFpbiBhbGwgdGhlc2UgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBuZWNlc3NhcnlQcm9wZXJ0aWVzID0gWydjb25maWcnLCAnaGludCcsICdzb2x1dGlvbicsICdhbnN3ZXInLCAncXVlc3Rpb24nLCAnZ2V0SW5mbycsICdpbmZvJywgJ3BvaW50cycsICdhbnN3ZXJlZCcsICdoaW50c0FsbG93ZWQnLCAnaGludHNSZW1haW5pbmcnXTtcclxuXHJcbiAgICAgICAgbmVjZXNzYXJ5UHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgIGlmICghcXVlc3Rpb24uaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUXVlc3Rpb24gbXVzdCBoYXZlIHByb3BlcnR5ICdcIiArIHByb3BlcnR5ICsgXCInXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICBxdWVzdGlvbnMucHVzaChxdWVzdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIG5leHQgcXVlc3Rpb24gb2YgdGhlIHF1aXouXHJcbiAgICAgKiBJZiB0aGUgcXVpeiBoYXMgZW5kZWQsIGl0IHJldHVybnMgbm90aGluZy5cclxuICAgICAqL1xyXG4gICAgdGhpcy5uZXh0UXVlc3Rpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoY3VycmVudFF1ZXN0aW9uSWR4ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRRdWVzdGlvbklkeCA9IDA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY3VycmVudFF1ZXN0aW9uSWR4Kys7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5oYXNFbmRlZCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBxdWVzdGlvbnNbY3VycmVudFF1ZXN0aW9uSWR4XTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5jdXJyZW50UXVlc3Rpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNBY3RpdmUoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBxdWVzdGlvbnNbY3VycmVudFF1ZXN0aW9uSWR4XTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5nZXRUb3RhbFBvaW50cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaGFzU3RhcnRlZCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHRvdGFsUG9pbnRzID0gMDtcclxuXHJcbiAgICAgICAgcXVlc3Rpb25zLmZvckVhY2goZnVuY3Rpb24ocXVlc3Rpb24pIHtcclxuICAgICAgICAgICAgdmFyIHBvaW50cyA9IHF1ZXN0aW9uLnBvaW50cygpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHBvaW50cyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0b3RhbFBvaW50cyArPSBwb2ludHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRvdGFsUG9pbnRzO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmdldEN1cnJlbnRRdWVzdGlvbk51bWJlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmIChjdXJyZW50UXVlc3Rpb25JZHggPT09IG51bGwpXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICByZXR1cm4gY3VycmVudFF1ZXN0aW9uSWR4ICsgMTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5nZXROdW1iZXJPZlF1ZXN0aW9ucyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBxdWVzdGlvbnMubGVuZ3RoO1xyXG4gICAgfTtcclxufTtcclxuXHJcbi8vIC0tLS0tLS0tLS0gUVVFU1RJT04gLS0tLS0tLS0tLVxyXG52YXIgUXVlc3Rpb24gPSBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAvLyBUZXh0IG9mIHRoZSBxdWVzdGlvblxyXG4gICAgdmFyIHRleHQgPSBudWxsO1xyXG5cclxuICAgIC8vIEluZm8gb2JqZWN0IGZvciB0aGUgcXVlc3Rpb25cclxuICAgIHZhciBpbmZvID0gbnVsbDtcclxuXHJcbiAgICAvLyBBbnN3ZXIgb2YgdGhlIHF1ZXN0aW9uXHJcbiAgICB2YXIgYW5zd2VyID0gbnVsbDtcclxuXHJcbiAgICAvLyBIaW50cyBvZiB0aGUgcXVlc3Rpb25cclxuICAgIHZhciBoaW50cyA9IG51bGw7XHJcbiAgICB2YXIgaGludHNVc2VkID0gMDtcclxuXHJcbiAgICAvLyBMYW1iZGEgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIHRoZSBhbnN3ZXIgc3RhdHVzIG9mIHRoZSBxdWVzdGlvblxyXG4gICAgdmFyIGNoZWNrQW5zd2VyID0gbnVsbDtcclxuXHJcbiAgICAvLyBQb2ludHMgYXdhcmRlZCBmb3IgdGhlIHF1ZXN0aW9uXHJcbiAgICB2YXIgcG9pbnRzID0gbnVsbDtcclxuXHJcbiAgICAvLyBGbGFnIGluZGljYXRpbmcgd2hldGhlciBxdWVzdGlvbiBoYXMgYWxyZWFkeSBiZWVuIGFuc3dlcmVkXHJcbiAgICB2YXIgYW5zd2VyZWQgPSBmYWxzZTtcclxuXHJcbiAgICB2YXIgaW5pdCA9IGZ1bmN0aW9uKG9wdHMpIHtcclxuICAgICAgICB0ZXh0ID0gb3B0cy50ZXh0O1xyXG4gICAgICAgIGluZm8gPSBvcHRzLmluZm8gfHwge307XHJcbiAgICAgICAgYW5zd2VyID0gb3B0cy5hbnN3ZXI7XHJcbiAgICAgICAgY2hlY2tBbnN3ZXIgPSBvcHRzLmNoZWNrQW5zd2VyIHx8IG51bGw7XHJcblxyXG4gICAgICAgIGhpbnRzID0gb3B0cy5oaW50cyB8fCB7XHJcbiAgICAgICAgICAgICAgICBhbGxvd2VkOiBmYWxzZSwgICAgIC8vIGlzIGEgaGludCBhbGxvd2VkP1xyXG4gICAgICAgICAgICAgICAgbWF4aW11bTogMCwgICAgICAgICAvLyBtYXhpbXVtIG51bWJlciBvZiBoaW50cyBmb3IgdGhpcyBxdWVzdGlvbiAoaXJyZWxldmFudCBpZiBhbGxvd2VkIGlzIHNldCB0byBmYWxzZSlcclxuICAgICAgICAgICAgICAgIGNvc3Q6IDAsICAgICAgICAgICAgLy8gbnVtYmVyIG9mIHBvaW50cyBzdWJ0cmFjdGVkIHBlciB1c2VkIGhpbnQgKGlycmVsZXZhbnQgaWYgYWxsb3dlZCBpcyBzZXQgdG8gZmFsc2UpXHJcbiAgICAgICAgICAgICAgICBnaXZlOiBudWxsICAgICAgICAgIC8vIGxhbWJkYSBmdW5jdGlvbiB0byBnaXZlIGEgaGludCBmb3IgYSBxdWVzdGlvblxyXG4gICAgICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgIGluaXQob3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jb25maWcgPSBmdW5jdGlvbihvcHRzKSB7XHJcbiAgICAgICAgaW5pdChvcHRzKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBxdWVzdGlvbiB0ZXh0LlxyXG4gICAgICovXHJcbiAgICB0aGlzLnF1ZXN0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRleHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgcXVlc3Rpb24gaW5mbyBvYmplY3QuXHJcbiAgICAgKiBBY3RzIGFzIGdldHRlciAod2l0aCBvbmx5IG9uZSBhcmd1bWVudCkgYW5kIHNldHRlciAod2l0aCB0d28gYXJndW1lbnRzKVxyXG4gICAgICovXHJcbiAgICB0aGlzLmluZm8gPSBmdW5jdGlvbihwcm9wLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIC8vIHNldHRlclxyXG4gICAgICAgICAgICBpbmZvW3Byb3BdID0gdmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gZ2V0dGVyXHJcbiAgICAgICAgICAgIHJldHVybiBpbmZvW3Byb3BdO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBlbnRpcmUgaW5mbyBvYmplY3QuXHJcbiAgICAgKi9cclxuICAgIHRoaXMuZ2V0SW5mbyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBpbmZvO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGNvcnJlY3QgYW5zd2VyIHRvIHRoZSBxdWVzdGlvbiBhZnRlciB0aGUgcXVlc3Rpb24gaGFzIGJlZW4gYW5zd2VyZWQuXHJcbiAgICAgKiBJZiB0aGUgcXVlc3Rpb24gaGFzIG5vdCBiZWVuIGFuc3dlcmVkIHlldCwgaXQgcmV0dXJucyBudWxsLlxyXG4gICAgICovXHJcbiAgICB0aGlzLnNvbHV0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKGFuc3dlcmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhbnN3ZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgaGludCBmb3IgdGhlIHF1ZXN0aW9uLlxyXG4gICAgICogSWYgbm8gaGludHMgYXJlIGFsbG93ZWQsIG9yIHRoZSBtYXhpbXVtIG51bWJlciBvZiBoaW50cyBoYXZlIGJlZW4gdXNlZCwgbnVsbCBpcyByZXR1cm5lZC5cclxuICAgICAqL1xyXG4gICAgdGhpcy5oaW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCFoaW50cy5hbGxvd2VkIHx8IGhpbnRzVXNlZCA+PSBoaW50cy5tYXhpbXVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGhpbnRzLmFsbG93ZWQgJiYgIWhpbnRzLmdpdmUpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSGludHMgYWxsb3dlZCBidXQgbm8gZ2l2ZSBtZXRob2QgcGFzc2VkXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaGludHNVc2VkKys7XHJcblxyXG4gICAgICAgIHJldHVybiBoaW50cy5naXZlKGhpbnRzVXNlZCwgYW5zd2VyKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdWJtaXRzIGFuIGFuc3dlciB0byB0aGUgcXVlc3Rpb24uXHJcbiAgICAgKiBJZiB0aGUgcXVlc3Rpb24gaGFzIGFscmVhZHkgYmVlbiBhbnN3ZXJlZCBvciBubyBjaGVja0Fuc3dlciBsYW1iZGEgaGFzIGJlZW4gc2V0LCB0aGlzIG1ldGhvZCBkb2VzIG5vdGhpbmcuXHJcbiAgICAgKi9cclxuICAgIHRoaXMuYW5zd2VyID0gZnVuY3Rpb24oc3VibWl0dGVkQW5zd2VyKSB7XHJcbiAgICAgICAgaWYgKGFuc3dlcmVkIHx8IWNoZWNrQW5zd2VyKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFuc3dlcmVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy8gY2hlY2tBbnN3ZXIgbWV0aG9kIHNob3VsZCByZXR1cm4gdGhlIHN0YXR1cyByZXN1bHRzXHJcbiAgICAgICAgcG9pbnRzID0gY2hlY2tBbnN3ZXIoYW5zd2VyLCBzdWJtaXR0ZWRBbnN3ZXIsIGhpbnRzVXNlZCwgaGludHMuY29zdCwgaW5mbyk7XHJcblxyXG4gICAgICAgIC8vIGVuc3VyZSB0aGF0IG5vIG5lZ2F0aXZlIHBvaW50cyBhcmUgYXdhcmRlZFxyXG4gICAgICAgIHBvaW50cyA9IE1hdGgubWF4KDAsIHBvaW50cyk7XHJcblxyXG4gICAgICAgIHJldHVybiBwb2ludHM7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMucG9pbnRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCFhbnN3ZXJlZCB8fCBwb2ludHMgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHBvaW50cztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIHN0YXRlIG9mIHRoZSBxdWVzdGlvbi5cclxuICAgICAqL1xyXG4gICAgdGhpcy5hbnN3ZXJlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBhbnN3ZXJlZDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgaGludHMgYXJlIGFsbG93ZWQgZm9yIHRoaXMgcXVlc3Rpb24sIGZhbHNlIGlmIG5vdC5cclxuICAgICAqIElmIGhpbnRzIGhhdmUgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0LCBudWxsIGlzIHJldHVybmVkLlxyXG4gICAgICovXHJcbiAgICB0aGlzLmhpbnRzQWxsb3dlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmIChoaW50cyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaGludHMuYWxsb3dlZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiByZW1haW5pbmcgaGludHMuXHJcbiAgICAgKiBJZiBubyBoaW50cyBhcmUgYWxsb3dlZCBmb3IgdGhpcyBxdWVzdGlvbiwgbnVsbCBpcyByZXR1cm5lZC5cclxuICAgICAqL1xyXG4gICAgdGhpcy5oaW50c1JlbWFpbmluZyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBhbGxvd2VkID0gdGhpcy5oaW50c0FsbG93ZWQoKTtcclxuXHJcbiAgICAgICAgaWYgKGFsbG93ZWQgPT09IG51bGwgfHwgYWxsb3dlZCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaGludHMubWF4aW11bSAtIGhpbnRzVXNlZDtcclxuICAgIH07XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIHJhbmRvbSBpbnRlZ2VyIGJldHdlZW4gbWluIChpbmNsdXNpdmUpIGFuZCBtYXggKGluY2x1c2l2ZSlcclxuICogVXNpbmcgTWF0aC5yb3VuZCgpIHdpbGwgZ2l2ZSB5b3UgYSBub24tdW5pZm9ybSBkaXN0cmlidXRpb24hXHJcbiAqL1xyXG52YXIgZ2V0UmFuZG9tSW50ID0gZnVuY3Rpb24obWluLCBtYXgpIHtcclxuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHRleHQgYmV0d2VlbiB0d28gZGVsaW1pdGluZyB0ZXh0IG9jY3VycmVuY2VzXHJcbiAqL1xyXG52YXIgZ2V0U3RyaW5nQmV0d2VlbiA9IGZ1bmN0aW9uKHRleHQsIGZpcnN0U3RyaW5nLCBzZWNvbmRTdHJpbmcpIHtcclxuICAgIHZhciBmaXJzdFBvcyA9IHRleHQuaW5kZXhPZihmaXJzdFN0cmluZyk7XHJcbiAgICB2YXIgc2Vjb25kUG9zID0gdGV4dC5pbmRleE9mKHNlY29uZFN0cmluZyk7XHJcblxyXG4gICAgaWYgKGZpcnN0UG9zID49IDAgJiYgc2Vjb25kUG9zID49IDAgJiYgc2Vjb25kUG9zID4gZmlyc3RQb3MpIHtcclxuICAgICAgICByZXR1cm4gdGV4dC5zdWJzdHIoZmlyc3RQb3MgKyAxLCBzZWNvbmRQb3MgLSBmaXJzdFBvcyAtIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xyXG5cclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XHJcbiAgICBtb2R1bGUuZXhwb3J0cy5RdWVzdGlvbiA9IFF1ZXN0aW9uO1xyXG4gICAgbW9kdWxlLmV4cG9ydHMuUXVpeiA9IFF1aXo7XHJcbn0iLCJhbmd1bGFyLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmNvbmZpZyhmdW5jdGlvbigkbG9jYXRpb25Qcm92aWRlciwgJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xyXG4gICAgICAgIC8vIGVuYWJsZSBIVE1MNSBwdXNoc3RhdGVcclxuICAgICAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XHJcblxyXG4gICAgICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9ob21lJyk7XHJcblxyXG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnaG9tZScsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9ob21lJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2J1aWxkL3ZpZXdzL3BhcnRpYWxzL2hvbWUucGFydGlhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ3F1aXonLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvcXVpeicsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9idWlsZC92aWV3cy9wYXJ0aWFscy9xdWl6LnBhcnRpYWwuaHRtbCdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdjb3VudHJpZXMnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvY291bnRyaWVzJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2J1aWxkL3ZpZXdzL3BhcnRpYWxzL2NvdW50cmllcy5wYXJ0aWFsLmh0bWwnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnY291bnRyaWVzLmRldGFpbCcsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy86YWxwaGEzQ29kZScsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9idWlsZC92aWV3cy9wYXJ0aWFscy9jb3VudHJpZXMtZGV0YWlsLnBhcnRpYWwuaHRtbCdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdsb2dpbicsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9sb2dpbicsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9idWlsZC92aWV3cy9wYXJ0aWFscy9sb2dpbi5wYXJ0aWFsLmh0bWwnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnbG9nb3V0Jywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2xvZ291dCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTG9nb3V0Q3RybCdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdyZWdpc3RlcicsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9yZWdpc3RlcicsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9idWlsZC92aWV3cy9wYXJ0aWFscy9yZWdpc3Rlci5wYXJ0aWFsLmh0bWwnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnc2V0dGluZ3MnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvc2V0dGluZ3MnLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYnVpbGQvdmlld3MvcGFydGlhbHMvc2V0dGluZ3MucGFydGlhbC5odG1sJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2Fib3V0Jywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2Fib3V0JyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2J1aWxkL3ZpZXdzL3BhcnRpYWxzL2Fib3V0LnBhcnRpYWwuaHRtbCdcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9KTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuY29udHJvbGxlcignQ291bnRyaWVzQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgQ291bnRyeVNydikge1xyXG4gICAgICAgIHZhciBjb3VudHJpZXNCeUxldHRlciA9IG51bGw7XHJcbiAgICAgICAgdmFyIGNvdW50cnlLZXlzID0gbnVsbDtcclxuXHJcbiAgICAgICAgdmFyIGluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgY291bnRyaWVzQnlMZXR0ZXIgPSBDb3VudHJ5U3J2LmdldENvdW50cmllc0J5TGV0dGVyKCk7XHJcbiAgICAgICAgICAgIGNvdW50cnlLZXlzID0gT2JqZWN0LmtleXMoY291bnRyaWVzQnlMZXR0ZXIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCEkc2NvcGUuJCRwaGFzZSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY291bnRyeUtleXMgPSBjb3VudHJ5S2V5cztcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY291bnRyaWVzQnlMZXR0ZXIgPSBjb3VudHJpZXNCeUxldHRlcjtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvdW50cnlLZXlzID0gY291bnRyeUtleXM7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY291bnRyaWVzQnlMZXR0ZXIgPSBjb3VudHJpZXNCeUxldHRlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmIChDb3VudHJ5U3J2LmFyZUNvdW50cmllc0xvYWRlZCgpKSB7XHJcbiAgICAgICAgICAgIGluaXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRzY29wZS4kb24oJ2NvdW50cmllcy5sb2FkZWQnLCBmdW5jdGlvbigpICB7XHJcbiAgICAgICAgICAgIGluaXQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5jb250cm9sbGVyKCdDb3VudHJ5RGV0YWlsQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgQ291bnRyeVNydiwgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICAgICAgdmFyIGFscGhhM0NvZGUgPSAkc3RhdGVQYXJhbXMuYWxwaGEzQ29kZTtcclxuXHJcbiAgICAgICAgaWYgKENvdW50cnlTcnYuYXJlQ291bnRyaWVzTG9hZGVkKCkpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmNvdW50cnkgPSBDb3VudHJ5U3J2LmdldENvdW50cnlCeUFscGhhMyhhbHBoYTNDb2RlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRzY29wZS4kb24oJ2NvdW50cmllcy5sb2FkZWQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jb3VudHJ5ID0gQ291bnRyeVNydi5nZXRDb3VudHJ5QnlBbHBoYTMoYWxwaGEzQ29kZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHZhciBnZXRDb3VudHJ5RnJvbVNlcnZpY2UgPSBmdW5jdGlvbihhbHBoYTMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIENvdW50cnlTcnYuZ2V0Q291bnRyeUJ5QWxwaGEzKGFscGhhMyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLmdldENvdW50cnlGcm9tU2VydmljZSA9IGdldENvdW50cnlGcm9tU2VydmljZTtcclxuICAgIH0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5jb250cm9sbGVyKCdEcm9wZG93bkN0cmwnLCBmdW5jdGlvbigkc2NvcGUpIHtcclxuICAgICAgICB2YXIgdmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAkc2NvcGUudG9nZ2xlRHJvcGRvd24gPSB0b2dnbGVEcm9wZG93bjtcclxuICAgICAgICAkc2NvcGUuc2hvd0Ryb3Bkb3duID0gc2hvd0Ryb3Bkb3duO1xyXG4gICAgICAgICRzY29wZS5oaWRlRHJvcGRvd24gPSBoaWRlRHJvcGRvd247XHJcbiAgICAgICAgJHNjb3BlLmlzRHJvcGRvd25WaXNpYmxlID0gaXNEcm9wZG93blZpc2libGU7XHJcblxyXG4gICAgICAgICRzY29wZS5oYW5kbGVDbGlja091dHNpZGUgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNMSUNLRUQgT1VUU0lERVwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHRvZ2dsZURyb3Bkb3duKCkge1xyXG4gICAgICAgICAgICB2aXNpYmxlID0gIXZpc2libGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzaG93RHJvcGRvd24oKSB7XHJcbiAgICAgICAgICAgIHZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaGlkZURyb3Bkb3duKCkge1xyXG4gICAgICAgICAgICB2aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBpc0Ryb3Bkb3duVmlzaWJsZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZpc2libGU7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0hvbWVDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBMb2dTcnYsICRzdGF0ZVBhcmFtcykge1xyXG4gICAgICAgICRzY29wZS5tZXNzYWdlID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gY2hlY2sgc3RhdGUgcGFyYW1zXHJcbiAgICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5hY3Rpb24pIHtcclxuICAgICAgICAgICAgdmFyIGFjdGlvbiA9ICRzdGF0ZVBhcmFtcy5hY3Rpb247XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKGFjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncmVnaXN0ZXIuc3VjY2Vzc2Z1bCc6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0dyYXR1bGF0aW9uISBEaWUgQW5tZWxkdW5nIHdhciBlcmZvbGdyZWljaC4gSGVyemxpY2ggd2lsbGtvbW1lbiBiZWkgTWFnZWxsYW4uJ1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgVXNlclNydiwgRm9jdXNTcnYpIHtcclxuICAgICAgICAkc2NvcGUubWVzc2FnZSA9IG51bGw7XHJcblxyXG4gICAgICAgICRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xyXG4gICAgICAgICAgICBVc2VyU3J2LmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBpbmZvcm0gYXBwbGljYXRpb24gY29udHJvbCBhYm91dCBsb2dpbiBldmVudFxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnYXBwLmxvZ2luJywgcmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VUZXh0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyLnN0YXR1cyA9PT0gNDAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VUZXh0ID0gJ0ZhbHNjaGVyIEJlbnV0emVybmFtZSBvZGVyIFBhc3N3b3J0JztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlVGV4dCA9ICdCZWltIEVpbmxvZ2dlbiBzY2hlaW50IGV0d2FzIHNjaGllZiBnZWdhbmdlbiB6dSBzZWluJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5tZXNzYWdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBtZXNzYWdlVGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBmb2N1cyB1c2VybmFtZSBmaWVsZFxyXG4gICAgICAgIEZvY3VzU3J2KCcjdXNlcm5hbWUnKTtcclxuICAgIH0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5jb250cm9sbGVyKCdMb2dvdXRDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBVc2VyU3J2KSB7XHJcbiAgICAgICAgVXNlclNydi5sb2dvdXQoKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIC8vIGluZm9ybSBhcHBsaWNhdGlvbiBjb250cm9sIGFib3V0IGxvZ291dCBldmVudFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdhcHAubG9nb3V0Jyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmNvbnRyb2xsZXIoJ1F1aXpEaXJlY3RpdmVDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCBRdWl6U3J2LCBMb2dTcnYsIEZvY3VzU3J2LCBuZ1Byb2dyZXNzRmFjdG9yeSkge1xyXG4gICAgICAgIC8vIFByb2dyZXNzIGJhciBpbml0aWFsaXphdGlvblxyXG4gICAgICAgICRzY29wZS5wcm9ncmVzc2JhciA9IG5nUHJvZ3Jlc3NGYWN0b3J5LmNyZWF0ZUluc3RhbmNlKCk7XHJcbiAgICAgICAgJHNjb3BlLnByb2dyZXNzYmFyLnNldFBhcmVudChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVpei1wcm9ncmVzcycpKTtcclxuICAgICAgICAkc2NvcGUucHJvZ3Jlc3NiYXIuc2V0QWJzb2x1dGUoKTtcclxuICAgICAgICAkc2NvcGUucHJvZ3Jlc3NiYXIuc2V0Q29sb3IoXCIjMzM2ZTdiXCIpO1xyXG5cclxuICAgICAgICAkc2NvcGUuaXNSZXN1bHRzUGFnZVZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuYWNoaWV2ZW1lbnRzID0gW107XHJcblxyXG4gICAgICAgICRzY29wZS5hbnN3ZXJJbnB1dCA9IHt9O1xyXG4gICAgICAgICRzY29wZS5oaW50ID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gYWRkIG9wdGlvbnMgZm9yIG11bHRpcGxpZXIgc2VsZWN0aW9uXHJcbiAgICAgICAgJHNjb3BlLm11bHRpcGxpZXJPcHRpb25zID0gW1xyXG4gICAgICAgICAgICB7IHZhbHVlOiAxLCBsYWJlbDogJycgfSxcclxuICAgICAgICAgICAgeyB2YWx1ZTogMTAwMCwgbGFiZWw6ICdUc2QuJ30sXHJcbiAgICAgICAgICAgIHsgdmFsdWU6IDEwMDAwMDAsIGxhYmVsOiAnTWlvLid9XHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgdmFyIHF1ZXN0aW9uID0gbnVsbDtcclxuXHJcbiAgICAgICAgdmFyIHVwZGF0ZVVpID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIC8vIGdldCBjdXJyZW50IHF1ZXN0aW9uIGZyb20gcXVpeiBzZXJ2aWNlXHJcbiAgICAgICAgICAgIHF1ZXN0aW9uID0gUXVpelNydi5nZXRDdXJyZW50UXVlc3Rpb24oKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGRlbGV0ZSBwcmV2aW91cyBoaW50c1xyXG4gICAgICAgICAgICAkc2NvcGUuaGludCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAocXVlc3Rpb24gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIC8vIG11bHRpcGxpZXJzIGZvciBxdWVzdGlvbnMgY29udGFpbmluZyBudW1iZXJzXHJcbiAgICAgICAgICAgICAgICBpZiAocXVlc3Rpb24uZ2V0SW5mbygpLmlucHV0ICYmIHF1ZXN0aW9uLmdldEluZm8oKS5pbnB1dC5pbmRleE9mKCdudW1iZXInKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocXVlc3Rpb24uZ2V0SW5mbygpLmlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ251bWJlci5oaWdoJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbnN3ZXJJbnB1dC5tdWx0aXBsaWVyID0geyB2YWx1ZTogMTAwMDAwMCwgbGFiZWw6ICdNaW8uJ307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ251bWJlci5tZWRpdW0nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFuc3dlcklucHV0Lm11bHRpcGxpZXIgPSB7IHZhbHVlOiAxMDAwLCBsYWJlbDogJ1RzZC4nfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbnN3ZXJJbnB1dC5tdWx0aXBsaWVyID0geyB2YWx1ZTogMSwgbGFiZWw6ICcnIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hbnN3ZXJJbnB1dC5tdWx0aXBsaWVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgcHJvZ3Jlc3MgYmFyXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVQcm9ncmVzc0JhcigpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGZvY3VzIGFuc3dlciBpbnB1dFxyXG4gICAgICAgICAgICAgICAgRm9jdXNTcnYoJy5hbnN3ZXJJbnB1dCcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gcXVpeiBoYXMgZW5kZWQsIHNldCBwcm9ncmVzcyBiYXIgdG8gMFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnByb2dyZXNzYmFyLnNldCgwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRRdWVzdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcXVlc3Rpb247XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldEN1cnJlbnRRdWVzdGlvbk51bWJlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUXVpelNydi5nZXRDdXJyZW50UXVlc3Rpb25OdW1iZXIoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0TnVtYmVyT2ZRdWl6UXVlc3Rpb25zID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBRdWl6U3J2LmdldE51bWJlck9mUXVpelF1ZXN0aW9ucygpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciByZW5kZXJRdWVzdGlvblRleHQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlcihnZXRRdWVzdGlvbigpLnF1ZXN0aW9uKCksICdxdWVzdGlvbi1oaWdobGlnaHQnKSArICc/JztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0UXVlc3Rpb25NZWRpYSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoIXF1ZXN0aW9uIHx8ICFxdWVzdGlvbi5nZXRJbmZvKCkubWVkaWEpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBxdWVzdGlvbi5nZXRJbmZvKCkubWVkaWE7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHNob3dSZXN1bHRzUGFnZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuaXNSZXN1bHRzUGFnZVZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBzdWJtaXRBbnN3ZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCRzY29wZS5hbnN3ZXJJbnB1dC5hbnN3ZXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhbnN3ZXIgPSAkc2NvcGUuYW5zd2VySW5wdXQuYW5zd2VyO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGlmIGl0IGlzIGEgbnVtYmVyIGlucHV0LCByZXBsYWNlICcsJyB3aXRoICcuJ1xyXG4gICAgICAgICAgICAgICAgaWYgKHF1ZXN0aW9uLmdldEluZm8oKS5pbnB1dCAmJiBxdWVzdGlvbi5nZXRJbmZvKCkuaW5wdXQuaW5kZXhPZignbnVtYmVyJykgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBhbnN3ZXIgPSBhbnN3ZXIucmVwbGFjZSgnLCcsICcuJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gaWYgYSBtdWx0aXBsaWVyIGlzIGF2YWlsYWJsZSwgY2FsY3VsYXRlIGFuc3dlclxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hbnN3ZXJJbnB1dC5tdWx0aXBsaWVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5zd2VyICo9ICRzY29wZS5hbnN3ZXJJbnB1dC5tdWx0aXBsaWVyLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIExvZ1Nydi5pbmZvKCdzdWJtaXR0aW5nIGFuc3dlcicsIGFuc3dlcik7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYW5zd2VySW5wdXQucG9pbnRzID0gcXVlc3Rpb24uYW5zd2VyKGFuc3dlcik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gc2V0IGZvY3VzIHRvIG5leHQgcXVlc3Rpb24gYnV0dG9uXHJcbiAgICAgICAgICAgICAgICBGb2N1c1NydignI2J0bk5leHRRdWVzdGlvbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHF1ZXN0aW9uQW5zd2VyZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCFRdWl6U3J2LmlzUXVpelJ1bm5pbmcoKSB8fCBxdWVzdGlvbiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcXVlc3Rpb24uYW5zd2VyZWQoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgbmV4dFF1ZXN0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIFF1aXpTcnYubmV4dFF1ZXN0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuYW5zd2VySW5wdXQuYW5zd2VyID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgIHVwZGF0ZVVpKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHJlcXVlc3RIaW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5oaW50ID0gcXVlc3Rpb24uaGludCgpO1xyXG5cclxuICAgICAgICAgICAgRm9jdXNTcnYoJy5hbnN3ZXJJbnB1dCcpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciByZW5kZXIgPSBmdW5jdGlvbih0ZXh0LCBjbGFzc05hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRleHRcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKFwiW1wiLCBcIjxzcGFuIGNsYXNzPSdcIiArIGNsYXNzTmFtZSArIFwiJz5cIilcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKFwiXVwiLCBcIjwvc3Bhbj5cIik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGhhbmRsZUtleVByZXNzID0gZnVuY3Rpb24oa2V5RXZlbnQpIHtcclxuICAgICAgICAgICAgaWYgKGtleUV2ZW50LndoaWNoID09IDEzKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJtaXRBbnN3ZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciB1cGRhdGVQcm9ncmVzc0JhciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgcHJvZ3Jlc3NQZXJjZW50ID0gZ2V0Q3VycmVudFF1ZXN0aW9uTnVtYmVyKCkgLyBnZXROdW1iZXJPZlF1aXpRdWVzdGlvbnMoKSAqIDEwMDtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5wcm9ncmVzc2Jhci5zZXQocHJvZ3Jlc3NQZXJjZW50KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgd2FzTGFzdFF1ZXN0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRDdXJyZW50UXVlc3Rpb25OdW1iZXIoKSA+PSBnZXROdW1iZXJPZlF1aXpRdWVzdGlvbnMoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgcGFyc2VFdmVudHMgPSBmdW5jdGlvbihldmVudHMpIHtcclxuICAgICAgICAgICAgdmFyIGFjaGlldmVtZW50cyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGV2ZW50cy5pbmRleE9mKCdvdmVyYWxsX2Jlc3QnKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBhY2hpZXZlbWVudHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0R1IGhhc3QgZWluZW4gbmV1ZW4gYWJzb2x1dGVuIFJla29yZCBnZXNjaGFmZnQhJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChldmVudHMuaW5kZXhPZignb3ZlcmFsbF9iZXN0X2VxdWFsaXNlZCcpID49IDApIHtcclxuICAgICAgICAgICAgICAgIGFjaGlldmVtZW50cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnRHUgaGFzdCBkZW4gYWt0dWVsbGVuIGFic29sdXRlbiBSZWtvcmQgZWluZ2VzdGVsbHQhJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChldmVudHMuaW5kZXhPZigncGVyc29uYWxfYmVzdCcpID49IDApIHtcclxuICAgICAgICAgICAgICAgIGFjaGlldmVtZW50cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnRHUgaGFzdCBlaW5lbiBuZXVlbiBwZXJzw7ZubGljaGVuIFJla29yZCBnZXNjaGFmZnQhJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChldmVudHMuaW5kZXhPZigncGVyc29uYWxfYmVzdF9lcXVhbGlzZWQnKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBhY2hpZXZlbWVudHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0R1IGhhc3QgZ2xlaWNoIHZpZWxlIFB1bmt0ZSBnZXNjaGFmZnQgd2llIGJlaSBkZWluZW0gcGVyc8O2bmxpY2hlbiBSZWtvcmQhJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChldmVudHMuaW5kZXhPZignbmV3X2RhaWx5X2Jlc3QnKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBhY2hpZXZlbWVudHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0R1IGhhc3QgZWluZW4gbmV1ZW4gcGVyc8O2bmxpY2hlbiBUYWdlc3Jla29yZCBnZXNjaGFmZnQhJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRzY29wZS5hY2hpZXZlbWVudHMgPSBhY2hpZXZlbWVudHM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNvbnRpbnVlRmluaXNoZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc2hvd1Jlc3VsdHNQYWdlKCk7XHJcblxyXG4gICAgICAgICAgICBuZXh0UXVlc3Rpb24oKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGNvbmNsdWRlIHRoZSBxdWl6IGFuZCB3cml0ZSByZXN1bHQgdG8gZGF0YWJhc2VcclxuICAgICAgICAgICAgUXVpelNydi5jb25jbHVkZSgpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VFdmVudHMoZGF0YS5ldmVudHMgfHwgW10pO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2dTcnYuZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIGluaXRpYWxseSB1cGRhdGUgVUlcclxuICAgICAgICB1cGRhdGVVaSgpO1xyXG5cclxuICAgICAgICAkc2NvcGUuZ2V0UXVlc3Rpb24gPSBnZXRRdWVzdGlvbjtcclxuICAgICAgICAkc2NvcGUuZ2V0Q3VycmVudFF1ZXN0aW9uTnVtYmVyID0gZ2V0Q3VycmVudFF1ZXN0aW9uTnVtYmVyO1xyXG4gICAgICAgICRzY29wZS5yZW5kZXJRdWVzdGlvblRleHQgPSByZW5kZXJRdWVzdGlvblRleHQ7XHJcbiAgICAgICAgJHNjb3BlLnN1Ym1pdEFuc3dlciA9IHN1Ym1pdEFuc3dlcjtcclxuICAgICAgICAkc2NvcGUucXVlc3Rpb25BbnN3ZXJlZCA9IHF1ZXN0aW9uQW5zd2VyZWQ7XHJcbiAgICAgICAgJHNjb3BlLm5leHRRdWVzdGlvbiA9IG5leHRRdWVzdGlvbjtcclxuICAgICAgICAkc2NvcGUuaGFuZGxlS2V5UHJlc3MgPSBoYW5kbGVLZXlQcmVzcztcclxuICAgICAgICAkc2NvcGUuZ2V0UXVlc3Rpb25NZWRpYSA9IGdldFF1ZXN0aW9uTWVkaWE7XHJcbiAgICAgICAgJHNjb3BlLnJlcXVlc3RIaW50ID0gcmVxdWVzdEhpbnQ7XHJcbiAgICAgICAgJHNjb3BlLndhc0xhc3RRdWVzdGlvbiA9IHdhc0xhc3RRdWVzdGlvbjtcclxuICAgICAgICAkc2NvcGUuY29udGludWVGaW5pc2hlZCA9IGNvbnRpbnVlRmluaXNoZWQ7XHJcbiAgICB9KTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuY29udHJvbGxlcignUXVpekN0cmwnLCBmdW5jdGlvbigkc2NvcGUsIFF1aXpTcnYsIExvZ1Nydikge1xyXG5cclxuICAgICAgICB2YXIgc3RhcnRRdWl6ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIFF1aXpTcnYuaW5pdCgpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2dTcnYuaW5mbyhcIlF1aXogc3RhcnRlZFwiKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgaXNRdWl6UnVubmluZyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUXVpelNydi5pc1F1aXpSdW5uaW5nKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGhhc1F1aXpTdGFydGVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBRdWl6U3J2Lmhhc1F1aXpTdGFydGVkKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGhhc1F1aXpFbmRlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUXVpelNydi5oYXNRdWl6RW5kZWQoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0VG90YWxQb2ludHMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFF1aXpTcnYuZ2V0VG90YWxQb2ludHMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRzY29wZS5zdGFydFF1aXogPSBzdGFydFF1aXo7XHJcbiAgICAgICAgJHNjb3BlLmlzUXVpelJ1bm5pbmcgPSBpc1F1aXpSdW5uaW5nO1xyXG4gICAgICAgICRzY29wZS5oYXNRdWl6U3RhcnRlZCA9IGhhc1F1aXpTdGFydGVkO1xyXG4gICAgICAgICRzY29wZS5oYXNRdWl6RW5kZWQgPSBoYXNRdWl6RW5kZWQ7XHJcbiAgICAgICAgJHNjb3BlLmdldFRvdGFsUG9pbnRzID0gZ2V0VG90YWxQb2ludHM7XHJcbiAgICB9KTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBMb2dTcnYsIEZvY3VzU3J2LCBVc2VyU3J2LCAkc3RhdGUsICR3aW5kb3cpIHtcclxuICAgICAgICAvLyBuZXcgdXNlciBvYmplY3RcclxuICAgICAgICAkc2NvcGUubmV3VXNlciA9IHt9O1xyXG5cclxuICAgICAgICAvLyBtZXNzYWdlIG9iamVjdFxyXG4gICAgICAgICRzY29wZS5tZXNzYWdlID0gbnVsbDtcclxuXHJcbiAgICAgICAgdmFyIHJlZ2lzdGVyID0gZnVuY3Rpb24gKGlzVmFsaWQpIHtcclxuICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh2YWxpZGF0ZUJlZm9yZVN1Ym1pdCgpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBwZXJmb3JtIGFwaSBjYWxsXHJcbiAgICAgICAgICAgICAgICBVc2VyU3J2LnJlZ2lzdGVyKCRzY29wZS5uZXdVc2VyKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5mb3JtIGFwcCBjb250cm9sbGVyIGFib3V0IGxvZ2luXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2FwcC5sb2dpbicsIHJlc3BvbnNlLmRhdGEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlZGlyZWN0IHRvIGhvbWUgcGFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdob21lJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3JlZ2lzdGVyLnN1Y2Nlc3NmdWwnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tZXNzYWdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0JlaSBkZXIgQW5tZWxkdW5nIHNjaGVpbnQgZXR3YXMgc2NoaWVmIGdlZ2FuZ2VuIHp1IHNlaW4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmVycm9yKGVycik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZVRleHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGVyci5tZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdVc2VybmFtZSBhbHJlYWR5IGV4aXN0cyc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVRleHQgPSAnRGVyIEJlbnV0emVybmFtZSBleGlzdGllcnQgYmVyZWl0cyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlVGV4dCA9ICdCZWkgZGVyIEFubWVsZHVuZyBzY2hlaW50IGV0d2FzIHNjaGllZiBnZWdhbmdlbiB6dSBzZWluJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUuJCRwaGFzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVzc2FnZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogbWVzc2FnZVRleHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVzc2FnZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG1lc3NhZ2VUZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgdmFsaWRhdGVCZWZvcmVTdWJtaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHR3byBwYXNzd29yZHMgbWF0Y2hcclxuICAgICAgICAgICAgdmFyIHBhc3N3b3JkID0gJHNjb3BlLm5ld1VzZXIucGFzc3dvcmQ7XHJcbiAgICAgICAgICAgIHZhciBwYXNzd29yZDIgPSAkc2NvcGUubmV3VXNlci5wYXNzd29yZDI7XHJcblxyXG4gICAgICAgICAgICBpZiAoISRzY29wZS5uZXdVc2VyLnVzZXJuYW1lIHx8ICEkc2NvcGUubmV3VXNlci5lbWFpbCB8fCAhcGFzc3dvcmQgfHwgIXBhc3N3b3JkMikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnQWxsZSBGZWxkZXIgbcO8c3NlbiBhdXNnZWbDvGxsdCBzZWluJ1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXNzd29yZCA9PT0gXCJcIiB8fCBwYXNzd29yZDIgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5tZXNzYWdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0RpZSBQYXNzd8O2cnRlciBrw7ZubmVuIG5pY2h0IGxlZXIgc2VpbidcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFzc3dvcmQgIT09IHBhc3N3b3JkMikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnRGllIFBhc3N3w7ZydGVyIHN0aW1tZW4gbmljaHQgw7xiZXJlaW4nXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gISRzY29wZS5tZXNzYWdlID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBkZWxlZ2F0ZVN1Ym1pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZWdpc3Rlcih0cnVlKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUuZGVsZWdhdGVTdWJtaXQgPSBkZWxlZ2F0ZVN1Ym1pdDtcclxuXHJcbiAgICAgICAgJHNjb3BlLnJlZ2lzdGVyID0gcmVnaXN0ZXI7XHJcblxyXG4gICAgICAgIC8vIGZvY3VzIHVzZXIgbmFtZSBmaWVsZFxyXG4gICAgICAgIEZvY3VzU3J2KCcjdXNlcm5hbWUnKTtcclxuICAgIH0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5jb250cm9sbGVyKCdTZXR0aW5nc0N0cmwnLCBmdW5jdGlvbigkc2NvcGUsIEFwcENvbmZpZywgRm9jdXNTcnYsIExvZ1NydiwgVXNlclNydikge1xyXG4gICAgICAgIHZhciBpbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5tZXNzYWdlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIC8vIHVzZXIgY29sb3Vyc1xyXG4gICAgICAgICAgICB2YXIgY29sb3JzID0gQXBwQ29uZmlnWydzZXR0aW5ncy51c2VyLmNvbG9ycyddO1xyXG5cclxuICAgICAgICAgICAgLy8gdXNlciBvYmplY3RcclxuICAgICAgICAgICAgJHNjb3BlLnVzZXJPYmogPSB7XHJcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogJHNjb3BlLnVzZXIudXNlcm5hbWUsXHJcbiAgICAgICAgICAgICAgICBlbWFpbDogJHNjb3BlLnVzZXIuZW1haWwsXHJcbiAgICAgICAgICAgICAgICBjb2xvcjogJHNjb3BlLnVzZXIuY29sb3JcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS51c2VyQ29sb3JzID0gY29sb3JzO1xyXG5cclxuICAgICAgICAgICAgdmFyIHNldENvbG9yID0gZnVuY3Rpb24obmV3Q29sb3IpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS51c2VyT2JqLmNvbG9yID0gbmV3Q29sb3I7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB2YXIgdXBkYXRlVXNlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgVXNlclNydi51cGRhdGVCYXNpYygkc2NvcGUudXNlck9iaikudGhlbihmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHVzZXIgb2JqZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVzZXIudXNlcm5hbWUgPSAkc2NvcGUudXNlck9iai51c2VybmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXNlci5lbWFpbCA9ICRzY29wZS51c2VyT2JqLmVtYWlsO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS51c2VyLmNvbG9yID0gJHNjb3BlLnVzZXJPYmouY29sb3I7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tZXNzYWdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0VpbnN0ZWxsdW5nZW4gd3VyZGVuIGVyZm9sZ3JlaWNoIGdlc3BlaWNoZXJ0J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmVycm9yKCdVcGRhdGUgdXNlcicsIGVycik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlVGV4dDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlcnIubWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdVc2VybmFtZSBhbHJlYWR5IGV4aXN0cyc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlVGV4dCA9ICdEZXIgQmVudXR6ZXJuYW1lIGlzdCBiZXJlaXRzIHZlcmdlYmVuJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VUZXh0ID0gJ0RpZSBFaW5zdGVsbHVuZ2VuIGtvbm50ZW4gbmljaHQgZ2VzcGVpY2hlcnQgd2VyZGVuJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogbWVzc2FnZVRleHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdmFyIGRlbGVnYXRlU3VibWl0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVVc2VyKHRydWUpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLnNldENvbG9yID0gc2V0Q29sb3I7XHJcbiAgICAgICAgICAgICRzY29wZS51cGRhdGVVc2VyID0gdXBkYXRlVXNlcjtcclxuICAgICAgICAgICAgJHNjb3BlLmRlbGVnYXRlU3VibWl0ID0gZGVsZWdhdGVTdWJtaXQ7XHJcblxyXG4gICAgICAgICAgICAvLyBmb2N1cyB1c2VybmFtZSBmaWVsZFxyXG4gICAgICAgICAgICBGb2N1c1NydignI3VzZXJuYW1lJyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKCRzY29wZS51c2VyKSB7XHJcbiAgICAgICAgICAgIGluaXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG90aGVyd2lzZSwgd2FpdCBmb3IgdXNlci5sb2FkZWQgZXZlbnRcclxuICAgICAgICAkc2NvcGUuJG9uKCd1c2VyLmxvYWRlZCcsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgICAgICAgIGluaXQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5kaXJlY3RpdmUoJ3F1aXonLCBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2J1aWxkL3ZpZXdzL3RlbXBsYXRlcy9xdWl6LWRpcmVjdGl2ZS50ZW1wbGF0ZS5odG1sJyxcclxuICAgICAgICAgICAgc2NvcGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdRdWl6RGlyZWN0aXZlQ29udHJvbGxlcicsXHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSkiLCIndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuZmlsdGVyKCdyZW5kZXJIdG1sJywgZnVuY3Rpb24oJHNjZSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0ZXh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkc2NlLnRydXN0QXNIdG1sKHRleHQpO1xyXG4gICAgICAgIH07XHJcbiAgICB9KTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuZmFjdG9yeSgnQXV0aEludGVyY2VwdG9yJywgZnVuY3Rpb24oQXV0aFRva2VuU3J2KSB7XHJcbiAgICAgICAgdmFyIGFkZFRva2VuID0gZnVuY3Rpb24oY29uZmlnKSB7XHJcbiAgICAgICAgICAgIHZhciB0b2tlbiA9IEF1dGhUb2tlblNydi5nZXRUb2tlbigpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRva2VuKSB7XHJcbiAgICAgICAgICAgICAgICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgY29uZmlnLmhlYWRlcnNbJ1gtQXV0aCddID0gdG9rZW47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjb25maWc7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVxdWVzdDogYWRkVG9rZW5cclxuICAgICAgICB9O1xyXG4gICAgfSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmZhY3RvcnkoJ0F1dGhUb2tlblNydicsIGZ1bmN0aW9uKCR3aW5kb3cpIHtcclxuICAgICAgICB2YXIgc3RvcmUgPSAkd2luZG93LnNlc3Npb25TdG9yYWdlO1xyXG4gICAgICAgIHZhciBrZXkgPSAnYXV0aC10b2tlbic7XHJcblxyXG4gICAgICAgIHZhciBnZXRUb2tlbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RvcmUuZ2V0SXRlbShrZXkpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBzZXRUb2tlbiA9IGZ1bmN0aW9uKHRva2VuKSB7XHJcbiAgICAgICAgICAgIGlmICh0b2tlbikge1xyXG4gICAgICAgICAgICAgICAgc3RvcmUuc2V0SXRlbShrZXksIHRva2VuKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN0b3JlLnJlbW92ZUl0ZW0oa2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGdldFRva2VuOiBnZXRUb2tlbixcclxuICAgICAgICAgICAgc2V0VG9rZW46IHNldFRva2VuXHJcbiAgICAgICAgfTtcclxuICAgIH0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5mYWN0b3J5KCdDb3VudHJ5U3J2JywgZnVuY3Rpb24oJGh0dHAsIEluZGV4ZWREQlNydiwgTG9nU3J2KSB7XHJcbiAgICAgICAgLy8gQ291bnRyaWVzIGFycmF5XHJcbiAgICAgICAgdmFyIGNvdW50cmllcyA9IG51bGw7XHJcblxyXG4gICAgICAgIHZhciBjb3VudHJpZXNCeUFscGhhMyA9IG51bGw7XHJcbiAgICAgICAgdmFyIGNvdW50cmllc0J5TGV0dGVyID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gSW5kZXhlZERCXHJcbiAgICAgICAgdmFyIGRhdGFiYXNlID0gJ21hZ2VsbGFuJztcclxuICAgICAgICB2YXIgc3RvcmUgPSAnY291bnRyeVN0b3JlJztcclxuICAgICAgICB2YXIga2V5Q291bnRyaWVzID0gJ2NvdW50cmllcyc7XHJcbiAgICAgICAgdmFyIGtleVZlcnNpb24gPSAndmVyc2lvbic7XHJcblxyXG4gICAgICAgIHZhciBpbmRleGVkREJBdmFpbGFibGUgPSBJbmRleGVkREJTcnYuaW5kZXhlZERCQXZhaWxhYmxlKCk7XHJcblxyXG4gICAgICAgIHZhciBpbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsb2FkQ291bnRyaWVzKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGxvYWRDb3VudHJpZXMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgaW5kZXhlZERCIGlzIGF2YWlsYWJsZVxyXG4gICAgICAgICAgICBpZiAoaW5kZXhlZERCQXZhaWxhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGRhdGFiYXNlIGV4aXN0c1xyXG4gICAgICAgICAgICAgICAgICAgIEluZGV4ZWREQlNydi5jcmVhdGVEYXRhYmFzZShkYXRhYmFzZSwgc3RvcmUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGdldEVtcHR5T2JqZWN0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihnZXRJbnRlcm5hbFZlcnNpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGdldEV4dGVybmFsVmVyc2lvbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZGV0ZXJtaW5lTG9hZFN0cmF0ZWd5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihsb2FkRGF0YSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJpZXMgPSBvYmpbJ2NvdW50cmllcyddO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ1Nydi5pbmZvKFwibG9hZGVkIGNvdW50cmllcyBmcm9tXCIsIG9ialsnbG9hZFN0cmF0ZWd5J10udG9VcHBlckNhc2UoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkaXRpb25hbGx5IG1hcCBjb3VudHJpZXMgYnkgdmFyaW91cyBwcm9wZXJ0aWVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJpZXNCeUFscGhhMyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyaWVzQnlMZXR0ZXIgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJpZXMuZm9yRWFjaChmdW5jdGlvbihjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnkgYWxwaGEzIGNvZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJpZXNCeUFscGhhM1tjWydhbHBoYTNDb2RlJ11dID0gYztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnkgbGV0dGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0TGV0dGVyID0gY1snbmFtZSddLnN1YnN0cigwLCAxKS50b1VwcGVyQ2FzZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGZpcnN0TGV0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ8OEJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0TGV0dGVyID0gJ0EnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICfDlic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdExldHRlciA9ICdPJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnw5wnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RMZXR0ZXIgPSAnVSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY291bnRyaWVzQnlMZXR0ZXJbZmlyc3RMZXR0ZXJdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyaWVzQnlMZXR0ZXJbZmlyc3RMZXR0ZXJdID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJpZXNCeUxldHRlcltmaXJzdExldHRlcl0ucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFscGhhM0NvZGU6IGMuYWxwaGEzQ29kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogYy5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGNvdW50cmllcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ1Nydi5lcnJvcihcImZhaWxlZCB0byBsb2FkIGNvdW50cmllc1wiLCBlcnIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgbm90LCB3ZSBhbHdheXMgdHJ5IHRvIGRvd25sb2FkIGl0IGZyb20gdGhlIGNvdW50cnkgQVBJIGVuZHBvaW50XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q291bnRyaWVzRnJvbUFQSSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGRldGVybWluZUxvYWRTdHJhdGVneSA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RyYXRlZ3k7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGludGVybmFsVmVyc2lvbiA9IG9ialtcImludGVybmFsVmVyc2lvblwiXTtcclxuICAgICAgICAgICAgICAgIHZhciBleHRlcm5hbFZlcnNpb24gPSBvYmpbXCJleHRlcm5hbFZlcnNpb25cIl07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGludGVybmFsVmVyc2lvbiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmF0ZWd5ID0gJ2FwaSc7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV4dGVybmFsVmVyc2lvbiA+IGludGVybmFsVmVyc2lvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmF0ZWd5ID0gJ2FwaSc7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmF0ZWd5ID0gJ2RiJztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBvYmpbJ2xvYWRTdHJhdGVneSddID0gc3RyYXRlZ3k7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShvYmopO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgbG9hZERhdGEgPSBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0cmF0ZWd5ID0gb2JqWydsb2FkU3RyYXRlZ3knXTtcclxuXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHN0cmF0ZWd5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXBpJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Q291bnRyaWVzRnJvbUFQSSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihjb3VudHJpZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpbXCJjb3VudHJpZXNcIl0gPSBjb3VudHJpZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0b3JlIGNvdW50cmllcyBhbmQgdmVyc2lvbiBudW1iZXIgaW4gZGF0YWJhc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbmRleGVkREJTcnYucHV0SXRlbShkYXRhYmFzZSwgc3RvcmUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5Q291bnRyaWVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIGNvdW50cmllc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbmRleGVkREJTcnYucHV0SXRlbShkYXRhYmFzZSwgc3RvcmUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5VmVyc2lvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG9ialtcImV4dGVybmFsVmVyc2lvblwiXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGInOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRDb3VudHJpZXNGcm9tREIob2JqKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oX29iaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoX29iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCdVbmtub3duIGxvYWQgc3RyYXRlZ3knKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldEVtcHR5T2JqZWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoe30pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0SW50ZXJuYWxWZXJzaW9uID0gZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIEluZGV4ZWREQlNydi5yZXRyaWV2ZUl0ZW0oZGF0YWJhc2UsIHN0b3JlLCBrZXlWZXJzaW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqW1wiaW50ZXJuYWxWZXJzaW9uXCJdID0gaXRlbS52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUob2JqKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqW1wiaW50ZXJuYWxWZXJzaW9uXCJdID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUob2JqKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldEV4dGVybmFsVmVyc2lvbiA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0VmVyc2lvbkZyb21BUEkoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24odmVyc2lvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIG9ialtcImV4dGVybmFsVmVyc2lvblwiXSA9IHZlcnNpb247XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0Q291bnRyaWVzRnJvbURCID0gZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIEluZGV4ZWREQlNydi5yZXRyaWV2ZUl0ZW0oZGF0YWJhc2UsIHN0b3JlLCBrZXlDb3VudHJpZXMpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmpbXCJjb3VudHJpZXNcIl0gPSBpdGVtLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRDb3VudHJpZXNGcm9tQVBJID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICRodHRwLmdldCgnL2FwaS9jb3VudHJpZXMnKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0VmVyc2lvbkZyb21BUEkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL2NvdW50cmllcy92ZXJzaW9uJylcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlLmRhdGEudmVyc2lvbiB8fCAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgwKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldENvdW50cnlCeUFscGhhMyA9IGZ1bmN0aW9uKGFscGhhMykge1xyXG4gICAgICAgICAgICBpZiAoY291bnRyaWVzQnlBbHBoYTMgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY291bnRyaWVzQnlBbHBoYTNbYWxwaGEzXTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0Q291bnRyaWVzQnlMZXR0ZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKGNvdW50cmllc0J5TGV0dGVyID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNvdW50cmllc0J5TGV0dGVyO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBhcmVDb3VudHJpZXNMb2FkZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvdW50cmllcyAhPT0gbnVsbCAmJiBjb3VudHJpZXMubGVuZ3RoID4gMDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpbml0OiBpbml0LFxyXG4gICAgICAgICAgICBnZXRDb3VudHJ5QnlBbHBoYTM6IGdldENvdW50cnlCeUFscGhhMyxcclxuICAgICAgICAgICAgZ2V0Q291bnRyaWVzQnlMZXR0ZXI6IGdldENvdW50cmllc0J5TGV0dGVyLFxyXG4gICAgICAgICAgICBhcmVDb3VudHJpZXNMb2FkZWQ6IGFyZUNvdW50cmllc0xvYWRlZFxyXG4gICAgICAgIH07XHJcbiAgICB9KTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuZmFjdG9yeSgnRm9jdXNTcnYnLCBmdW5jdGlvbigkdGltZW91dCwgJHdpbmRvdykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbihzZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAvLyB0aW1lb3V0IG1ha2VzIHN1cmUgdGhhdCBpcyBpbnZva2VkIGFmdGVyIGFueSBvdGhlciBldmVudCBoYXMgYmVlbiB0cmlnZ2VyZWQuXHJcbiAgICAgICAgICAgIC8vIGUuZy4gY2xpY2sgZXZlbnRzIHRoYXQgbmVlZCB0byBydW4gYmVmb3JlIHRoZSBmb2N1cyBvclxyXG4gICAgICAgICAgICAvLyBpbnB1dHMgZWxlbWVudHMgdGhhdCBhcmUgaW4gYSBkaXNhYmxlZCBzdGF0ZSBidXQgYXJlIGVuYWJsZWQgd2hlbiB0aG9zZSBldmVudHNcclxuICAgICAgICAgICAgLy8gYXJlIHRyaWdnZXJlZC5cclxuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9ICR3aW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9KTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuZmFjdG9yeSgnSW5kZXhlZERCU3J2JywgZnVuY3Rpb24oJHdpbmRvdykge1xyXG4gICAgICAgIHZhciBrZXlQYXRoID0gJ25hbWUnO1xyXG5cclxuICAgICAgICB2YXIgaW5kZXhlZERCID0gJHdpbmRvdy5pbmRleGVkREIgfHwgJHdpbmRvdy53ZWJraXRJbmRleGVkREIgfHwgJHdpbmRvdy5tc0luZGV4ZWREQjtcclxuICAgICAgICB2YXIgSURCS2V5UmFuZ2UgPSAkd2luZG93LklEQktleVJhbmdlIHx8ICR3aW5kb3cud2Via2l0SURCS2V5UmFuZ2U7XHJcblxyXG4gICAgICAgIHZhciBJREJUcmFuc2FjdGlvbiA9ICR3aW5kb3cuSURCVHJhbnNhY3Rpb24gfHwgJHdpbmRvdy53ZWJraXRJREJUcmFuc2FjdGlvbjtcclxuXHJcbiAgICAgICAgaWYgKElEQlRyYW5zYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIElEQlRyYW5zYWN0aW9uLlJFQURfV1JJVEUgPSBJREJUcmFuc2FjdGlvbi5SRUFEX1dSSVRFIHx8ICdyZWFkd3JpdGUnO1xyXG4gICAgICAgICAgICBJREJUcmFuc2FjdGlvbi5SRUFEX09OTFkgPSBJREJUcmFuc2FjdGlvbi5SRUFEX09OTFkgfHwgJ3JlYWRvbmx5JztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBpbmRleGVkREJBdmFpbGFibGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGluZGV4ZWREQiA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY3JlYXRlRGF0YWJhc2UgPSBmdW5jdGlvbihkYk5hbWUsIHN0b3JlTmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKGRiTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbnVwZ3JhZGVuZWVkZWQgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZSBpcyBhbiBpbnN0YW5jZSBvZiBJREJWZXJzaW9uQ2hhbmdlRXZlbnRcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaWRiID0gZS50YXJnZXQucmVzdWx0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcmUgPSBpZGIuY3JlYXRlT2JqZWN0U3RvcmUoc3RvcmVOYW1lLCB7IGtleVBhdGg6IGtleVBhdGggfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCwgdXBkYXRlLCBkZWxldGVcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGUpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIGVycm9yXHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGRyb3BEYXRhYmFzZSA9IGZ1bmN0aW9uKGRiTmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdCA9IGluZGV4ZWREQi5kZWxldGVEYXRhYmFzZShkYk5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRyb3Agc3VjY2Vzc2Z1bFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBkcm9wIGZhaWxlZFxyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBhZGRJdGVtID0gZnVuY3Rpb24oZGJOYW1lLCBzdG9yZU5hbWUsIGl0ZW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihkYk5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZGIgPSBlLnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zYWN0aW9uID0gaWRiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgSURCVHJhbnNhY3Rpb24uUkVBRF9XUklURSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoc3RvcmVOYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcXVlc3RBZGQgPSBzdG9yZS5hZGQoaXRlbSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBZGQub25zdWNjZXNzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBZGQub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgcHV0SXRlbSA9IGZ1bmN0aW9uKGRiTmFtZSwgc3RvcmVOYW1lLCBpdGVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4oZGJOYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaWRiID0gZS50YXJnZXQucmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2FjdGlvbiA9IGlkYi50cmFuc2FjdGlvbihzdG9yZU5hbWUsIElEQlRyYW5zYWN0aW9uLlJFQURfV1JJVEUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHN0b3JlTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0QWRkID0gc3RvcmUucHV0KGl0ZW0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0QWRkLm9uc3VjY2VzcyA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShlKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0QWRkLm9uZXJyb3IgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHJldHJpZXZlSXRlbSA9IGZ1bmN0aW9uKGRiTmFtZSwgc3RvcmVOYW1lLCBpdGVtTmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihkYk5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZGIgPSBlLnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zYWN0aW9uID0gaWRiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgSURCVHJhbnNhY3Rpb24uUkVBRF9PTkxZKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShzdG9yZU5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBJREJLZXlSYW5nZS5vbmx5KGl0ZW1OYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3RvcmUub3BlbkN1cnNvcihyYW5nZSkub25zdWNjZXNzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3Vyc29yID0gZS50YXJnZXQucmVzdWx0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnNvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSA9IGN1cnNvci52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3IuY29udGludWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgcmV0cmlldmVJdGVtcyA9IGZ1bmN0aW9uKGRiTmFtZSwgc3RvcmVOYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4oZGJOYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaWRiID0gZS50YXJnZXQucmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2FjdGlvbiA9IGlkYi50cmFuc2FjdGlvbihzdG9yZU5hbWUsIElEQlRyYW5zYWN0aW9uLlJFQURfT05MWSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoc3RvcmVOYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3RvcmUub3BlbkN1cnNvcigpLm9uc3VjY2VzcyA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnNvciA9IGUudGFyZ2V0LnJlc3VsdDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJzb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goY3Vyc29yLnZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3IuY29udGludWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoaXRlbXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY3JlYXRlRGF0YWJhc2U6IGNyZWF0ZURhdGFiYXNlLFxyXG4gICAgICAgICAgICBkcm9wRGF0YWJhc2U6IGRyb3BEYXRhYmFzZSxcclxuICAgICAgICAgICAgYWRkSXRlbTogYWRkSXRlbSxcclxuICAgICAgICAgICAgcHV0SXRlbTogcHV0SXRlbSxcclxuICAgICAgICAgICAgcmV0cmlldmVJdGVtOiByZXRyaWV2ZUl0ZW0sXHJcbiAgICAgICAgICAgIHJldHJpZXZlSXRlbXM6IHJldHJpZXZlSXRlbXMsXHJcbiAgICAgICAgICAgIGluZGV4ZWREQkF2YWlsYWJsZTogaW5kZXhlZERCQXZhaWxhYmxlXHJcbiAgICAgICAgfTtcclxuICAgIH0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5mYWN0b3J5KCdMb2dTcnYnLCBmdW5jdGlvbihBcHBDb25maWcpIHtcclxuICAgICAgICB2YXIgbG9nSW5mbyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoQXBwQ29uZmlnW1wibG9nLmluZm9cIl0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgbG9nRXJyb3IgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKEFwcENvbmZpZ1tcImxvZy5lcnJvclwiXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaW5mbzogbG9nSW5mbyxcclxuICAgICAgICAgICAgZXJyb3I6IGxvZ0Vycm9yXHJcbiAgICAgICAgfTtcclxuICAgIH0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5mYWN0b3J5KCdRdWl6U3J2JywgZnVuY3Rpb24oQXBwQ29uZmlnLCBDb3VudHJ5U3J2LCBTY29yZVNydiwgTG9nU3J2KSB7XHJcbiAgICAgICAgdmFyIGNvdW50cmllcyA9IG51bGw7XHJcbiAgICAgICAgdmFyIGNvdW50cmllc0J5QWxwaGEzID0gbnVsbDtcclxuXHJcbiAgICAgICAgdmFyIHF1aXogPSBudWxsO1xyXG5cclxuICAgICAgICB2YXIgc2V0Q291bnRyaWVzID0gZnVuY3Rpb24oX2NvdW50cmllcykge1xyXG4gICAgICAgICAgICBjb3VudHJpZXMgPSBfY291bnRyaWVzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjb3VudHJpZXNMb2FkZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvdW50cmllcyAhPT0gbnVsbCAmJiBjb3VudHJpZXMubGVuZ3RoID4gMDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNvdW50cmllc0xvYWRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChcIkNvdW50cmllcyBoYXZlIG5vdCBiZWVuIGxvYWRlZFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBxdWl6ID0gY3JlYXRlUXVpeignY291bnRyeScpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlc29sdmUocXVpei5zdGFydCgpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGlzUXVpelJ1bm5pbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHF1aXogPT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcXVpei5oYXNTdGFydGVkKCkgJiYgIXF1aXouaGFzRW5kZWQoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgaGFzUXVpelN0YXJ0ZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHF1aXogPT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcXVpei5oYXNTdGFydGVkKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGhhc1F1aXpFbmRlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAocXVpeiA9PT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBxdWl6Lmhhc0VuZGVkKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNyZWF0ZVF1aXogPSBmdW5jdGlvbihxdWl6VHlwZSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHF1aXpUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjb3VudHJ5JzpcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNvdW50cnlRdWl6KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY3JlYXRlQ291bnRyeVF1aXogPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGNvdW50cnlRdWl6ID0gbmV3IFF1aXooKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBmdWxsUG9pbnRzID0gMTAwO1xyXG4gICAgICAgICAgICB2YXIgaGludE1heGltdW0gPSAzO1xyXG4gICAgICAgICAgICB2YXIgaGludENvc3QgPSAyNTtcclxuXHJcbiAgICAgICAgICAgIHZhciBsYXN0UXVlc3Rpb25Cb251cyA9IDIuNTtcclxuXHJcbiAgICAgICAgICAgIHZhciBxdWVzdGlvblR5cGVzID0gQXBwQ29uZmlnWydxdWl6LmNvdW50cnkudHlwZXMnXTtcclxuICAgICAgICAgICAgdmFyIHF1ZXN0aW9uVHlwZXNMZW5ndGggPSBPYmplY3Qua2V5cyhxdWVzdGlvblR5cGVzKS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAvLyBzZWxlY3QgY291bnRyaWVzIGZvciBxdWVzdGlvbnNcclxuICAgICAgICAgICAgdmFyIHNlbGVjdGVkQ291bnRyaWVzID0gW107XHJcbiAgICAgICAgICAgIHZhciBudW1iZXJPZlF1ZXN0aW9ucyA9IEFwcENvbmZpZ1sncXVpei5jb3VudHJ5LnF1ZXN0aW9ucyddO1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXJPZlF1ZXN0aW9uczsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY291bnRyeU9rID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKCFjb3VudHJ5T2spIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY291bnRyeSA9IGNvdW50cmllc1tnZXRSYW5kb21JbnQoMCwgY291bnRyaWVzLmxlbmd0aCAtIDEpXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY291bnRyeU9rID0gc2VsZWN0ZWRDb3VudHJpZXMuaW5kZXhPZihjb3VudHJ5WydhbHBoYTNDb2RlJ10pIDwgMDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRDb3VudHJpZXMucHVzaChjb3VudHJ5WydhbHBoYTNDb2RlJ10pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBjcmVhdGUgcXVlc3Rpb25zIGZvciBxdWl6XHJcbiAgICAgICAgICAgIHZhciBxY250ID0gMDtcclxuICAgICAgICAgICAgc2VsZWN0ZWRDb3VudHJpZXMuZm9yRWFjaChmdW5jdGlvbihhbHBoYTMpIHtcclxuICAgICAgICAgICAgICAgIHFjbnQrKztcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgY291bnRyeSA9IENvdW50cnlTcnYuZ2V0Q291bnRyeUJ5QWxwaGEzKGFscGhhMyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHF1ZXN0aW9uVHlwZSA9IHF1ZXN0aW9uVHlwZXNbZ2V0UmFuZG9tSW50KDEsIHF1ZXN0aW9uVHlwZXNMZW5ndGgpXTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IGdldFF1ZXN0aW9uVGV4dChxdWVzdGlvblR5cGUsIGNvdW50cnkpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZm8gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogcXVlc3Rpb25UeXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0OiBnZXRRdWVzdGlvbklucHV0KHF1ZXN0aW9uVHlwZSksXHJcbiAgICAgICAgICAgICAgICAgICAgdW5pdDogZ2V0UXVlc3Rpb25Vbml0KHF1ZXN0aW9uVHlwZSlcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB2YXIgYW5zd2VyID0gZ2V0UXVlc3Rpb25BbnN3ZXIocXVlc3Rpb25UeXBlLCBjb3VudHJ5KTtcclxuICAgICAgICAgICAgICAgIHZhciBjaGVja0Fuc3dlciA9IGdldENoZWNrQW5zd2VyTGFtYmRhKHF1ZXN0aW9uVHlwZSwgZnVsbFBvaW50cywgbGFzdFF1ZXN0aW9uQm9udXMpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGhpbnRzID0gZ2V0UXVlc3Rpb25IaW50cyhxdWVzdGlvblR5cGUsIGhpbnRNYXhpbXVtLCBoaW50Q29zdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIGxhc3QgcXVlc3Rpb24gaXMgdGhlIGJvbnVzIHF1ZXN0aW9uXHJcbiAgICAgICAgICAgICAgICBpZiAocWNudCA+PSBudW1iZXJPZlF1ZXN0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZm9bJ2JvbnVzJ10gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIGFkZCBpbmZvIGZvciBmbGFnIG9mIGNvdW50cnlcclxuICAgICAgICAgICAgICAgIGlmIChxdWVzdGlvblR5cGUgPT09ICdGTEFHX09GX0NPVU5UUlknKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5mby5tZWRpYSA9ICdmbGFnJztcclxuICAgICAgICAgICAgICAgICAgICBpbmZvLmFscGhhMkNvZGUgPSBjb3VudHJ5LmFscGhhMkNvZGUudG9Mb2NhbGVMb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb3VudHJ5UXVpei5hZGRRdWVzdGlvbihuZXcgUXVlc3Rpb24oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5mbzogaW5mbyxcclxuICAgICAgICAgICAgICAgICAgICBhbnN3ZXI6IGFuc3dlcixcclxuICAgICAgICAgICAgICAgICAgICBjaGVja0Fuc3dlcjogY2hlY2tBbnN3ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgaGludHM6IGhpbnRzXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNvdW50cnlRdWl6O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRRdWVzdGlvblRleHQgPSBmdW5jdGlvbih0eXBlLCBjb3VudHJ5KSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnQ0FQSVRBTF9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJXaWUgaGVpw590IGRpZSBIYXVwdHN0YWR0IHZvbiBbXCIgKyBjb3VudHJ5Lm5hbWUgKyBcIl1cIjtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdDT1VOVFJZX09GX0NBUElUQUwnOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIltcIiArIGNvdW50cnkuY2FwaXRhbCArIFwiXSBpc3QgZGllIEhhdXB0c3RhZHQgdm9uIHdlbGNoZW0gTGFuZFwiXHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnUE9QVUxBVElPTl9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJXaWUgdmllbGUgTWVuc2NoZW4gbGViZW4gaW4gW1wiICsgY291bnRyeS5uYW1lICsgXCJdXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnQVJFQV9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJXaWUgZ3Jvw58gaXN0IGRpZSBGbMOkY2hlIHZvbiBbXCIgKyBjb3VudHJ5Lm5hbWUgKyBcIl1cIjtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdGTEFHX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIldlbGNoZXMgTGFuZCBoYXQgZGllc2UgRmxhZ2dlXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCI/XCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRRdWVzdGlvbkFuc3dlciA9IGZ1bmN0aW9uKHR5cGUsIGNvdW50cnkpIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdDQVBJVEFMX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbHRTcGVsbGluZ3MgPSBjb3VudHJ5LmFsdFNwZWxsaW5ncyAhPT0gdW5kZWZpbmVkICYmIGNvdW50cnkuYWx0U3BlbGxpbmdzWydjYXBpdGFsJ10gIT09IHVuZGVmaW5lZCA/IGNvdW50cnkuYWx0U3BlbGxpbmdzWydjYXBpdGFsJ10gOiBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29ycmVjdDogY291bnRyeS5jYXBpdGFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRTcGVsbGluZ3M6IGFsdFNwZWxsaW5nc1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnQ09VTlRSWV9PRl9DQVBJVEFMJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0ZMQUdfT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFsdFNwZWxsaW5ncyA9IGNvdW50cnkuYWx0U3BlbGxpbmdzICE9PSB1bmRlZmluZWQgJiYgY291bnRyeS5hbHRTcGVsbGluZ3NbJ25hbWUnXSAhPT0gdW5kZWZpbmVkID8gY291bnRyeS5hbHRTcGVsbGluZ3NbJ25hbWUnXSA6IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JyZWN0OiBjb3VudHJ5Lm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdFNwZWxsaW5nczogYWx0U3BlbGxpbmdzXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdQT1BVTEFUSU9OX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcnJlY3Q6IGNvdW50cnkucG9wdWxhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnQVJFQV9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JyZWN0OiBjb3VudHJ5LmFyZWFcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiP1wiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0UXVlc3Rpb25JbnB1dCA9IGZ1bmN0aW9uKHR5cGUpIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdQT1BVTEFUSU9OX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnbnVtYmVyLmhpZ2gnO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ0FSRUFfT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdudW1iZXIubWVkaXVtJztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdDQVBJVEFMX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnQ09VTlRSWV9PRl9DQVBJVEFMJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0ZMQUdfT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndGV4dC5zdGFuZGFyZCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0UXVlc3Rpb25Vbml0ID0gZnVuY3Rpb24odHlwZSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0FSRUFfT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdrbcKyJztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdQT1BVTEFUSU9OX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnRWlud29obmVyJztcclxuXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldENoZWNrQW5zd2VyTGFtYmRhID0gZnVuY3Rpb24odHlwZSwgZnVsbFBvaW50cywgbGFzdFF1ZXN0aW9uQm9udXMpIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdDQVBJVEFMX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnQ09VTlRSWV9PRl9DQVBJVEFMJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0ZMQUdfT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGFuc3dlciwgc3VibWl0dGVkQW5zd2VyLCBoaW50c1VzZWQsIGhpbnRDb3N0LCBpbmZvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb3JyZWN0ID0gc3VibWl0dGVkQW5zd2VyID09PSBhbnN3ZXIuY29ycmVjdCB8fCAoYW5zd2VyLmFsdFNwZWxsaW5ncyAmJiBhbnN3ZXIuYWx0U3BlbGxpbmdzLmluZGV4T2Yoc3VibWl0dGVkQW5zd2VyKSA+PSAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb2ludHMgPSBjb3JyZWN0ID8gZnVsbFBvaW50cyA6IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBoaW50cyBhcmUgYWxsb3dlZCBhbmQgaGF2ZSBiZWVuIHVzZWQsIHN1YnRyYWN0IHRoZSBwb2ludHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhpbnRzVXNlZCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyAtPSAoaGludHNVc2VkICogaGludENvc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBib251cyBwb2ludHMgZm9yIGxhc3QgcXVlc3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8gIT09IHVuZGVmaW5lZCAmJiBpbmZvLmJvbnVzICE9PSB1bmRlZmluZWQgJiYgaW5mby5ib251cyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzICo9IGxhc3RRdWVzdGlvbkJvbnVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9pbnRzO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnUE9QVUxBVElPTl9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0FSRUFfT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGFuc3dlciwgc3VibWl0dGVkQW5zd2VyLCBoaW50c1VzZWQsIGhpbnRDb3N0LCBpbmZvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBwZXJjZW50YWdlIGRpZmZlcmVuY2UgZnJvbSBjb3JyZWN0IGFuc3dlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3JQZXJjZW50YWdlID0gTWF0aC5hYnMoc3VibWl0dGVkQW5zd2VyIC0gYW5zd2VyLmNvcnJlY3QpIC8gYW5zd2VyLmNvcnJlY3QgKiAxMDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9pbnRzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yUGVyY2VudGFnZSA8PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSAxMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3JQZXJjZW50YWdlIDw9IDYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IDkwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yUGVyY2VudGFnZSA8PSA5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSA4MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvclBlcmNlbnRhZ2UgPD0gMTIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IDcwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yUGVyY2VudGFnZSA8PSAxNCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gNjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3JQZXJjZW50YWdlIDw9IDE2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSA1MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvclBlcmNlbnRhZ2UgPD0gMTgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IDQwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yUGVyY2VudGFnZSA8PSAyMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gMzA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3JQZXJjZW50YWdlIDw9IDI1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSAyMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvclBlcmNlbnRhZ2UgPD0gMzApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IDEwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgaGludHMgYXJlIGFsbG93ZWQgYW5kIGhhdmUgYmVlbiB1c2VkLCBzdWJ0cmFjdCB0aGUgcG9pbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoaW50c1VzZWQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgLT0gKGhpbnRzVXNlZCAqIGhpbnRDb3N0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYm9udXMgcG9pbnRzIGZvciBsYXN0IHF1ZXN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvICE9PSB1bmRlZmluZWQgJiYgaW5mby5ib251cyAhPT0gdW5kZWZpbmVkICYmIGluZm8uYm9udXMgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyAqPSBsYXN0UXVlc3Rpb25Cb251cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50cztcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiP1wiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldFF1ZXN0aW9uSGludHMgPSBmdW5jdGlvbih0eXBlLCBoaW50c1Bvc3NpYmxlLCBoaW50Q29zdCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0NBUElUQUxfT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdDT1VOVFJZX09GX0NBUElUQUwnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnRkxBR19PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxvd2VkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBoaW50c1Bvc3NpYmxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3N0OiBoaW50Q29zdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2l2ZTogZnVuY3Rpb24oaGludHNVc2VkLCBhbnN3ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhbnN3ZXIuY29ycmVjdC5zdWJzdHIoMCwgaGludHNVc2VkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnUE9QVUxBVElPTl9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0FSRUFfT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dlZDogZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiP1wiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldEN1cnJlbnRRdWVzdGlvbk51bWJlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoIWlzUXVpelJ1bm5pbmcoKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHF1aXouZ2V0Q3VycmVudFF1ZXN0aW9uTnVtYmVyKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldE51bWJlck9mUXVpelF1ZXN0aW9ucyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoIWlzUXVpelJ1bm5pbmcoKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHF1aXouZ2V0TnVtYmVyT2ZRdWVzdGlvbnMoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0Q3VycmVudFF1ZXN0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICghaXNRdWl6UnVubmluZygpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcXVpei5jdXJyZW50UXVlc3Rpb24oKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgbmV4dFF1ZXN0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICghaXNRdWl6UnVubmluZygpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHF1aXoubmV4dFF1ZXN0aW9uKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldFRvdGFsUG9pbnRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChxdWl6ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHF1aXouZ2V0VG90YWxQb2ludHMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbmNsdWRlcyB0aGUgcXVpeiBhbmQgcHV0cyB0aGUgc2NvcmUgdG8gdGhlIEFQSSBlbmRwb2ludC5cclxuICAgICAgICAgKiBSZXR1cm5zIGEgcHJvbWlzZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB2YXIgY29uY2x1ZGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHF1aXogIT09IG51bGwgJiYgcXVpei5oYXNFbmRlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHF1aXouc3VibWl0dGVkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgnUXVpeiBoYXMgYWxyZWFkeSBiZWVuIHN1Ym1pdHRlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcXVpei5zdWJtaXR0ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBTY29yZVNydi5wdXRIaWdoc2NvcmUocXVpei5nZXRUb3RhbFBvaW50cygpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCgnTm8gcXVpeiBpcyBjdXJyZW50bHkgcnVubmluZycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpbml0OiBpbml0LFxyXG4gICAgICAgICAgICBzZXRDb3VudHJpZXM6IHNldENvdW50cmllcyxcclxuICAgICAgICAgICAgaXNRdWl6UnVubmluZzogaXNRdWl6UnVubmluZyxcclxuICAgICAgICAgICAgaGFzUXVpelN0YXJ0ZWQ6IGhhc1F1aXpTdGFydGVkLFxyXG4gICAgICAgICAgICBoYXNRdWl6RW5kZWQ6IGhhc1F1aXpFbmRlZCxcclxuICAgICAgICAgICAgZ2V0Q3VycmVudFF1ZXN0aW9uTnVtYmVyOiBnZXRDdXJyZW50UXVlc3Rpb25OdW1iZXIsXHJcbiAgICAgICAgICAgIGdldE51bWJlck9mUXVpelF1ZXN0aW9uczogZ2V0TnVtYmVyT2ZRdWl6UXVlc3Rpb25zLFxyXG4gICAgICAgICAgICBnZXRDdXJyZW50UXVlc3Rpb246IGdldEN1cnJlbnRRdWVzdGlvbixcclxuICAgICAgICAgICAgbmV4dFF1ZXN0aW9uOiBuZXh0UXVlc3Rpb24sXHJcbiAgICAgICAgICAgIGdldFRvdGFsUG9pbnRzOiBnZXRUb3RhbFBvaW50cyxcclxuICAgICAgICAgICAgY29uY2x1ZGU6IGNvbmNsdWRlXHJcbiAgICAgICAgfTtcclxuICAgIH0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5mYWN0b3J5KCdTY29yZVNydicsIGZ1bmN0aW9uKCRodHRwKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRmV0Y2hlcyB0aGUgZW50aXJlIGhpZ2hzY29yZSBsaXN0IGluIGFuIGFycmF5IGZyb20gdGhlIEFQSS5cclxuICAgICAgICAgKiBSZXR1cm5zIGEgcHJvbWlzZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB2YXIgZ2V0SGlnaHNjb3JlTGlzdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJy9hcGkvc2NvcmVzL2FsbCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24obGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGxpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRmV0Y2hlcyB0aGUgaGlnaHNjb3JlIG9iamVjdCBmb3IgdGhlIGxvZ2dlZCBpbiB1c2VyLlxyXG4gICAgICAgICAqIElmIHRoZSB1c2VyIGhhcyBubyByZXN1bHQgeWV0LCBhbiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQuXHJcbiAgICAgICAgICogUmV0dXJucyBhIHByb21pc2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmFyIGdldFVzZXJIaWdoc2NvcmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL3Njb3Jlcy91c2VyJylcclxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihzY29yZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHNjb3JlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEZldGNoZXMgdGhlIGhpZ2hzY29yZSBvYmplY3QgZm9yIHRoZSBvdmVyYWxsIGhpZ2hzY29yZS5cclxuICAgICAgICAgKiBJZiB0aGVyZSBpcyBjdXJyZW50bHkgbm8gcmVzdWx0IHlldCwgYW4gZW1wdHkgb2JqZWN0IGlzIHJldHVybmVkLlxyXG4gICAgICAgICAqIFJldHVybnMgYSBwcm9taXNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZhciBnZXRPdmVyYWxsSGlnaHNjb3JlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICRodHRwLmdldCgnL2FwaS9zY29yZXMvaGlnaCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oc2NvcmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzY29yZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBQdXRzIGEgaGlnaHNjb3JlIHJlc3VsdCBmb3IgdGhlIGxvZ2dlZCBpbiB1c2VyLlxyXG4gICAgICAgICAqIEBwYXJhbSBzY29yZSAgICAgTnVtYmVyIHdpdGggdGhlIGFjaGlldmVkIHNjb3JlLlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZhciBwdXRIaWdoc2NvcmUgPSBmdW5jdGlvbihzY29yZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5wdXQoJy9hcGkvc2NvcmVzJywgeyBzY29yZTogc2NvcmUgfSlcclxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBnZXRIaWdoc2NvcmVMaXN0OiBnZXRIaWdoc2NvcmVMaXN0LFxyXG4gICAgICAgICAgICBnZXRVc2VySGlnaHNjb3JlOiBnZXRVc2VySGlnaHNjb3JlLFxyXG4gICAgICAgICAgICBnZXRPdmVyYWxsSGlnaHNjb3JlOiBnZXRPdmVyYWxsSGlnaHNjb3JlLFxyXG4gICAgICAgICAgICBwdXRIaWdoc2NvcmU6IHB1dEhpZ2hzY29yZVxyXG4gICAgICAgIH07XHJcbiAgICB9KTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuZmFjdG9yeSgnVXNlclNydicsIGZ1bmN0aW9uKCRodHRwLCBBdXRoVG9rZW5TcnYsIEFwcENvbmZpZykge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgdmFyIGdldFVzZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VyJyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldFVzZXJGcm9tU3RvcmFnZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdG9rZW4gPSBBdXRoVG9rZW5TcnYuZ2V0VG9rZW4oKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBBdXRoVG9rZW5TcnYuc2V0VG9rZW4odG9rZW4pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBnZXRVc2VyKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgbm8gdG9rZW4sIHdlIHJlamVjdCB0aGUgcHJvbWlzZVxyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChcIk5vIHRva2VuIGluIHN0b3JhZ2VcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBsb2dpbiA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9uJywge1xyXG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLFxyXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkXHJcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYudG9rZW4gPSByZXNwb25zZS5kYXRhO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHNhdmUgdG9rZW4gbG9jYWxseVxyXG4gICAgICAgICAgICAgICAgQXV0aFRva2VuU3J2LnNldFRva2VuKHNlbGYudG9rZW4pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRVc2VyKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBsb2dvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi50b2tlbiA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRva2VuIGxvY2FsbHlcclxuICAgICAgICAgICAgICAgIEF1dGhUb2tlblNydi5zZXRUb2tlbigpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHJlZ2lzdGVyID0gZnVuY3Rpb24obmV3VXNlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzZWxlY3QgYSByYW5kb20gY29sb3IgZm9yIHRoZSB1c2VyXHJcbiAgICAgICAgICAgICAgICB2YXIgY29sb3JzID0gQXBwQ29uZmlnWydzZXR0aW5ncy51c2VyLmNvbG9ycyddO1xyXG4gICAgICAgICAgICAgICAgbmV3VXNlci5jb2xvciA9IGNvbG9yc1tnZXRSYW5kb21JbnQoMCwgY29sb3JzLmxlbmd0aCAtIDEpXTtcclxuXHJcbiAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL3VzZXInLCBuZXdVc2VyKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW1tZWRpYXRlbHkgbG9nIHRoZSB1c2VyIGluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2luKG5ld1VzZXIudXNlcm5hbWUsIG5ld1VzZXIucGFzc3dvcmQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pICA7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHVwZGF0ZUJhc2ljID0gZnVuY3Rpb24odXNlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5wdXQoJy9hcGkvdXNlci9iYXNpYycsIHVzZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBnZXRVc2VyOiBnZXRVc2VyLFxyXG4gICAgICAgICAgICBnZXRVc2VyRnJvbVN0b3JhZ2U6IGdldFVzZXJGcm9tU3RvcmFnZSxcclxuICAgICAgICAgICAgbG9naW46IGxvZ2luLFxyXG4gICAgICAgICAgICBsb2dvdXQ6IGxvZ291dCxcclxuICAgICAgICAgICAgcmVnaXN0ZXI6IHJlZ2lzdGVyLFxyXG4gICAgICAgICAgICB1cGRhdGVCYXNpYzogdXBkYXRlQmFzaWNcclxuICAgICAgICB9O1xyXG4gICAgfSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
