var magellan=angular.module("magellan",["ui.router","ngProgress","ngAnimate"],["$httpProvider",function(e){e.interceptors.push("AuthInterceptor")}]);magellan.constant("AppConfig",{"log.info":!0,"log.error":!0,"quiz.country.questions":16,"quiz.country.types":{1:"CAPITAL_OF_COUNTRY",2:"COUNTRY_OF_CAPITAL",3:"POPULATION_OF_COUNTRY",4:"AREA_OF_COUNTRY",5:"FLAG_OF_COUNTRY"},"settings.user.colors":["soft_red","thunderbird","old_brick","new_york_pink","snuff","honey_flower","san_marino","shakespeare","ming","gossip","eucalyptus","mountain_meadow","jade","confetti","california","burnt_orange","jaffa","gallery","edward","lynch"]}),magellan.controller("AppCtrl",["$scope","$state","UserSrv","CountrySrv","QuizSrv",function(e,n,t,r,o){e.app={config:{title:"Magellan",subtitle:"Test your knowledge about the countries of our world",author:"Michael Stifter"}},t.getUserFromStorage().then(function(n){e.user=n,e.$broadcast("user.loaded"),r.init().then(function(n){e.$broadcast("countries.loaded",n),o.setCountries(n)})})["catch"](function(e){}),e.isProgressBarVisible=function(){return n.is("quiz")},e.$on("app.login",function(t,u){e.user=u,r.init().then(function(n){e.$broadcast("countries.loaded",n),o.setCountries(n)}),n.go("quiz")}),e.$on("app.logout",function(t,r){e.user=null,n.go("home")})}]);var Quiz=function(){var e=null,n=[];this.start=function(){if(n.length<=0)throw Error("Cannot start a quiz without questions");return this.nextQuestion()},this.isActive=function(){return this.hasStarted()&&!this.hasEnded()},this.hasStarted=function(){return null!==e},this.hasEnded=function(){return this.hasStarted()&&e>=n.length},this.addQuestion=function(e){if(void 0===e)throw Error("No question object passed");var t=!0,r=["config","hint","solution","answer","question","getInfo","info","points","answered","hintsAllowed","hintsRemaining"];r.forEach(function(n){if(!e.hasOwnProperty(n))throw t=!1,new Error("Question must have property '"+n+"'")}),t&&n.push(e)},this.nextQuestion=function(){return null===e?e=0:e++,this.hasEnded()?this.isActive():n[e]},this.currentQuestion=function(){return this.isActive()?n[e]:null},this.getTotalPoints=function(){if(!this.hasStarted())return null;var e=0;return n.forEach(function(n){var t=n.points();void 0!==t&&(e+=t)}),e},this.getCurrentQuestionNumber=function(){return null===e?null:e+1},this.getNumberOfQuestions=function(){return n.length}},Question=function(e){var n=null,t=null,r=null,o=null,u=0,i=null,a=null,s=!1,l=function(e){n=e.text,t=e.info||{},r=e.answer,i=e.checkAnswer||null,o=e.hints||{allowed:!1,maximum:0,cost:0,give:null}};e&&l(e),this.config=function(e){l(e)},this.question=function(){return n},this.info=function(e,n){return void 0===n?t[e]:void(t[e]=n)},this.getInfo=function(){return t},this.solution=function(){return s?r:null},this.hint=function(){if(!o.allowed||u>=o.maximum)return null;if(o.allowed&&!o.give)throw new Error("Hints allowed but no give method passed");return u++,o.give(u,r)},this.answer=function(e){if(!s&&i)return s=!0,a=i(r,e,t),o.allowed&&u>0&&(a-=u*o.cost),Math.max(0,a)},this.points=function(){if(s&&null!==a)return a},this.answered=function(){return s},this.hintsAllowed=function(){return null!==o?o.allowed:null},this.hintsRemaining=function(){var e=this.hintsAllowed();return null===e||e===!1?null:o.maximum-u}},getRandomInt=function(e,n){return Math.floor(Math.random()*(n-e+1))+e},getStringBetween=function(e,n,t){var r=e.indexOf(n),o=e.indexOf(t);return r>=0&&o>=0&&o>r?e.substr(r+1,o-r-1):null};"undefined"!=typeof module&&module.exports&&(module.exports.Question=Question,module.exports.Quiz=Quiz),angular.module("magellan").config(["$locationProvider","$stateProvider","$urlRouterProvider",function(e,n,t){e.html5Mode(!0),t.otherwise("/home"),n.state("home",{url:"/home",templateUrl:"/build/views/partials/home.partial.html",params:{action:null}}).state("quiz",{url:"/quiz",templateUrl:"/build/views/partials/quiz.partial.html"}).state("countries",{url:"/countries",templateUrl:"/build/views/partials/countries.partial.html"}).state("countries.detail",{url:"/:alpha3Code",templateUrl:"/build/views/partials/countries-detail.partial.html"}).state("login",{url:"/login",templateUrl:"/build/views/partials/login.partial.html"}).state("logout",{url:"/logout",controller:"LogoutCtrl"}).state("register",{url:"/register",templateUrl:"/build/views/partials/register.partial.html"}).state("settings",{url:"/settings",templateUrl:"/build/views/partials/settings.partial.html"}).state("about",{url:"/about",templateUrl:"/build/views/partials/about.partial.html"})}]),angular.module("magellan").controller("CountriesCtrl",["$scope","CountrySrv",function(e,n){var t=null,r=null,o=function(){t=n.getCountriesByLetter(),r=Object.keys(t),e.$$phase?(e.countryKeys=r,e.countriesByLetter=t):e.$apply(function(){e.countryKeys=r,e.countriesByLetter=t})};n.areCountriesLoaded()&&o(),e.$on("countries.loaded",function(){o()})}]),angular.module("magellan").controller("CountryDetailCtrl",["$scope","CountrySrv","$stateParams",function(e,n,t){var r=t.alpha3Code;n.areCountriesLoaded()&&(e.country=n.getCountryByAlpha3(r)),e.$on("countries.loaded",function(){e.$apply(function(){e.country=n.getCountryByAlpha3(r)})});var o=function(e){return n.getCountryByAlpha3(e)};e.getCountryFromService=o}]),angular.module("magellan").controller("DropdownCtrl",["$scope",function(e){function n(){u=!u}function t(){u=!0}function r(){u=!1}function o(){return u}var u=!1;e.toggleDropdown=n,e.showDropdown=t,e.hideDropdown=r,e.isDropdownVisible=o,e.handleClickOutside=function(e){console.log("CLICKED OUTSIDE")}}]),angular.module("magellan").controller("HomeCtrl",["$scope","LogSrv","$stateParams",function(e,n,t){if(e.message=null,t.action){var r=t.action;switch(r){case"register.successful":e.message={type:"success",text:"Gratulation! Die Anmeldung war erfolgreich. Herzlich willkommen bei Magellan."};break;default:e.message=null}}}]),angular.module("magellan").controller("LoginCtrl",["$scope","UserSrv","FocusSrv",function(e,n,t){e.message=null,e.login=function(t,r){n.login(t,r).then(function(n){e.message=null,e.$emit("app.login",n.data)})["catch"](function(n){console.error(n);var t;t=401===n.status?"Falscher Benutzername oder Passwort":"Beim Einloggen scheint etwas schief gegangen zu sein",e.message={type:"error",text:t}})},t("#username")}]),angular.module("magellan").controller("LogoutCtrl",["$scope","UserSrv",function(e,n){n.logout().then(function(){e.$emit("app.logout")})}]),angular.module("magellan").controller("QuizDirectiveController",["$scope","QuizSrv","LogSrv","FocusSrv","ngProgressFactory",function(e,n,t,r,o){e.progressbar=o.createInstance(),e.progressbar.setParent(document.getElementById("quiz-progress")),e.progressbar.setAbsolute(),e.progressbar.setColor("#336e7b"),e.answerInput={};var u=null,i=function(){u=n.getCurrentQuestion(),v(),r(".answerInput")},a=function(){return u},s=function(){return n.getCurrentQuestionNumber()},l=function(){return n.getNumberOfQuizQuestions()},c=function(){return h(a().question(),"question-highlight")+"?"},f=function(){return u&&u.getInfo().media?u.getInfo().media:null},g=function(){e.answerInput.answer&&(console.log(u.answer(e.answerInput.answer)),r("#btnNextQuestion"))},d=function(){return!(!n.isQuizRunning()||null===u)&&u.answered()},m=function(){n.nextQuestion(),e.answerInput.answer="",i()},h=function(e,n){return e.replace("[","<span class='"+n+"'>").replace("]","</span>")},p=function(e){13==e.which&&g()},v=function(){var n=s()/l()*100;e.progressbar.set(n)};i(),e.getQuestion=a,e.getCurrentQuestionNumber=s,e.renderQuestionText=c,e.submitAnswer=g,e.questionAnswered=d,e.nextQuestion=m,e.handleKeyPress=p,e.getQuestionMedia=f}]),angular.module("magellan").controller("QuizCtrl",["$scope","QuizSrv","LogSrv",function(e,n,t){var r=function(){n.init().then(function(){t.info("Quiz started")})["catch"](function(e){t.error(e)})},o=function(){return n.isQuizRunning()};e.startQuiz=r,e.isQuizRunning=o}]),angular.module("magellan").controller("RegisterCtrl",["$scope","LogSrv","FocusSrv","UserSrv","$state","$window",function(e,n,t,r,o,u){e.newUser={},e.message=null;var i=function(t){return!!t&&void(a()&&r.register(e.newUser).then(function(n){200===n.status?(e.$emit("app.login",n.data),o.go("home",{action:"register.successful"})):e.message={type:"error",text:"Bei der Anmeldung scheint etwas schief gegangen zu sein"}})["catch"](function(t){n.error(t);var r;switch(t.message){case"Username already exists":r="Der Benutzername existiert bereits";break;default:r="Bei der Anmeldung scheint etwas schief gegangen zu sein"}e.$$phase?e.message={type:"error",text:r}:e.$apply(function(){e.message={type:"error",text:r}})}))},a=function(){e.message=null;var n=e.newUser.password,t=e.newUser.password2;return e.newUser.username&&e.newUser.email&&n&&t?""===n||""===t?e.message={type:"error",text:"Die Passwörter können nicht leer sein"}:n!==t&&(e.message={type:"error",text:"Die Passwörter stimmen nicht überein"}):e.message={type:"error",text:"Alle Felder müssen ausgefüllt sein"},!e.message},s=function(){i(!0)};e.delegateSubmit=s,e.register=i,t("#username")}]),angular.module("magellan").controller("SettingsCtrl",["$scope","AppConfig","FocusSrv","LogSrv","UserSrv",function(e,n,t,r,o){var u=function(){e.message=null;var u=n["settings.user.colors"];e.userObj={username:e.user.username,email:e.user.email,color:e.user.color},e.userColors=u;var i=function(n){e.userObj.color=n},a=function(){o.updateBasic(e.userObj).then(function(n){e.user.username=e.userObj.username,e.user.email=e.userObj.email,e.user.color=e.userObj.color,e.$apply(function(){e.message={type:"success",text:"Einstellungen wurden erfolgreich gespeichert"}})})["catch"](function(n){r.error("Update user",n);var t;switch(n.message){case"Username already exists":t="Der Benutzername ist bereits vergeben";break;default:t="Die Einstellungen konnten nicht gespeichert werden"}e.$apply(function(){e.message={type:"error",text:t}})})},s=function(){a(!0)};e.setColor=i,e.updateUser=a,e.delegateSubmit=s,t("#username")};e.user&&u(),e.$on("user.loaded",function(e,n){u()})}]),angular.module("magellan").directive("quiz",function(){return{templateUrl:"build/views/templates/quiz-directive.template.html",scope:!0,controller:"QuizDirectiveController",restrict:"E",link:function(e,n,t){}}}),angular.module("magellan").filter("renderHtml",["$sce",function(e){return function(n){return e.trustAsHtml(n)}}]),angular.module("magellan").factory("AuthInterceptor",["AuthTokenSrv",function(e){var n=function(n){var t=e.getToken();return t&&(n.headers=n.headers||{},n.headers["X-Auth"]=t),n};return{request:n}}]),angular.module("magellan").factory("AuthTokenSrv",["$window",function(e){var n=e.sessionStorage,t="auth-token",r=function(){return n.getItem(t)},o=function(e){e?n.setItem(t,e):n.removeItem(t)};return{getToken:r,setToken:o}}]),angular.module("magellan").factory("CountrySrv",["$http","IndexedDBSrv","LogSrv",function(e,n,t){var r=null,o=null,u=null,i="magellan",a="countryStore",s="countries",l="version",c=n.indexedDBAvailable(),f=function(){return g()},g=function(){return c?new Promise(function(e,s){n.createDatabase(i,a).then(h).then(p).then(v).then(d).then(m).then(function(n){r=n.countries,t.info("loaded countries from",n.loadStrategy.toUpperCase()),o={},u={},r.forEach(function(e){o[e.alpha3Code]=e;var n=e.name.substr(0,1).toUpperCase();switch(n){case"Ä":n="A";break;case"Ö":n="O";break;case"Ü":n="U"}void 0===u[n]&&(u[n]=[]),u[n].push({alpha3Code:e.alpha3Code,name:e.name})}),e(r)})["catch"](function(e){t.error("failed to load countries",e),s(e)})}):C()},d=function(e){return new Promise(function(n,t){var r,o=e.internalVersion,u=e.externalVersion;r=null===o?"api":u>o?"api":"db",e.loadStrategy=r,n(e)})},m=function(e){return new Promise(function(t,r){var o=e.loadStrategy;switch(o){case"api":C().then(function(r){e.countries=r,n.putItem(i,a,{name:s,value:r}),n.putItem(i,a,{name:l,value:e.externalVersion}),t(e)})["catch"](function(e){r(e)});break;case"db":w(e).then(function(e){t(e)})["catch"](function(e){r(e)});break;default:r("Unknown load strategy")}})},h=function(){return new Promise(function(e,n){e({})})},p=function(e){return new Promise(function(t,r){n.retrieveItem(i,a,l).then(function(n){e.internalVersion=n.value,t(e)})["catch"](function(n){e.internalVersion=null,t(e)})})},v=function(e){return O().then(function(n){return e.externalVersion=n,e})},w=function(e){return new Promise(function(t,r){n.retrieveItem(i,a,s).then(function(n){e.countries=n.value,t(e)})["catch"](function(e){t(null)})})},C=function(){return new Promise(function(n,t){e.get("/api/countries").then(function(e){n(e.data)})["catch"](function(e){t(e)})})},O=function(){return new Promise(function(n,t){e.get("/api/countries/version").then(function(e){n(e.data.version||0)})["catch"](function(e){n(0)})})},A=function(e){return null===o?null:o[e]},b=function(){return null===u?null:u},y=function(){return null!==r&&r.length>0};return{init:f,getCountryByAlpha3:A,getCountriesByLetter:b,areCountriesLoaded:y}}]),angular.module("magellan").factory("FocusSrv",["$timeout","$window",function(e,n){return function(t){e(function(){var e=n.document.querySelector(t);e&&e.focus()})}}]),angular.module("magellan").factory("IndexedDBSrv",["$window",function(e){var n="name",t=e.indexedDB||e.webkitIndexedDB||e.msIndexedDB,r=e.IDBKeyRange||e.webkitIDBKeyRange,o=e.IDBTransaction||e.webkitIDBTransaction;o&&(o.READ_WRITE=o.READ_WRITE||"readwrite",o.READ_ONLY=o.READ_ONLY||"readonly");var u=function(){return!!t},i=function(e,r){return new Promise(function(o,u){var i=t.open(e);i.onupgradeneeded=function(e){var t=e.target.result;t.createObjectStore(r,{keyPath:n})},i.onsuccess=function(e){o(e)},i.onerror=function(e){u(e)}})},a=function(e){return new Promise(function(n,r){var o=t.deleteDatabase(e);o.onsuccess=function(e){n(e)},o.onerror=function(e){r(e)}})},s=function(e,n,r){return new Promise(function(u,i){var a=t.open(e);a.onsuccess=function(e){var t=e.target.result,a=t.transaction(n,o.READ_WRITE),s=a.objectStore(n),l=s.add(r);l.onsuccess=function(e){u(e)},l.onerror=function(e){i(e)}}})},l=function(e,n,r){return new Promise(function(u,i){var a=t.open(e);a.onsuccess=function(e){var t=e.target.result,a=t.transaction(n,o.READ_WRITE),s=a.objectStore(n),l=s.put(r);l.onsuccess=function(e){u(e)},l.onerror=function(e){i(e)}}})},c=function(e,n,u){return new Promise(function(i,a){var s=null,l=t.open(e);l.onsuccess=function(e){var t=e.target.result,a=t.transaction(n,o.READ_ONLY),l=a.objectStore(n),c=r.only(u);l.openCursor(c).onsuccess=function(e){var n=e.target.result;n?(s=n.value,n["continue"]()):i(s)}},l.onerror=function(e){a(e)}})},f=function(e,n){return new Promise(function(r,u){var i=[],a=t.open(e);a.onsuccess=function(e){var t=e.target.result,u=t.transaction(n,o.READ_ONLY),a=u.objectStore(n);a.openCursor().onsuccess=function(e){var n=e.target.result;n?(i.push(n.value),n["continue"]()):r(i)}},a.onerror=function(e){u(e)}})};return{createDatabase:i,dropDatabase:a,addItem:s,putItem:l,retrieveItem:c,retrieveItems:f,indexedDBAvailable:u}}]),angular.module("magellan").factory("LogSrv",["AppConfig",function(e){var n=function(){e["log.info"]&&console.log.apply(console,arguments)},t=function(){e["log.error"]&&console.error.apply(console,arguments)};return{info:n,error:t}}]),angular.module("magellan").factory("QuizSrv",["AppConfig","CountrySrv","LogSrv",function(e,n,t){var r=null,o=null,u=function(e){r=e},i=function(){return null!==r&&r.length>0},a=function(){return new Promise(function(e,n){i||n("Countries have not been loaded"),o=l("country"),e(o.start())})},s=function(){return null!==o&&o.hasStarted()},l=function(e){switch(e){case"country":default:return c()}},c=function(){for(var t=new Quiz,o=100,u=3,i=25,a=2.5,s=e["quiz.country.types"],l=Object.keys(s).length,c=[],v=e["quiz.country.questions"],w=0;w<v;w++){for(var C=!1;!C;){var O=r[getRandomInt(0,r.length-1)];C=c.indexOf(O.alpha3Code)<0}c.push(O.alpha3Code)}var A=0;return c.forEach(function(e){A++;var r=n.getCountryByAlpha3(e),c=s[getRandomInt(1,l)],w=f(c,r),C={type:c,input:d(c),unit:m(c)},O=g(c,r),b=h(c,o,a),y=p(c,u,i);A>=v&&(C.bonus=!0),"FLAG_OF_COUNTRY"===c&&(C.media="flag",C.alpha2Code=r.alpha2Code.toLocaleLowerCase()),t.addQuestion(new Question({text:w,info:C,answer:O,checkAnswer:b,hints:y}))}),t},f=function(e,n){switch(e){case"CAPITAL_OF_COUNTRY":return"Wie heißt die Hauptstadt von ["+n.name+"]";case"COUNTRY_OF_CAPITAL":return"["+n.capital+"] ist die Hauptstadt von welchem Land";case"POPULATION_OF_COUNTRY":return"Wie viele Menschen leben in ["+n.name+"]";case"AREA_OF_COUNTRY":return"Wie groß ist die Fläche von ["+n.name+"]";case"FLAG_OF_COUNTRY":return"Welches Land hat diese Flagge";default:return"?"}},g=function(e,n){switch(e){case"CAPITAL_OF_COUNTRY":var t=void 0!==n.altSpellings&&void 0!==n.altSpellings.capital?n.altSpellings.capital:[];return{correct:n.capital,altSpellings:t};case"COUNTRY_OF_CAPITAL":case"FLAG_OF_COUNTRY":var t=void 0!==n.altSpellings&&void 0!==n.altSpellings.name?n.altSpellings.name:[];return{correct:n.name,altSpellings:t};case"POPULATION_OF_COUNTRY":return{correct:n.population};case"AREA_OF_COUNTRY":return{correct:n.area};default:return"?"}},d=function(e){switch(e){case"POPULATION_OF_COUNTRY":return"number.high";case"AREA_OF_COUNTRY":return"number.medium";case"CAPITAL_OF_COUNTRY":case"COUNTRY_OF_CAPITAL":case"FLAG_OF_COUNTRY":default:return"text.standard"}},m=function(e){switch(e){case"AREA_OF_COUNTRY":return"km²";case"POPULATION_OF_COUNTRY":return"Einwohner";default:return null}},h=function(e,n,t){switch(e){case"CAPITAL_OF_COUNTRY":case"COUNTRY_OF_CAPITAL":case"FLAG_OF_COUNTRY":return function(e,r,o){var u=r===e.correct||e.altSpellings&&e.altSpellings.indexOf(r)>=0,i=u?n:0;return void 0!==o&&void 0!==o.bonus&&o.bonus===!0&&(i*=t),i};case"POPULATION_OF_COUNTRY":case"AREA_OF_COUNTRY":return function(e,n,r){var o,u=Math.abs(n-e.correct)/e.correct*100;return o=u<=3?100:u<=6?90:u<=9?80:u<=12?70:u<=14?60:u<=16?50:u<=18?40:u<=20?30:u<=25?20:u<=30?10:0,void 0!==r&&void 0!==r.bonus&&r.bonus===!0&&(o*=t),o};default:return"?"}},p=function(e,n,t){switch(e){case"CAPITAL_OF_COUNTRY":case"COUNTRY_OF_CAPITAL":case"FLAG_OF_COUNTRY":return{allowed:!0,maximum:n,cost:t,give:function(e,n){return n.correct.substr(0,e)}};case"POPULATION_OF_COUNTRY":case"AREA_OF_COUNTRY":return{allowed:!1};default:return"?"}},v=function(){return s()?o.getCurrentQuestionNumber():null},w=function(){return s()?o.getNumberOfQuestions():null},C=function(){return s()?o.currentQuestion():null},O=function(){s()&&o.nextQuestion()};return{init:a,setCountries:u,isQuizRunning:s,getCurrentQuestionNumber:v,getNumberOfQuizQuestions:w,getCurrentQuestion:C,nextQuestion:O}}]),angular.module("magellan").factory("UserSrv",["$http","AuthTokenSrv","AppConfig",function(e,n,t){var r=this,o=function(){return e.get("/api/user")},u=function(){return new Promise(function(e,t){var r=n.getToken();r?(n.setToken(r),o().then(function(n){e(n.data)})["catch"](function(e){t(e)})):t("No token in storage")})},i=function(t,u){return e.post("/api/session",{username:t,password:u}).then(function(e){return r.token=e.data,n.setToken(r.token),o()})},a=function(){return new Promise(function(e,t){r.token=null,n.setToken(),e()})},s=function(n){return new Promise(function(r,o){var u=t["settings.user.colors"];n.color=u[getRandomInt(0,u.length-1)],e.post("/api/user",n).success(function(e){i(n.username,n.password).then(function(e){r(e)})["catch"](function(e){o(e)})}).error(function(e){o(e)})})},l=function(n){return new Promise(function(t,r){e.put("/api/user/basic",n).success(function(e){t(e)}).error(function(e){r(e)})})};return{getUser:o,getUserFromStorage:u,login:i,logout:a,register:s,updateBasic:l}}]);
//# sourceMappingURL=data:application/json;base64,
