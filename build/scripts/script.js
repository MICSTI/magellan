var magellan=angular.module("magellan",["ui.router"],["$httpProvider",function(n){n.interceptors.push("AuthInterceptor")}]);magellan.constant("AppConfig",{"log.info":!0,"log.error":!0,"quiz.questions.number":5}),magellan.controller("AppCtrl",["$scope","$state","UserSrv","CountrySrv","QuizSrv",function(n,t,e,o,r){n.app={config:{title:"Magellan",subtitle:"Test your knowledge about the countries of our world",author:"Michael Stifter"}},e.getUserFromStorage().then(function(t){n.user=t,o.init().then(function(t){n.$broadcast("countries.loaded",t),r.setCountries(t)})})["catch"](function(n){}),n.$on("app.login",function(e,u){n.user=u,o.init().then(function(t){n.$broadcast("countries.loaded",t),r.setCountries(t)}),t.go("quiz")}),n.$on("app.logout",function(e,o){n.user=null,t.go("home")})}]);var Quiz=function(){var n=[];this.addQuestion=function(t){n.push(t)},this.getQuestions=function(){return n}},Question=function(n){n=n||{},this.type=n.type||this.getRandomType(),this.country=n.country||null};Question.prototype.types={CAPITAL_OF_COUNTRY:"capital-of-country",COUNTRY_OF_CAPITAL:"country-of-capital"},Question.prototype.getRandomType=function(){var n=Object.keys(this.types);return n[getRandomInt(0,n.length-1)]};var getRandomInt=function(n,t){return Math.floor(Math.random()*(t-n+1))+n};angular.module("magellan").factory("AuthTokenSrv",["$window",function(n){var t=n.sessionStorage,e="auth-token",o=function(){return t.getItem(e)},r=function(n){n?t.setItem(e,n):t.removeItem(e)};return{getToken:o,setToken:r}}]),angular.module("magellan").factory("AuthInterceptor",["AuthTokenSrv",function(n){var t=function(t){var e=n.getToken();return e&&(t.headers=t.headers||{},t.headers["X-Auth"]=e),t};return{request:t}}]),angular.module("magellan").factory("CountrySrv",["$http","IndexedDBSrv","LogSrv",function(n,t,e){var o=null,r="magellan",u="countryStore",i="countries",a="version",c=t.indexedDBAvailable(),l=function(){return s()},s=function(){return c?new Promise(function(n,i){t.createDatabase(r,u).then(d).then(m).then(p).then(f).then(g).then(function(t){o=t.countries,e.logInfo("loaded countries from",t.loadStrategy.toUpperCase()),n(o)})["catch"](function(n){e.logError("failed to load countries",n),i(n)})}):v()},f=function(n){return new Promise(function(t,e){var o,r=n.internalVersion,u=n.externalVersion;o=null===r?"api":u>r?"api":"db",n.loadStrategy=o,t(n)})},g=function(n){return new Promise(function(e,o){var c=n.loadStrategy;switch(c){case"api":v().then(function(o){n.countries=o,t.putItem(r,u,{name:i,value:o}),t.putItem(r,u,{name:a,value:n.externalVersion}),e(n)})["catch"](function(n){o(n)});break;case"db":h(n).then(function(n){e(n)})["catch"](function(n){o(n)});break;default:o("Unknown load strategy")}})},d=function(){return new Promise(function(n,t){n({})})},m=function(n){return new Promise(function(e,o){t.retrieveItem(r,u,a).then(function(t){n.internalVersion=t.value,e(n)})["catch"](function(t){n.internalVersion=null,e(n)})})},p=function(n){return w().then(function(t){return n.externalVersion=t,n})},h=function(n){return new Promise(function(e,o){t.retrieveItem(r,u,i).then(function(t){n.countries=t.value,e(n)})["catch"](function(n){e(null)})})},v=function(){return new Promise(function(t,e){n.get("/api/countries").then(function(n){t(n.data)})["catch"](function(n){e(n)})})},w=function(){return new Promise(function(t,e){n.get("/api/countries/version").then(function(n){t(n.data.version||0)})["catch"](function(n){t(0)})})};return{init:l}}]),angular.module("magellan").controller("DropdownCtrl",["$scope",function(n){function t(){u=!u}function e(){u=!0}function o(){u=!1}function r(){return u}var u=!1;n.toggleDropdown=t,n.showDropdown=e,n.hideDropdown=o,n.isDropdownVisible=r}]),angular.module("magellan").factory("FocusSrv",["$timeout","$window",function(n,t){return function(e){n(function(){var n=t.document.getElementById(e);n&&n.focus()})}}]),angular.module("magellan").factory("IndexedDBSrv",["$window",function(n){var t="name",e=n.indexedDB||n.webkitIndexedDB||n.msIndexedDB,o=n.IDBKeyRange||n.webkitIDBKeyRange,r=n.IDBTransaction||n.webkitIDBTransaction;r&&(r.READ_WRITE=r.READ_WRITE||"readwrite",r.READ_ONLY=r.READ_ONLY||"readonly");var u=function(){return!!e},i=function(n,o){return new Promise(function(r,u){var i=e.open(n);i.onupgradeneeded=function(n){var e=n.target.result;e.createObjectStore(o,{keyPath:t})},i.onsuccess=function(n){r(n)},i.onerror=function(n){u(n)}})},a=function(n){return new Promise(function(t,o){var r=e.deleteDatabase(n);r.onsuccess=function(n){t(n)},r.onerror=function(n){o(n)}})},c=function(n,t,o){return new Promise(function(u,i){var a=e.open(n);a.onsuccess=function(n){var e=n.target.result,a=e.transaction(t,r.READ_WRITE),c=a.objectStore(t),l=c.add(o);l.onsuccess=function(n){u(n)},l.onerror=function(n){i(n)}}})},l=function(n,t,o){return new Promise(function(u,i){var a=e.open(n);a.onsuccess=function(n){var e=n.target.result,a=e.transaction(t,r.READ_WRITE),c=a.objectStore(t),l=c.put(o);l.onsuccess=function(n){u(n)},l.onerror=function(n){i(n)}}})},s=function(n,t,u){return new Promise(function(i,a){var c=null,l=e.open(n);l.onsuccess=function(n){var e=n.target.result,a=e.transaction(t,r.READ_ONLY),l=a.objectStore(t),s=o.only(u);l.openCursor(s).onsuccess=function(n){var t=n.target.result;t?(c=t.value,t["continue"]()):i(c)}},l.onerror=function(n){a(n)}})},f=function(n,t){return new Promise(function(o,u){var i=[],a=e.open(n);a.onsuccess=function(n){var e=n.target.result,u=e.transaction(t,r.READ_ONLY),a=u.objectStore(t);a.openCursor().onsuccess=function(n){var t=n.target.result;t?(i.push(t.value),t["continue"]()):o(i)}},a.onerror=function(n){u(n)}})};return{createDatabase:i,dropDatabase:a,addItem:c,putItem:l,retrieveItem:s,retrieveItems:f,indexedDBAvailable:u}}]),angular.module("magellan").factory("LogSrv",["AppConfig",function(n){var t=function(){n["log.info"]&&console.log.apply(console,arguments)},e=function(){n["log.error"]&&console.error.apply(console,arguments)};return{logInfo:t,logError:e}}]),angular.module("magellan").controller("LoginCtrl",["$scope","UserSrv","FocusSrv",function(n,t,e){n.login=function(e,o){t.login(e,o).then(function(t){n.$emit("app.login",t.data)})["catch"](function(n){console.error(n)})},e("username")}]),angular.module("magellan").controller("LogoutCtrl",["$scope","UserSrv",function(n,t){t.logout().then(function(){n.$emit("app.logout")})}]),angular.module("magellan").controller("QuizCtrl",["$scope","QuizSrv","LogSrv",function(n,t,e){var o=function(){t.init().then(function(n){e.logInfo("Quiz loaded",n.getQuestions())})["catch"](function(n){e.logError(n)})};n.startQuiz=o,n.isQuizRunning=function(){return t.isQuizRunning()}}]),angular.module("magellan").factory("QuizSrv",["AppConfig","LogSrv",function(n,t){var e=null,o=!1,r=function(){return new Promise(function(t,e){a()||e("Countries not loaded"),o=!0;for(var r=new Quiz,u=0;u<n["quiz.questions.number"];u++)r.addQuestion(new Question({country:i()}));t(r)})},u=function(n){e=n},i=function(){return e[getRandomInt(0,e.length-1)]},a=function(){return null!==e&&e.length>0},c=function(){return o};return{init:r,setCountries:u,isQuizRunning:c}}]),angular.module("magellan").config(["$locationProvider","$stateProvider","$urlRouterProvider",function(n,t,e){n.html5Mode(!0),e.otherwise("/home"),t.state("home",{url:"/home",templateUrl:"/build/views/home.partial.html"}).state("quiz",{url:"/quiz",templateUrl:"/build/views/quiz.partial.html"}).state("login",{url:"/login",templateUrl:"/build/views/login.partial.html"}).state("logout",{url:"/logout",controller:"LogoutCtrl"}).state("register",{url:"/register",templateUrl:"/build/views/register.partial.html"}).state("about",{url:"/about",templateUrl:"/build/views/about.partial.html"})}]),angular.module("magellan").factory("UserSrv",["$http","AuthTokenSrv",function(n,t){var e=this,o=function(){return n.get("/api/user")},r=function(){return new Promise(function(n,e){var r=t.getToken();r?(t.setToken(r),o().then(function(t){n(t.data)})["catch"](function(n){e(n)})):e("No token in storage")})},u=function(r,u){return n.post("/api/session",{username:r,password:u}).then(function(n){return e.token=n.data,t.setToken(e.token),o()})},i=function(){return new Promise(function(n,o){e.token=null,t.setToken(),n()})};return{getUser:o,getUserFromStorage:r,login:u,logout:i}}]);
//# sourceMappingURL=data:application/json;base64,
