var magellan=angular.module("magellan",["ui.router"]);magellan.controller("AppCtrl",["$scope","$state",function(t,e){t.app={config:{title:"Magellan",subtitle:"Test your knowledge about the countries of our world",author:"Michael Stifter"}},t.$on("app.login",function(o,l){t.user=l,e.go("quiz")}),t.$on("app.logout",function(o,l){t.user=null,e.go("home")})}]),angular.module("magellan").factory("FocusSrv",["$timeout","$window",function(t,e){return function(o){t(function(){var t=e.document.getElementById(o);t&&t.focus()})}}]),angular.module("magellan").controller("LoginCtrl",["$scope","UserSrv","FocusSrv",function(t,e,o){t.login=function(o,l){e.login(o,l).then(function(e){t.$emit("app.login",e.data)})["catch"](function(t){console.error(t)})},o("username")}]),angular.module("magellan").controller("LogoutCtrl",["$scope","UserSrv",function(t,e){e.logout().then(function(){t.$emit("app.logout")})}]),angular.module("magellan").config(["$locationProvider","$stateProvider","$urlRouterProvider",function(t,e,o){t.html5Mode(!0),o.otherwise("/home"),e.state("home",{url:"/home",templateUrl:"/build/views/home.partial.html"}).state("quiz",{url:"/quiz",templateUrl:"/build/views/quiz.partial.html"}).state("login",{url:"/login",templateUrl:"/build/views/login.partial.html"}).state("logout",{url:"/logout",controller:"LogoutCtrl"}).state("register",{url:"/register",templateUrl:"/build/views/register.partial.html"}).state("about",{url:"/about",templateUrl:"/build/views/about.partial.html"})}]),angular.module("magellan").factory("UserSrv",["$http",function(t){var e=this,o=function(){return t.get("/api/user",{headers:{"X-Auth":e.token}})},l=function(l,n){return t.post("/api/session",{username:l,password:n}).then(function(t){return e.token=t.data,o()})},n=function(){return new Promise(function(t,o){e.token=null,t()})};return{getUser:o,login:l,logout:n}}]);
//# sourceMappingURL=data:application/json;base64,
