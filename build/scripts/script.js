var magellan=angular.module("magellan",["ui.router"],["$httpProvider",function(n){n.interceptors.push("AuthInterceptor")}]);magellan.constant("AppConfig",{LOG_INFO:!0,LOG_ERROR:!0}),magellan.controller("AppCtrl",["$scope","$state","UserSrv","CountrySrv",function(n,e,t,o){n.app={config:{title:"Magellan",subtitle:"Test your knowledge about the countries of our world",author:"Michael Stifter"}},t.getUserFromStorage().then(function(e){n.user=e,o.init().then(function(e){n.$broadcast("countries.loaded",e)})})["catch"](function(n){}),n.$on("app.login",function(t,r){n.user=r,o.init().then(function(e){n.$broadcast("countries.loaded",e)}),e.go("quiz")}),n.$on("app.logout",function(t,o){n.user=null,e.go("home")})}]),angular.module("magellan").factory("AuthTokenSrv",["$window",function(n){var e=n.sessionStorage,t="auth-token",o=function(){return e.getItem(t)},r=function(n){n?e.setItem(t,n):e.removeItem(t)};return{getToken:o,setToken:r}}]),angular.module("magellan").factory("AuthInterceptor",["AuthTokenSrv",function(n){var e=function(e){var t=n.getToken();return t&&(e.headers=e.headers||{},e.headers["X-Auth"]=t),e};return{request:e}}]),angular.module("magellan").factory("CountrySrv",["$http","IndexedDBSrv","LogSrv",function(n,e,t){var o=null,r="magellan",u="countryStore",a="countries",i="version",c=e.indexedDBAvailable(),l=function(){return s()},s=function(){return c?new Promise(function(n,a){e.createDatabase(r,u).then(m).then(d).then(p).then(f).then(g).then(function(e){o=e.countries,t.logInfo("loaded countries from",e.loadStrategy.toUpperCase()),n(o)})["catch"](function(n){a(n)})}):h()},f=function(n){return new Promise(function(e,t){var o,r=n.internalVersion,u=n.externalVersion;o=null===r?"api":u>r?"api":"db",n.loadStrategy=o,e(n)})},g=function(n){return new Promise(function(t,o){var c=n.loadStrategy;switch(c){case"api":h().then(function(o){n.countries=o,e.putItem(r,u,{name:a,value:o}),e.putItem(r,u,{name:i,value:n.externalVersion}),t(n)})["catch"](function(n){o(n)});break;case"db":v(n).then(function(n){t(n)})["catch"](function(n){o(n)});break;default:o("Unknown load strategy")}})},m=function(){return new Promise(function(n,e){n({})})},d=function(n){return new Promise(function(t,o){e.retrieveItem(r,u,i).then(function(e){n.internalVersion=e.value,t(n)})["catch"](function(e){n.internalVersion=null,t(n)})})},p=function(n){return w().then(function(e){return n.externalVersion=e,n})},v=function(n){return new Promise(function(t,o){e.retrieveItem(r,u,a).then(function(e){n.countries=e.value,t(n)})["catch"](function(n){t(null)})})},h=function(){return new Promise(function(e,t){n.get("/api/countries").then(function(n){e(n.data)})["catch"](function(n){t(n)})})},w=function(){return new Promise(function(e,t){n.get("/api/countries/version").then(function(n){e(n.data.version||0)})["catch"](function(n){e(0)})})};return{init:l}}]),angular.module("magellan").controller("DropdownCtrl",["$scope",function(n){function e(){u=!u}function t(){u=!0}function o(){u=!1}function r(){return u}var u=!1;n.toggleDropdown=e,n.showDropdown=t,n.hideDropdown=o,n.isDropdownVisible=r}]),angular.module("magellan").factory("FocusSrv",["$timeout","$window",function(n,e){return function(t){n(function(){var n=e.document.getElementById(t);n&&n.focus()})}}]),angular.module("magellan").factory("IndexedDBSrv",["$window",function(n){var e="name",t=n.indexedDB||n.webkitIndexedDB||n.msIndexedDB,o=n.IDBKeyRange||n.webkitIDBKeyRange,r=n.IDBTransaction||n.webkitIDBTransaction;r&&(r.READ_WRITE=r.READ_WRITE||"readwrite",r.READ_ONLY=r.READ_ONLY||"readonly");var u=function(){return!!t},a=function(n,o){return new Promise(function(r,u){var a=t.open(n);a.onupgradeneeded=function(n){var t=n.target.result;t.createObjectStore(o,{keyPath:e})},a.onsuccess=function(n){r(n)},a.onerror=function(n){u(n)}})},i=function(n){return new Promise(function(e,o){var r=t.deleteDatabase(n);r.onsuccess=function(n){e(n)},r.onerror=function(n){o(n)}})},c=function(n,e,o){return new Promise(function(u,a){var i=t.open(n);i.onsuccess=function(n){var t=n.target.result,i=t.transaction(e,r.READ_WRITE),c=i.objectStore(e),l=c.add(o);l.onsuccess=function(n){u(n)},l.onerror=function(n){a(n)}}})},l=function(n,e,o){return new Promise(function(u,a){var i=t.open(n);i.onsuccess=function(n){var t=n.target.result,i=t.transaction(e,r.READ_WRITE),c=i.objectStore(e),l=c.put(o);l.onsuccess=function(n){u(n)},l.onerror=function(n){a(n)}}})},s=function(n,e,u){return new Promise(function(a,i){var c=null,l=t.open(n);l.onsuccess=function(n){var t=n.target.result,i=t.transaction(e,r.READ_ONLY),l=i.objectStore(e),s=o.only(u);l.openCursor(s).onsuccess=function(n){var e=n.target.result;e?(c=e.value,e["continue"]()):a(c)}},l.onerror=function(n){i(n)}})},f=function(n,e){return new Promise(function(o,u){var a=[],i=t.open(n);i.onsuccess=function(n){var t=n.target.result,u=t.transaction(e,r.READ_ONLY),i=u.objectStore(e);i.openCursor().onsuccess=function(n){var e=n.target.result;e?(a.push(e.value),e["continue"]()):o(a)}},i.onerror=function(n){u(n)}})};return{createDatabase:a,dropDatabase:i,addItem:c,putItem:l,retrieveItem:s,retrieveItems:f,indexedDBAvailable:u}}]),angular.module("magellan").factory("LogSrv",["AppConfig",function(n){var e=function(){n.LOG_INFO&&console.log.apply(console,arguments)},t=function(){n.LOG_ERROR&&console.error.apply(console,arguments)};return{logInfo:e,logError:t}}]),angular.module("magellan").controller("LoginCtrl",["$scope","UserSrv","FocusSrv",function(n,e,t){n.login=function(t,o){e.login(t,o).then(function(e){n.$emit("app.login",e.data)})["catch"](function(n){console.error(n)})},t("username")}]),angular.module("magellan").controller("LogoutCtrl",["$scope","UserSrv",function(n,e){e.logout().then(function(){n.$emit("app.logout")})}]),angular.module("magellan").config(["$locationProvider","$stateProvider","$urlRouterProvider",function(n,e,t){n.html5Mode(!0),t.otherwise("/home"),e.state("home",{url:"/home",templateUrl:"/build/views/home.partial.html"}).state("quiz",{url:"/quiz",templateUrl:"/build/views/quiz.partial.html"}).state("login",{url:"/login",templateUrl:"/build/views/login.partial.html"}).state("logout",{url:"/logout",controller:"LogoutCtrl"}).state("register",{url:"/register",templateUrl:"/build/views/register.partial.html"}).state("about",{url:"/about",templateUrl:"/build/views/about.partial.html"})}]),angular.module("magellan").factory("UserSrv",["$http","AuthTokenSrv",function(n,e){var t=this,o=function(){return n.get("/api/user")},r=function(){return new Promise(function(n,t){var r=e.getToken();r?(e.setToken(r),o().then(function(e){n(e.data)})["catch"](function(n){t(n)})):t("No token in storage")})},u=function(r,u){return n.post("/api/session",{username:r,password:u}).then(function(n){return t.token=n.data,e.setToken(t.token),o()})},a=function(){return new Promise(function(n,o){t.token=null,e.setToken(),n()})};return{getUser:o,getUserFromStorage:r,login:u,logout:a}}]);
//# sourceMappingURL=data:application/json;base64,
