var magellan=angular.module("magellan",["ui.router","ngProgress"],["$httpProvider",function(n){n.interceptors.push("AuthInterceptor")}]);magellan.constant("AppConfig",{"log.info":!0,"log.error":!0,"quiz.questions.number":16}),magellan.controller("AppCtrl",["$scope","$state","UserSrv","CountrySrv","QuizSrv",function(n,t,e,r,o){n.app={config:{title:"Magellan",subtitle:"Test your knowledge about the countries of our world",author:"Michael Stifter"}},e.getUserFromStorage().then(function(t){n.user=t,r.init().then(function(t){n.$broadcast("countries.loaded",t),o.setCountries(t)})})["catch"](function(n){}),n.isProgressBarVisible=function(){return t.is("quiz")},n.$on("app.login",function(e,u){n.user=u,r.init().then(function(t){n.$broadcast("countries.loaded",t),o.setCountries(t)}),t.go("quiz")}),n.$on("app.logout",function(e,r){n.user=null,t.go("home")})}]);var Quiz=function(){var n=[],t=!0;this.addQuestion=function(t){n.push(t)},this.getQuestions=function(){return n},this.isActive=function(){return t}},Question=function(n){n=n||{},this.type=n.type||this.getRandomType(),this.country=n.country||null,this.state=n.state||this.states.NOT_ANSWERED};Question.prototype.states={NOT_ANSWERED:1,CORRECT:2,INCORRECT:3},Question.prototype.types={CAPITAL_OF_COUNTRY:"capital-of-country",COUNTRY_OF_CAPITAL:"country-of-capital",INHABITANTS_OF_COUNTRY:"inhabitants-of-country"},Question.prototype.getRandomType=function(){var n=Object.keys(this.types);return this.types[n[getRandomInt(0,n.length-1)]]};var getRandomInt=function(n,t){return Math.floor(Math.random()*(t-n+1))+n},getStringBetween=function(n,t,e){var r=n.indexOf(t),o=n.indexOf(e);return r>=0&&o>=0&&o>r?n.substr(r+1,o-r-1):null};angular.module("magellan").config(["$locationProvider","$stateProvider","$urlRouterProvider",function(n,t,e){n.html5Mode(!0),e.otherwise("/home"),t.state("home",{url:"/home",templateUrl:"/build/views/partials/home.partial.html"}).state("quiz",{url:"/quiz",templateUrl:"/build/views/partials/quiz.partial.html"}).state("login",{url:"/login",templateUrl:"/build/views/partials/login.partial.html"}).state("logout",{url:"/logout",controller:"LogoutCtrl"}).state("register",{url:"/register",templateUrl:"/build/views/partials/register.partial.html"}).state("about",{url:"/about",templateUrl:"/build/views/partials/about.partial.html"})}]),angular.module("magellan").controller("DropdownCtrl",["$scope",function(n){function t(){u=!u}function e(){u=!0}function r(){u=!1}function o(){return u}var u=!1;n.toggleDropdown=t,n.showDropdown=e,n.hideDropdown=r,n.isDropdownVisible=o,n.handleClickOutside=function(n){console.log("CLICKED OUTSIDE")}}]),angular.module("magellan").controller("LoginCtrl",["$scope","UserSrv","FocusSrv",function(n,t,e){n.login=function(e,r){t.login(e,r).then(function(t){n.$emit("app.login",t.data)})["catch"](function(n){console.error(n)})},e("username")}]),angular.module("magellan").controller("LogoutCtrl",["$scope","UserSrv",function(n,t){t.logout().then(function(){n.$emit("app.logout")})}]),angular.module("magellan").controller("QuizCtrl",["$scope","QuizSrv","LogSrv","FocusSrv","ngProgressFactory",function(n,t,e,r,o){n.progressbar=o.createInstance(),n.progressbar.setParent(document.getElementById("quiz-progress")),n.progressbar.setAbsolute(),n.progressbar.setColor("#336e7b");var u=function(){t.init().then(function(){r("answer")})["catch"](function(n){e.error("Could not start quiz",n)})},i=function(){return t.isQuizRunning()},a=function(){return t.getCurrentQuestionNumber()},s=function(){return t.getNumberOfQuizQuestions()},c=function(){return g(t.getQuestionText(),"question-highlight")+"?"},l=function(){return g(t.getAnswerText(),"answer-highlight-"+t.getAnswerStatus())},f=function(){return t.questionAnswered()},g=function(n,t){return n.replace("[","<span class='"+t+"'>").replace("]","</span>")},p=function(e){e&&(t.submitAnswer(e),n.progressbar.set(100*t.getProgressPercentage()),r("btnNextQuestion"))},f=function(){return t.questionAnswered()},d=function(){n.qu.answer="",t.nextQuestion(),r("answer")},m=function(t){13==t.which&&p(n.qu.answer)};n.startQuiz=u,n.isQuizRunning=i,n.getCurrentQuestionNumber=a,n.getNumberOfQuizQuestions=s,n.getQuestionText=c,n.getAnswerText=l,n.submitAnswer=p,n.questionAnswered=f,n.nextQuestion=d,n.handleKeyPress=m,n.qu={answer:""}}]),angular.module("magellan").filter("renderHtml",["$sce",function(n){return n.trustAsHtml}]),angular.module("magellan").factory("AuthInterceptor",["AuthTokenSrv",function(n){var t=function(t){var e=n.getToken();return e&&(t.headers=t.headers||{},t.headers["X-Auth"]=e),t};return{request:t}}]),angular.module("magellan").factory("AuthTokenSrv",["$window",function(n){var t=n.sessionStorage,e="auth-token",r=function(){return t.getItem(e)},o=function(n){n?t.setItem(e,n):t.removeItem(e)};return{getToken:r,setToken:o}}]),angular.module("magellan").factory("CountrySrv",["$http","IndexedDBSrv","LogSrv",function(n,t,e){var r=null,o="magellan",u="countryStore",i="countries",a="version",s=t.indexedDBAvailable(),c=function(){return l()},l=function(){return s?new Promise(function(n,i){t.createDatabase(o,u).then(p).then(d).then(m).then(f).then(g).then(function(t){r=t.countries,e.info("loaded countries from",t.loadStrategy.toUpperCase()),n(r)})["catch"](function(n){e.error("failed to load countries",n),i(n)})}):v()},f=function(n){return new Promise(function(t,e){var r,o=n.internalVersion,u=n.externalVersion;r=null===o?"api":u>o?"api":"db",n.loadStrategy=r,t(n)})},g=function(n){return new Promise(function(e,r){var s=n.loadStrategy;switch(s){case"api":v().then(function(r){n.countries=r,t.putItem(o,u,{name:i,value:r}),t.putItem(o,u,{name:a,value:n.externalVersion}),e(n)})["catch"](function(n){r(n)});break;case"db":h(n).then(function(n){e(n)})["catch"](function(n){r(n)});break;default:r("Unknown load strategy")}})},p=function(){return new Promise(function(n,t){n({})})},d=function(n){return new Promise(function(e,r){t.retrieveItem(o,u,a).then(function(t){n.internalVersion=t.value,e(n)})["catch"](function(t){n.internalVersion=null,e(n)})})},m=function(n){return w().then(function(t){return n.externalVersion=t,n})},h=function(n){return new Promise(function(e,r){t.retrieveItem(o,u,i).then(function(t){n.countries=t.value,e(n)})["catch"](function(n){e(null)})})},v=function(){return new Promise(function(t,e){n.get("/api/countries").then(function(n){t(n.data)})["catch"](function(n){e(n)})})},w=function(){return new Promise(function(t,e){n.get("/api/countries/version").then(function(n){t(n.data.version||0)})["catch"](function(n){t(0)})})};return{init:c}}]),angular.module("magellan").factory("FocusSrv",["$timeout","$window",function(n,t){return function(e){n(function(){var n=t.document.getElementById(e);n&&n.focus()})}}]),angular.module("magellan").factory("IndexedDBSrv",["$window",function(n){var t="name",e=n.indexedDB||n.webkitIndexedDB||n.msIndexedDB,r=n.IDBKeyRange||n.webkitIDBKeyRange,o=n.IDBTransaction||n.webkitIDBTransaction;o&&(o.READ_WRITE=o.READ_WRITE||"readwrite",o.READ_ONLY=o.READ_ONLY||"readonly");var u=function(){return!!e},i=function(n,r){return new Promise(function(o,u){var i=e.open(n);i.onupgradeneeded=function(n){var e=n.target.result;e.createObjectStore(r,{keyPath:t})},i.onsuccess=function(n){o(n)},i.onerror=function(n){u(n)}})},a=function(n){return new Promise(function(t,r){var o=e.deleteDatabase(n);o.onsuccess=function(n){t(n)},o.onerror=function(n){r(n)}})},s=function(n,t,r){return new Promise(function(u,i){var a=e.open(n);a.onsuccess=function(n){var e=n.target.result,a=e.transaction(t,o.READ_WRITE),s=a.objectStore(t),c=s.add(r);c.onsuccess=function(n){u(n)},c.onerror=function(n){i(n)}}})},c=function(n,t,r){return new Promise(function(u,i){var a=e.open(n);a.onsuccess=function(n){var e=n.target.result,a=e.transaction(t,o.READ_WRITE),s=a.objectStore(t),c=s.put(r);c.onsuccess=function(n){u(n)},c.onerror=function(n){i(n)}}})},l=function(n,t,u){return new Promise(function(i,a){var s=null,c=e.open(n);c.onsuccess=function(n){var e=n.target.result,a=e.transaction(t,o.READ_ONLY),c=a.objectStore(t),l=r.only(u);c.openCursor(l).onsuccess=function(n){var t=n.target.result;t?(s=t.value,t["continue"]()):i(s)}},c.onerror=function(n){a(n)}})},f=function(n,t){return new Promise(function(r,u){var i=[],a=e.open(n);a.onsuccess=function(n){var e=n.target.result,u=e.transaction(t,o.READ_ONLY),a=u.objectStore(t);a.openCursor().onsuccess=function(n){var t=n.target.result;t?(i.push(t.value),t["continue"]()):r(i)}},a.onerror=function(n){u(n)}})};return{createDatabase:i,dropDatabase:a,addItem:s,putItem:c,retrieveItem:l,retrieveItems:f,indexedDBAvailable:u}}]),angular.module("magellan").factory("LogSrv",["AppConfig",function(n){var t=function(){n["log.info"]&&console.log.apply(console,arguments)},e=function(){n["log.error"]&&console.error.apply(console,arguments)};return{info:t,error:e}}]),angular.module("magellan").factory("QuizSrv",["AppConfig","LogSrv",function(n,t){var e=null,r=null,o=null,u=function(){return new Promise(function(t,e){s()||e("Countries not loaded"),null!==r&&r.isActive()===!0&&e("A quiz is currently being played"),r=new Quiz;for(var u=0;u<n["quiz.questions.number"];u++)r.addQuestion(new Question({country:a()}));o=0,t()})},i=function(n){e=n},a=function(){return e[getRandomInt(0,e.length-1)]},s=function(){return null!==e&&e.length>0},c=function(){return null!==r},l=function(){return r.getQuestions()[o]},f=function(){return null!==o?o+1:null},g=function(){return null!==r?r.getQuestions().length:null},p=function(n){var t=l(),e=m(t);t.state=n===e?t.states.CORRECT:t.states.INCORRECT},d=function(){var n=l();switch(n.type){case n.types.CAPITAL_OF_COUNTRY:return"Wie hei√üt die Hauptstadt von ["+n.country.name+"]";case n.types.COUNTRY_OF_CAPITAL:return"["+n.country.capital+"] ist die Hauptstadt von welchem Land";case n.types.INHABITANTS_OF_COUNTRY:return"Wie viele Einwohner hat ["+n.country.name+"]";default:t.error("Unknown question type",n.type)}},m=function(n){if(n&&n.type)switch(n.type){case n.types.CAPITAL_OF_COUNTRY:return n.country.capital;case n.types.COUNTRY_OF_CAPITAL:return n.country.name;case n.types.INHABITANTS_OF_COUNTRY:return n.country.population;default:return t.error("Unknown question type",n.type),null}},h=function(){var n=l(),t=n.state;switch(t){case n.states.CORRECT:return"correct";case n.states.INCORRECT:return"incorrect";default:return null}},v=function(){var n=l();return n.state!==n.states.NOT_ANSWERED},w=function(){var n=l();return"["+m(n)+"]"},y=function(){f()+1<=g()&&o++},A=function(){return f()/g()};return{init:u,setCountries:i,isQuizRunning:c,getCurrentQuestionNumber:f,getNumberOfQuizQuestions:g,getQuestionText:d,getAnswerStatus:h,getAnswerText:w,submitAnswer:p,questionAnswered:v,nextQuestion:y,getProgressPercentage:A}}]),angular.module("magellan").factory("UserSrv",["$http","AuthTokenSrv",function(n,t){var e=this,r=function(){return n.get("/api/user")},o=function(){return new Promise(function(n,e){var o=t.getToken();o?(t.setToken(o),r().then(function(t){n(t.data)})["catch"](function(n){e(n)})):e("No token in storage")})},u=function(o,u){return n.post("/api/session",{username:o,password:u}).then(function(n){return e.token=n.data,t.setToken(e.token),r()})},i=function(){return new Promise(function(n,r){e.token=null,t.setToken(),n()})};return{getUser:r,getUserFromStorage:o,login:u,logout:i}}]);
//# sourceMappingURL=data:application/json;base64,
