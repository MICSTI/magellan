var magellan=angular.module("magellan",["ui.router","ngProgress","ngAnimate"],["$httpProvider",function(e){e.interceptors.push("AuthInterceptor")}]);magellan.constant("AppConfig",{"log.info":!0,"log.error":!0,"quiz.country.questions":3,"quiz.country.types":{1:"CAPITAL_OF_COUNTRY",2:"COUNTRY_OF_CAPITAL",3:"POPULATION_OF_COUNTRY",4:"AREA_OF_COUNTRY",5:"FLAG_OF_COUNTRY",6:"LOCATION_OF_COUNTRY"},"settings.user.colors":["soft_red","thunderbird","old_brick","new_york_pink","snuff","honey_flower","san_marino","shakespeare","ming","gossip","eucalyptus","mountain_meadow","jade","confetti","california","burnt_orange","jaffa","gallery","edward","lynch"]}),magellan.controller("AppCtrl",["$rootScope","$scope","$state","AuthSrv","UserSrv","CountrySrv","QuizSrv",function(e,n,t,r,o,i,s){n.app={config:{title:"Magellan",subtitle:"Teste dein Wissen über die Länder unserer Erde",author:"Michael Stifter"}},r.getUser().then(function(e){n.user=e,n.$broadcast("user.loaded"),i.init().then(function(e){n.$broadcast("countries.loaded",e),s.setCountries(e)})})["catch"](function(e){n.user=null}),n.isProgressBarVisible=function(){return t.is("quiz")};var a=function(){t.go("home")};n.goToHome=a,e.$on("$stateChangeError",function(e,n,r,o,i,s){"Not authorized"===s&&t.go("home")}),n.$on("app.login",function(e,o){n.user=o,r.setUser(o),i.init().then(function(e){n.$broadcast("countries.loaded",e),s.setCountries(e)}),t.go("home")}),n.$on("app.logout",function(e,o){n.user=null,r.clearUser(),t.go("home")})}]);var createMap=function(){new Datamap({element:document.getElementById("map-container"),geographyConfig:{highlightOnHover:!0,popupOnHover:!1}})},Quiz=function(){var e=null,n=[];this.start=function(){if(n.length<=0)throw Error("Cannot start a quiz without questions");return this.nextQuestion()},this.isActive=function(){return this.hasStarted()&&!this.hasEnded()},this.hasStarted=function(){return null!==e},this.hasEnded=function(){return this.hasStarted()&&e>=n.length},this.submitted=!1,this.addQuestion=function(e){if(void 0===e)throw Error("No question object passed");var t=!0,r=["config","hint","solution","answer","question","getInfo","info","points","answered","hintsAllowed","hintsRemaining"];r.forEach(function(n){if(!e.hasOwnProperty(n))throw t=!1,new Error("Question must have property '"+n+"'")}),t&&n.push(e)},this.nextQuestion=function(){return null===e?e=0:e++,this.hasEnded()?!1:n[e]},this.currentQuestion=function(){return this.isActive()?n[e]:null},this.getTotalPoints=function(){if(!this.hasStarted())return null;var e=0;return n.forEach(function(n){var t=n.points();void 0!==t&&(e+=t)}),e},this.getCurrentQuestionNumber=function(){return null===e?null:e+1},this.getNumberOfQuestions=function(){return n.length}},Question=function(e){var n=null,t=null,r=null,o=null,i=0,s=null,a=null,u=!1,l=function(e){n=e.text,t=e.info||{},r=e.answer,s=e.checkAnswer||null,o=e.hints||{allowed:!1,maximum:0,cost:0,give:null}};e&&l(e),this.config=function(e){l(e)},this.question=function(){return n},this.info=function(e,n){return void 0===n?t[e]:void(t[e]=n)},this.getInfo=function(){return t},this.solution=function(){return u?r:null},this.hint=function(){if(!o.allowed)return null;if(o.allowed&&!o.give)throw new Error("Hints allowed but no give method passed");return i<o.maximum&&i++,o.give(i,r)},this.answer=function(e){return!u&&s?(u=!0,a=s(r,e,i,o.cost,t),a=Math.max(0,a),a=Math.floor(a)):void 0},this.points=function(){return u&&null!==a?a:void 0},this.answered=function(){return u},this.hintsAllowed=function(){return null!==o?o.allowed:null},this.hintsRemaining=function(){var e=this.hintsAllowed();return null===e||e===!1?null:o.maximum-i}},getRandomInt=function(e,n){return Math.floor(Math.random()*(n-e+1))+e},getStringBetween=function(e,n,t){var r=e.indexOf(n),o=e.indexOf(t);return r>=0&&o>=0&&o>r?e.substr(r+1,o-r-1):null},PasswordRequirementsValidator=function(){var e=this,n={minLength:8,maxLength:void 0,lowercaseChars:1,uppercaseChars:1,specialChars:1,numericChars:1},t=null;this.input=null,this.check=function(e){if("undefined"==typeof e)throw new Error("Missing mandatory input parameter");if("string"!=typeof e)throw new Error('First input parameter must be of type "string"');this.input=e;var n=[],t=r();return t.forEach(function(e){var t=i(e);t!==!0&&n.push(e)}),{passwordOk:0===n.length,failedChecks:n}},this.setConfig=function(e){t=e},this.getConfig=function(){return t||n};var r=function(){return Object.keys(e.getConfig())},o=function(n){return e.getConfig()[n]},i=function(n){if("string"!=typeof e.input)return!1;var t=o(n);if(!t)return!0;switch(n){case"minLength":return e.input.length>=t;case"maxLength":return e.input.length<=t;case"lowercaseChars":var r=e.input.length-e.input.replace(/[a-z]/g,"").length;return r>=t;case"uppercaseChars":var i=e.input.length-e.input.replace(/[A-Z]/g,"").length;return i>=t;case"specialChars":var s=e.input.length-e.input.replace(/[!@§$%&#^*_:;.,+"'`´\{\}\(\)\[\]\/\\-]/g,"").length;return s>=t;case"numericChars":var a=e.input.length-e.input.replace(/[0-9]/g,"").length;return a>=t;default:return}}};PasswordRequirementsValidator.CONFIG_PROPERTIES=["minLength","maxLength","lowercaseChars","uppercaseChars","specialChars","numericChars"],"undefined"!=typeof module&&module.exports&&(module.exports.Question=Question,module.exports.Quiz=Quiz,module.exports.PasswordRequirementsValidator=PasswordRequirementsValidator),angular.module("magellan").config(["$locationProvider","$stateProvider","$urlRouterProvider",function(e,n,t){e.html5Mode(!0),t.otherwise("/home");var r=function(e,n,t){return e.getUser().then(function(e){return e})["catch"](function(e){return t.reject("Not authorized")})};r.$inject=["AuthSrv","LogSrv","$q"],n.state("home",{url:"/home",templateUrl:"/build/views/partials/home.partial.html"}).state("quiz",{url:"/quiz",templateUrl:"/build/views/partials/quiz.partial.html",resolve:{auth:r}}).state("countries",{url:"/countries",templateUrl:"/build/views/partials/countries.partial.html",resolve:{auth:r}}).state("countries.detail",{url:"/:alpha3Code",templateUrl:"/build/views/partials/countries-detail.partial.html",resolve:{auth:r}}).state("login",{url:"/login",templateUrl:"/build/views/partials/login.partial.html"}).state("logout",{url:"/logout",controller:"LogoutCtrl"}).state("register",{url:"/register",templateUrl:"/build/views/partials/register.partial.html"}).state("settings",{url:"/settings",templateUrl:"/build/views/partials/settings.partial.html",resolve:{auth:r}}).state("password",{url:"/password",templateUrl:"/build/views/partials/password-change.partial.html",resolve:{auth:r}}).state("reset",{url:"/password/reset/:token",templateUrl:"/build/views/partials/password-reset.partial.html"}).state("forgot",{url:"/password/forgot",templateUrl:"/build/views/partials/password-forgot.partial.html"}).state("about",{url:"/about",templateUrl:"/build/views/partials/about.partial.html"}).state("highscore",{url:"/highscore",templateUrl:"/build/views/partials/highscore.partial.html",resolve:{auth:r}}).state("faq",{url:"/faq",templateUrl:"/build/views/partials/faq.partial.html",params:{action:null}}).state("countries-difficulty",{url:"/countries-difficulty",templateUrl:"/build/views/partials/country-difficulty.partial.html",resolve:{auth:r}})}]),angular.module("magellan").controller("CountriesCtrl",["$scope","CountrySrv",function(e,n){var t=null,r=null,o=function(){t=n.getCountriesByLetter(),r=Object.keys(t).sort(),e.$$phase?(e.countryKeys=r,e.countriesByLetter=t):e.$apply(function(){e.countryKeys=r,e.countriesByLetter=t})};n.areCountriesLoaded()&&o(),e.$on("countries.loaded",function(){o()})}]),angular.module("magellan").controller("CountryDetailCtrl",["$scope","CountrySrv","$stateParams",function(e,n,t){var r=t.alpha3Code;n.areCountriesLoaded()&&(e.country=n.getCountryByAlpha3(r)),e.$on("countries.loaded",function(){e.$apply(function(){e.country=n.getCountryByAlpha3(r)})});var o=function(e){return n.getCountryByAlpha3(e)};e.getCountryFromService=o}]),angular.module("magellan").controller("CountryDifficultyCtrl",["$scope","CountrySrv",function(e,n){var t=function(){var t=n.getCountries(),r={easy:[],medium:[],hard:[],unassigned:[]};t.sort(function(e,n){return n.population-e.population}).forEach(function(e){r[e.difficulty].push(e)}),e.$$phase?(e.difficulties=r,e.difficultyKeys=Object.keys(r)):e.$apply(function(){e.difficulties=r,e.difficultyKeys=Object.keys(r)})};n.areCountriesLoaded()&&t(),e.$on("countries.loaded",function(e,n){t()})}]),angular.module("magellan").controller("DropdownCtrl",["$scope",function(e){function n(){i=!i}function t(){i=!0}function r(){i=!1}function o(){return i}var i=!1;e.toggleDropdown=n,e.showDropdown=t,e.hideDropdown=r,e.isDropdownVisible=o,e.$on("click.outside",function(n,t){o()&&(e.$$phase?r():e.$apply(function(){r()}))})}]),angular.module("magellan").controller("FaqCtrl",["$scope","LogSrv","$stateParams",function(e,n,t){if(e.message=null,t.action){var r=t.action;switch(r){case"register.successful":e.message={type:"success",text:"Gratulation! Die Anmeldung war erfolgreich. Herzlich willkommen bei Magellan."};break;default:e.message=null}}}]),angular.module("magellan").controller("ForgotCtrl",["$scope","UserSrv","LogSrv","FocusSrv",function(e,n,t,r){e.passObj={},e.message={};var o=function(){return e.passObj.email?void n.forgotPassword({email:e.passObj.email}).then(function(e){var n=e.valid,t=void 0!==n?" Der Link ist "+n+" Stunden lang gültig.":"";s("success","Das E-Mail wurde erfolgreich versandt."+t)})["catch"](function(e){"No user with this e-mail address found"===e.message?s("error","Es wurde kein Benutzer mit dieser E-Mail-Adresse gefunden"):s("error","Beim Versenden des Links ist etwas schiefgegangen")}):void s("error","Alle Felder müssen ausgefüllt sein")},i=function(){o()},s=function(n,t){e.$$phase?e.message={type:n,text:t}:e.$apply(function(){e.message={type:n,text:t}})};r("#email"),e.forgotPassword=o,e.delegateSubmit=i}]),angular.module("magellan").controller("HighscoreCtrl",["$scope","ScoreSrv","LogSrv",function(e,n,t){e.scoreList=[],e.isDataLoading=!0,n.getHighscoreList().then(function(n){e.$$phase?e.scoreList=i(n):e.$apply(function(){e.scoreList=i(n)}),r(!1)})["catch"](function(e){t.error(e),r(!1)});var r=function(n){e.$$phase?e.isDataLoading=n:e.$apply(function(){e.isDataLoading=n})},o=function(n){return e.user._id===n},i=function(e){var n=0,t=null;return e.forEach(function(e){t&&e.score===t||(n++,e.rank=n+"."),t=e.score}),e};e.isMyself=o}]),angular.module("magellan").controller("LoginCtrl",["$scope","UserSrv","FocusSrv",function(e,n,t){e.message=null,e.login=function(t,r){n.login(t,r).then(function(n){e.message=null,e.$emit("app.login",n.data)})["catch"](function(n){console.error(n);var t;t=401===n.status?"Falscher Benutzername oder Passwort":"Beim Einloggen scheint etwas schief gegangen zu sein",e.message={type:"error",text:t}})},t("#username")}]),angular.module("magellan").controller("LogoutCtrl",["$scope","UserSrv",function(e,n){n.logout().then(function(){e.$emit("app.logout")})}]),angular.module("magellan").controller("MapCtrl",["$scope",function(e){}]),angular.module("magellan").controller("PasswordRequirementsCtrl",["$scope",function(e){console.log("PW REQUIREMENTS")}]),angular.module("magellan").controller("PasswordCtrl",["$scope","UserSrv","LogSrv","FocusSrv",function(e,n,t,r){e.passObj={},e.message={};var o=function(){return e.passObj.old&&e.passObj["new"]&&e.passObj.confirmation?e.passObj["new"]!==e.passObj.confirmation?void s("error","Die Passwörter stimmen nicht überein"):void n.updatePassword({old:e.passObj.old,password:e.passObj["new"]}).then(function(e){s("success","Das neue Passwort wurde erfolgreich gespeichert")})["catch"](function(e){"Old password incorrect"===e.message?s("error","Das alte Passwort ist nicht korrekt"):"Password does not match requirements"===e.message?s("error","Das Passwort entspricht nicht den Sicherheitsrichtlinien"):s("error","Das neue Passwort konnte nicht gespeichert werden")}):void s("error","Alle Felder müssen ausgefüllt sein")},i=function(){o()},s=function(n,t){e.$$phase?e.message={type:n,text:t}:e.$apply(function(){e.message={type:n,text:t}})};r("#password-current"),e.updatePassword=o,e.delegateSubmit=i}]),angular.module("magellan").controller("QuizDirectiveController",["$scope","QuizSrv","LogSrv","FocusSrv","ngProgressFactory","$filter",function(e,n,t,r,o,i){var s,a=function(){e.progressbar=o.createInstance(),e.progressbar.setParent(document.getElementById("quiz-progress")),e.progressbar.setAbsolute(),e.progressbar.setColor("#336e7b"),e.isResultsPageVisible=!1,e.achievements=[],e.bests=[],e.answerInput={},e.hint=null,e.multiplierOptions=[{value:1,label:""},{value:1e3,label:"Tsd."},{value:1e6,label:"Mio."}],s=null},u=function(){if(s=n.getCurrentQuestion(),e.hint=null,null!==s){if(s.getInfo().input&&0===s.getInfo().input.indexOf("number"))switch(s.getInfo().input){case"number.high":e.answerInput.multiplier={value:1e6,label:"Mio."};break;case"number.medium":e.answerInput.multiplier={value:1e3,label:"Tsd."};break;default:e.answerInput.multiplier={value:1,label:""}}else e.answerInput.multiplier=null;A(),r(".answerInput")}},l=function(){return s},c=function(){return n.getCurrentQuestionNumber()},f=function(){return n.getNumberOfQuizQuestions()},d=function(){return C(l().question(),"question-highlight")+"?"},g=function(){return s&&s.getInfo().media?s.getInfo().media:null},p=function(){e.isResultsPageVisible=!0},h=function(){e.$$phase?e.isResultsPageVisible=!1:e.$apply(function(){e.isResultsPageVisible=!1})},m=function(){return null===s?!1:null===s.hintsRemaining()?!1:s.hintsRemaining()>0},v=function(){if(e.answerInput.answer&&!s.answered()){var n=String(e.answerInput.answer).trim();s.getInfo().input&&0===s.getInfo().input.indexOf("number")&&(n=n.replace(",",".")),e.answerInput.multiplier&&(n*=e.answerInput.multiplier.value),e.answerInput.points=s.answer(n),r(P()?"#btnContinueFinished":"#btnNextQuestion")}},w=function(){return n.isQuizRunning()&&null!==s?s.answered():!1},b=function(){n.nextQuestion(),e.answerInput.answer="",u()},O=function(){e.hint=s.hint(),r(".answerInput")},C=function(e,n){return e.replace("[","<span class='"+n+"'>").replace("]","</span>")},y=function(e){13==e.which&&v()},A=function(){var n=c()/f()*100;e.progressbar.set(n)},P=function(){return c()>=f()},S=function(n,t,r){var o=[],i=!0;if(n.indexOf("overall_best")>=0&&(o.push({text:"Du hast einen neuen absoluten Rekord geschafft!"}),i=!1),n.indexOf("overall_best_equalised")>=0&&(o.push({text:"Du hast den aktuellen absoluten Rekord eingestellt!"}),i=!1),n.indexOf("personal_best")>=0&&n.indexOf("overall_best")<0&&(o.push({text:"Du hast einen neuen persönlichen Rekord geschafft!"}),i=!1),n.indexOf("personal_best_equalised")>=0&&n.indexOf("overall_best_equalised")<0&&(o.push({text:"Du hast gleich viele Punkte geschafft wie bei deinem persönlichen Rekord!"}),i=!1),n.indexOf("new_daily_best")>=0&&0===o.length&&o.push({text:"Du hast einen neuen persönlichen Tagesrekord geschafft!"}),e.$$phase?e.achievements=o:e.$apply(function(){e.achievements=o}),i&&t&&t.id&&t.date&&t.score&&r&&r.id&&r.date&&r.score){var s=[];r.type="overall",s.push(r),t.id!==r.id&&(t.type="personal",s.push(t)),e.$$phase?e.bests=s:e.$apply(function(){e.bests=s})}else e.$$phase?e.bests=null:e.$apply(function(){e.bests=null})},$=function(){e.progressbar.set(0),p(),b(),n.conclude().then(function(e){S(e.events||[],e.personalBest,e.overallBest)})["catch"](function(e){t.error(e)})},_=function(n){var t;if("personal"===n.type)t="Dein persönlicher Rekord liegt bei <span class='bold'>{POINTS} Punkten</span>, aufgestellt am {DATE}.";else{var r=n.id===e.user._id;t=r?"Du hältst den absoluten Rekord mit <span class='bold'>{POINTS} Punkten</span>, aufgestellt am {DATE}.":"<span class='highlight'>{USERNAME}</span> hält den absoluten Rekord mit <span class='bold'>{POINTS} Punkten</span>, aufgestellt am {DATE}."}return t.replace("{POINTS}",i("number")(n.score)).replace("{DATE}",T(n.date)).replace("{USERNAME}",n.username)},T=function(e){return e=new Date(e),U(e.getDate(),"00")+"."+U(e.getMonth()+1,"00")+"."+(e.getYear()+1900)},U=function(e,n){return String(n+e).slice(-n.length)},R=function(){quiz=null,e.$emit("quiz.restart"),a(),u()},L=function(e,n){if(13==e.which)switch(n){case"next_question":b();break;case"continue_finished":$()}};e.$on("quiz.start",function(e,n){h()}),e.$on("$destroy",function(e,t){n.hasQuizStarted()&&n.hasQuizEnded()&&n.dispose()}),a(),u(),e.getQuestion=l,e.getCurrentQuestionNumber=c,e.renderQuestionText=d,e.submitAnswer=v,e.questionAnswered=w,e.nextQuestion=b,e.handleKeyPress=y,e.getQuestionMedia=g,e.requestHint=O,e.wasLastQuestion=P,e.continueFinished=$,e.getBestText=_,e.restartQuiz=R,e.hintsAvailable=m,e.enterListener=L}]),angular.module("magellan").controller("QuizCtrl",["$scope","QuizSrv","LogSrv",function(e,n,t){var r=function(e){n.init().then(function(){e&&"function"==typeof e&&e()})["catch"](function(e){t.error(e)})},o=function(){return n.isQuizRunning()},i=function(){return n.hasQuizStarted()},s=function(){return n.hasQuizEnded()},a=function(){return n.getTotalPoints()};e.$on("quiz.restart",function(t,o){n.dispose(),r(function(){e.$broadcast("quiz.start")})}),e.startQuiz=r,e.isQuizRunning=o,e.hasQuizStarted=i,e.hasQuizEnded=s,e.getTotalPoints=a}]),angular.module("magellan").controller("RegisterCtrl",["$scope","LogSrv","FocusSrv","UserSrv","$state","$window",function(e,n,t,r,o,i){e.newUser={},e.message=null;var s=function(t){return t?void(a()&&r.register(e.newUser).then(function(n){200===n.status?(e.$emit("app.login",n.data),o.go("faq",{action:"register.successful"})):e.message={type:"error",text:"Bei der Anmeldung scheint etwas schief gegangen zu sein"}})["catch"](function(t){n.error(t);var r;switch(t.message){case"Username already exists":r="Der Benutzername ist bereits in Verwendung";break;case"Email address already exists":r="Die E-Mail-Adresse ist bereits in Verwendung";break;case"Password does not match requirements":r="Das Passwort entspricht nicht den Sicherheitsrichtlinien";break;default:r="Bei der Anmeldung scheint etwas schief gegangen zu sein"}e.$$phase?e.message={type:"error",text:r}:e.$apply(function(){e.message={type:"error",text:r}})})):!1},a=function(){e.message=null;var n=e.newUser.password,t=e.newUser.password2;return e.newUser.username&&e.newUser.email&&n&&t?""===n||""===t?e.message={type:"error",text:"Die Passwörter können nicht leer sein"}:n!==t&&(e.message={type:"error",text:"Die Passwörter stimmen nicht überein"}):e.message={type:"error",text:"Alle Felder müssen ausgefüllt sein"},!e.message},u=function(){s(!0)};e.delegateSubmit=u,e.register=s,t("#username")}]),angular.module("magellan").controller("ResetCtrl",["$scope","UserSrv","LogSrv","FocusSrv","$stateParams",function(e,n,t,r,o){e.passObj={},e.message={};var i=o.token,s=function(){return e.passObj["new"]&&e.passObj.confirmation?e.passObj["new"]!==e.passObj.confirmation?void u("error","Die Passwörter stimmen nicht überein"):i?void n.resetPassword({token:i,password:e.passObj["new"]}).then(function(e){u("success","Das Passwort wurde erfolgreich gespeichert")})["catch"](function(e){"Invalid token"===e.message?u("error","Der Zurücksetzen-Link ist leider nicht mehr gültig"):u("error","Das neue Passwort konnte nicht gespeichert werden")}):void u("error","Kein gültiger Zurücksetzen-Link"):void u("error","Alle Felder müssen ausgefüllt sein")},a=function(){s()},u=function(n,t){e.$$phase?e.message={type:n,text:t}:e.$apply(function(){e.message={type:n,text:t}})};r("#password-new"),e.resetPassword=s,e.delegateSubmit=a}]),angular.module("magellan").controller("SettingsCtrl",["$scope","AppConfig","FocusSrv","LogSrv","UserSrv",function(e,n,t,r,o){var i=function(){e.message=null;var i=n["settings.user.colors"];e.userObj={username:e.user.username,email:e.user.email,color:e.user.color},e.userColors=i;var s=function(n){e.userObj.color=n},a=function(){o.updateBasic(e.userObj).then(function(n){e.user.username=e.userObj.username,e.user.email=e.userObj.email,e.user.color=e.userObj.color,e.$apply(function(){e.message={type:"success",text:"Einstellungen wurden erfolgreich gespeichert"}})})["catch"](function(n){r.error("Update user",n);var t;switch(n.message){case"Username already exists":t="Der Benutzername ist bereits vergeben";break;case"Email address already exists":t="Die E-Mail-Adresse ist bereits vergeben";break;default:t="Die Einstellungen konnten nicht gespeichert werden"}e.$apply(function(){e.message={type:"error",text:t}})})},u=function(){a(!0)};e.setColor=s,e.updateUser=a,e.delegateSubmit=u,t("#username")};e.user&&i(),e.$on("user.loaded",function(e,n){i()})}]),angular.module("magellan").directive("clickOutside",["$parse","$document","$rootScope",function(e,n,t){return{restrict:"A",link:function(e,r,o){function i(e){e.stopPropagation();var n=$(e.target).parents(),o=-1!==n.index($(r)),i=e.target===r[0],s=!o&&!i;s&&t.$broadcast("click.outside",e)}n.bind("click",i),r.bind("remove",function(){n.unbind("click",i)})}}}]),angular.module("magellan").directive("map",function(){return{restrict:"E",templateUrl:"build/views/templates/map.template.html",controller:"MapCtrl",link:function(e,n,t){new Datamap({element:document.getElementById("map-container"),fills:{defaultFill:"#22a7f0"},geographyConfig:{highlightOnHover:!0,popuponHover:!0,highlightFillColor:"#019875",highlightBorderColor:"rgba(200, 247, 197, 0.4)"}})}}}),angular.module("magellan").directive("passwordRequirements",function(){return{restrict:"E",templateUrl:"build/views/templates/password-requirements.template.html",controller:"PasswordRequirementsCtrl",link:function(e,n,t){}}}),angular.module("magellan").directive("quiz",function(){return{templateUrl:"build/views/templates/quiz-directive.template.html",scope:!0,controller:"QuizDirectiveController",restrict:"E",link:function(e,n,t){}}}),angular.module("magellan").factory("AuthInterceptor",["AuthTokenSrv",function(e){var n=function(n){var t=e.getToken();return t&&(n.headers=n.headers||{},n.headers["X-Auth"]=t),n};return{request:n}}]),angular.module("magellan").filter("renderHtml",["$sce",function(e){return function(n){return e.trustAsHtml(n)}}]),angular.module("magellan").filter("textOrNumber",["$filter",function(e){return function(n,t){return t=void 0!==t?0:t,isNaN(n)?n:e("number")(n,t)}}]),angular.module("magellan").factory("AuthTokenSrv",["$window",function(e){var n=e.sessionStorage,t="auth-token",r=function(){return n.getItem(t)},o=function(e){e?n.setItem(t,e):n.removeItem(t)};return{getToken:r,setToken:o}}]),angular.module("magellan").factory("AuthSrv",["UserSrv",function(e){var n=null,t=function(){return new Promise(function(t,r){null!==n?t(n):e.getUserFromStorage().then(function(e){n=e,t(e)})["catch"](function(e){r("Not logged in")})})},r=function(e){n=e},o=function(){n=null};return{setUser:r,getUser:t,clearUser:o}}]),angular.module("magellan").factory("CountrySrv",["$http","IndexedDBSrv","LogSrv",function(e,n,t){var r=null,o=null,i=null,s="magellan",a="countryStore",u="countries",l="version",c=n.indexedDBAvailable(),f=function(){return d()},d=function(){return c?new Promise(function(e,u){n.createDatabase(s,a).then(h).then(m).then(v).then(g).then(p).then(function(n){r=n.countries,t.info("loaded countries from",n.loadStrategy.toUpperCase()),o={},i={},r.forEach(function(e){o[e.alpha3Code]=e;var n=e.name.substr(0,1).toUpperCase();switch(n){case"Ä":n="A";break;case"Ö":n="O";break;case"Ü":n="U"}void 0===i[n]&&(i[n]=[]),i[n].push({alpha3Code:e.alpha3Code,name:e.name})}),e(r)})["catch"](function(e){t.error("failed to load countries",e),u(e)})}):b()},g=function(e){return new Promise(function(n,t){var r,o=e.internalVersion,i=e.externalVersion;r=null===o?"api":i>o?"api":"db",e.loadStrategy=r,n(e)})},p=function(e){return new Promise(function(t,r){var o=e.loadStrategy;switch(o){case"api":b().then(function(r){e.countries=r,n.putItem(s,a,{name:u,value:r}),n.putItem(s,a,{name:l,value:e.externalVersion}),t(e)})["catch"](function(e){r(e)});break;case"db":w(e).then(function(e){t(e)})["catch"](function(e){r(e)});break;default:r("Unknown load strategy")}})},h=function(){return new Promise(function(e,n){e({})})},m=function(e){return new Promise(function(t,r){n.retrieveItem(s,a,l).then(function(n){e.internalVersion=n.value,t(e)})["catch"](function(n){e.internalVersion=null,t(e)})})},v=function(e){return O().then(function(n){return e.externalVersion=n,e})},w=function(e){return new Promise(function(t,r){n.retrieveItem(s,a,u).then(function(n){e.countries=n.value,t(e)})["catch"](function(e){t(null)})})},b=function(){return new Promise(function(n,t){e.get("/api/countries").then(function(e){n(e.data)})["catch"](function(e){t(e)})})},O=function(){return new Promise(function(n,t){e.get("/api/countries/version").then(function(e){n(e.data.version||0)})["catch"](function(e){n(0)})})},C=function(e){return null===o?null:o[e]},y=function(){return r},A=function(){return null===i?null:i},P=function(){return null!==r&&r.length>0};return{init:f,getCountries:y,getCountryByAlpha3:C,getCountriesByLetter:A,areCountriesLoaded:P}}]),angular.module("magellan").factory("EventSrv",["$http","LogSrv",function(e,n){var t=function(t){e.post("/api/event/add",{name:t}).success(function(e){})["catch"](function(e){n.error("failed to add event",e)})};return{add:t}}]),angular.module("magellan").factory("FocusSrv",["$timeout","$window",function(e,n){return function(t){e(function(){var e=n.document.querySelector(t);e&&e.focus()})}}]),angular.module("magellan").factory("IndexedDBSrv",["$window",function(e){var n="name",t=e.indexedDB||e.webkitIndexedDB||e.msIndexedDB,r=e.IDBKeyRange||e.webkitIDBKeyRange,o=e.IDBTransaction||e.webkitIDBTransaction;o&&(o.READ_WRITE=o.READ_WRITE||"readwrite",o.READ_ONLY=o.READ_ONLY||"readonly");var i=function(){return!!t},s=function(e,r){return new Promise(function(o,i){var s=t.open(e);s.onupgradeneeded=function(e){var t=e.target.result;t.createObjectStore(r,{keyPath:n})},s.onsuccess=function(e){o(e)},s.onerror=function(e){i(e)}})},a=function(e){return new Promise(function(n,r){var o=t.deleteDatabase(e);o.onsuccess=function(e){n(e)},o.onerror=function(e){r(e)}})},u=function(e,n,r){return new Promise(function(i,s){var a=t.open(e);a.onsuccess=function(e){var t=e.target.result,a=t.transaction(n,o.READ_WRITE),u=a.objectStore(n),l=u.add(r);l.onsuccess=function(e){i(e)},l.onerror=function(e){s(e)}}})},l=function(e,n,r){return new Promise(function(i,s){var a=t.open(e);a.onsuccess=function(e){var t=e.target.result,a=t.transaction(n,o.READ_WRITE),u=a.objectStore(n),l=u.put(r);l.onsuccess=function(e){i(e)},l.onerror=function(e){s(e)}}})},c=function(e,n,i){return new Promise(function(s,a){var u=null,l=t.open(e);l.onsuccess=function(e){var t=e.target.result,a=t.transaction(n,o.READ_ONLY),l=a.objectStore(n),c=r.only(i);l.openCursor(c).onsuccess=function(e){var n=e.target.result;n?(u=n.value,n["continue"]()):s(u)}},l.onerror=function(e){a(e)}})},f=function(e,n){return new Promise(function(r,i){var s=[],a=t.open(e);a.onsuccess=function(e){var t=e.target.result,i=t.transaction(n,o.READ_ONLY),a=i.objectStore(n);a.openCursor().onsuccess=function(e){var n=e.target.result;n?(s.push(n.value),n["continue"]()):r(s)}},a.onerror=function(e){i(e)}})};return{createDatabase:s,dropDatabase:a,addItem:u,putItem:l,retrieveItem:c,retrieveItems:f,indexedDBAvailable:i}}]),angular.module("magellan").factory("LogSrv",["AppConfig",function(e){var n=function(){e["log.info"]&&console.log.apply(console,arguments)},t=function(){e["log.error"]&&console.error.apply(console,arguments)};return{info:n,error:t}}]),angular.module("magellan").factory("QuizSrv",["AppConfig","CountrySrv","ScoreSrv","EventSrv",function(e,n,t,r){var o=null,i=null,s=function(e){o=e},a=function(){return null!==o&&o.length>0},u=function(){return new Promise(function(e,n){a||n("Countries have not been loaded"),i=g("country"),r.add("quiz.start"),e(i.start())})},l=function(){i=null},c=function(){return null===i?!1:i.hasStarted()&&!i.hasEnded()},f=function(){return null===i?!1:i.hasStarted()},d=function(){return null===i?!1:i.hasEnded()},g=function(e){switch(e){case"country":default:return p()}},p=function(){for(var t=new Quiz,r=100,i=3,s=25,a=2.5,u=e["quiz.country.types"],l=(Object.keys(u).length,[]),c=e["quiz.country.questions"],f=o.filter(function(e){return"easy"===e.difficulty}),d=o.filter(function(e){return"medium"===e.difficulty}),g=o.filter(function(e){return"hard"===e.difficulty}),p=0;c>p;p++){for(var C,y=!1;!y;)C=5>p?f[getRandomInt(0,f.length-1)]:10>p?d[getRandomInt(0,d.length-1)]:g[getRandomInt(0,g.length-1)],y=l.indexOf(C.alpha3Code)<0;l.push(C.alpha3Code)}var A=l.splice(0,l.length-1),P=_(A);P.push(l[l.length-1]);for(var S=[],$=0;c>$;$++)S.push(6);var T=_(S),U=0;return P.forEach(function(e,o){U++;var l=n.getCountryByAlpha3(e),f=u[T[o]],d=h(f,l),g={type:f,difficulty:l.difficulty,input:v(f),unit:w(f)},p=m(f,l),C=b(f,r,a),y=O(f,i,s);U>=c&&(g.bonus=!0),"FLAG_OF_COUNTRY"===f&&(g.media="flag",g.alpha2Code=l.alpha2Code.toLocaleLowerCase()),"LOCATION_OF_COUNTRY"===f&&(g.media="map",g.alpha2Code=l.alpha2Code.toLocaleLowerCase()),t.addQuestion(new Question({text:d,info:g,answer:p,checkAnswer:C,hints:y}))}),t},h=function(e,n){switch(e){case"CAPITAL_OF_COUNTRY":return"Wie heißt die Hauptstadt von ["+n.name+"]";case"COUNTRY_OF_CAPITAL":return"["+n.capital+"] ist die Hauptstadt von welchem Land";case"POPULATION_OF_COUNTRY":return"Wie viele Menschen leben in ["+n.name+"]";case"AREA_OF_COUNTRY":return"Wie groß ist die Fläche von ["+n.name+"]";case"FLAG_OF_COUNTRY":return"Welches Land hat diese Flagge";case"LOCATION_OF_COUNTRY":return"Wo befindet sich ["+n.name+"]";default:return"?"}},m=function(e,n){switch(e){case"CAPITAL_OF_COUNTRY":var t=void 0!==n.altSpellings&&void 0!==n.altSpellings.capital?n.altSpellings.capital:[];return{correct:n.capital,altSpellings:t};case"COUNTRY_OF_CAPITAL":case"FLAG_OF_COUNTRY":var t=void 0!==n.altSpellings&&void 0!==n.altSpellings.name?n.altSpellings.name:[];return{correct:n.name,altSpellings:t};case"POPULATION_OF_COUNTRY":return{correct:n.population};case"AREA_OF_COUNTRY":return{correct:n.area};case"LOCATION_OF_COUNTRY":return{correct:n.alpha2Code};default:return"?"}},v=function(e){switch(e){case"POPULATION_OF_COUNTRY":return"number.high";case"AREA_OF_COUNTRY":return"number.medium";case"LOCATION_OF_COUNTRY":return"map.point";case"CAPITAL_OF_COUNTRY":case"COUNTRY_OF_CAPITAL":case"FLAG_OF_COUNTRY":default:return"text.standard"}},w=function(e){switch(e){case"AREA_OF_COUNTRY":return"km²";case"POPULATION_OF_COUNTRY":return"Einwohner";default:return null}},b=function(e,n,t){switch(e){case"CAPITAL_OF_COUNTRY":case"COUNTRY_OF_CAPITAL":case"FLAG_OF_COUNTRY":case"LOCATION_OF_COUNTRY":return function(e,r,o,i,s){var a;a=e.altSpellings&&e.altSpellings.length>0?e.altSpellings.map(function(e){return e.toLocaleLowerCase()}):[];var u=r.toLocaleLowerCase()===e.correct.toLocaleLowerCase()||a&&a.indexOf(r)>=0,l=u?n:0;return o>0&&(l-=o*i),void 0!==s&&void 0!==s.bonus&&s.bonus===!0&&(l*=t),l};case"POPULATION_OF_COUNTRY":case"AREA_OF_COUNTRY":return function(e,n,r,o,i){var s,a=Math.abs(n-e.correct)/e.correct*100;return s=3>=a?100:6>=a?90:9>=a?80:12>=a?70:14>=a?60:16>=a?50:18>=a?40:20>=a?30:25>=a?20:30>=a?10:0,r>0&&(s-=r*o),void 0!==i&&void 0!==i.bonus&&i.bonus===!0&&(s*=t),s};default:return"?"}},O=function(e,n,t){switch(e){case"CAPITAL_OF_COUNTRY":case"COUNTRY_OF_CAPITAL":case"FLAG_OF_COUNTRY":return{allowed:!0,maximum:n,cost:t,give:function(e,n){return n.correct.substr(0,e)}};case"POPULATION_OF_COUNTRY":case"AREA_OF_COUNTRY":return{allowed:!1};default:return"?"}},C=function(){return c()?i.getCurrentQuestionNumber():null},y=function(){return c()?i.getNumberOfQuestions():null},A=function(){return c()?i.currentQuestion():null},P=function(){c()&&i.nextQuestion()},S=function(){return null===i?null:i.getTotalPoints()},$=function(){return new Promise(function(e,n){null!==i&&i.hasEnded()?(i.submitted===!0&&n("Quiz has already been submitted"),i.submitted=!0,t.putHighscore(i.getTotalPoints()).then(function(n){r.add("quiz.finish"),e(n)})["catch"](function(e){
n(e)})):n("No quiz is currently running")})},_=function(e){for(var n,t,r=e.length;0!==r;)t=Math.floor(Math.random()*r),r-=1,n=e[r],e[r]=e[t],e[t]=n;return e};return{init:u,setCountries:s,isQuizRunning:c,hasQuizStarted:f,hasQuizEnded:d,getCurrentQuestionNumber:C,getNumberOfQuizQuestions:y,getCurrentQuestion:A,nextQuestion:P,getTotalPoints:S,conclude:$,dispose:l}}]),angular.module("magellan").factory("ScoreSrv",["$http",function(e){var n=function(){return new Promise(function(n,t){e.get("/api/scores/all").success(function(e){n(e)}).error(function(e){t(e)})})},t=function(){return new Promise(function(n,t){e.get("/api/scores/user").success(function(e){n(e)}).error(function(e){t(e)})})},r=function(){return new Promise(function(n,t){e.get("/api/scores/high").success(function(e){n(e)}).error(function(e){t(e)})})},o=function(n){return new Promise(function(t,r){e.put("/api/scores",{score:n}).success(function(e){t(e)}).error(function(e){r(e)})})};return{getHighscoreList:n,getUserHighscore:t,getOverallHighscore:r,putHighscore:o}}]),angular.module("magellan").factory("UserSrv",["$http","AuthTokenSrv","AppConfig",function(e,n,t){var r=this,o=function(){return e.get("/api/user")},i=function(){return new Promise(function(e,t){var r=n.getToken();r?(n.setToken(r),o().then(function(n){e(n.data)})["catch"](function(e){t(e)})):t("No token in storage")})},s=function(t,i){return e.post("/api/session",{username:t,password:i}).then(function(e){return r.token=e.data,n.setToken(r.token),o()})},a=function(){return new Promise(function(e,t){r.token=null,n.setToken(),e()})},u=function(n){return new Promise(function(r,o){var i=t["settings.user.colors"];n.color=i[getRandomInt(0,i.length-1)],e.post("/api/user",n).success(function(e){s(n.username,n.password).then(function(e){r(e)})["catch"](function(e){o(e)})}).error(function(e){o(e)})})},l=function(n){return new Promise(function(t,r){e.put("/api/user/basic",n).success(function(e){t(e)}).error(function(e){r(e)})})},c=function(n){return new Promise(function(t,r){e.put("/api/user/password",n).success(function(e){t(e)}).error(function(e){r(e)})})},f=function(n){return new Promise(function(t,r){e.post("/api/password/reset",n).success(function(e){t(e)}).error(function(e){r(e)})})},d=function(n){return new Promise(function(t,r){e.post("/api/password/forgot",n).success(function(e){t(e)}).error(function(e){r(e)})})};return{getUser:o,getUserFromStorage:i,login:s,logout:a,register:u,updateBasic:l,updatePassword:c,resetPassword:f,forgotPassword:d}}]);
//# sourceMappingURL=data:application/json;base64,
