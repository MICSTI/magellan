var magellan=angular.module("magellan",["ui.router","ngProgress","ngAnimate"],["$httpProvider",function(n){n.interceptors.push("AuthInterceptor")}]);magellan.constant("AppConfig",{"log.info":!0,"log.error":!0,"quiz.country.questions":16,"quiz.country.types":{1:"CAPITAL_OF_COUNTRY",2:"COUNTRY_OF_CAPITAL",3:"POPULATION_OF_COUNTRY",4:"AREA_OF_COUNTRY"}}),magellan.controller("AppCtrl",["$scope","$state","UserSrv","CountrySrv","QuizSrv",function(n,t,e,r,o){n.app={config:{title:"Magellan",subtitle:"Test your knowledge about the countries of our world",author:"Michael Stifter"}},e.getUserFromStorage().then(function(t){n.user=t,r.init().then(function(t){n.$broadcast("countries.loaded",t),o.setCountries(t)})})["catch"](function(n){}),n.isProgressBarVisible=function(){return t.is("quiz")},n.$on("app.login",function(e,u){n.user=u,r.init().then(function(t){n.$broadcast("countries.loaded",t),o.setCountries(t)}),t.go("quiz")}),n.$on("app.logout",function(e,r){n.user=null,t.go("home")})}]);var Quiz=function(){var n=null,t=[];this.start=function(){if(t.length<=0)throw Error("Cannot start a quiz without questions");return this.nextQuestion()},this.isActive=function(){return this.hasStarted()&&!this.hasEnded()},this.hasStarted=function(){return null!==n},this.hasEnded=function(){return this.hasStarted()&&n>=t.length},this.addQuestion=function(n){if(void 0===n)throw Error("No question object passed");var e=!0,r=["config","hint","solution","answer","question","getInfo","info","points","answered","hintsAllowed","hintsRemaining"];r.forEach(function(t){if(!n.hasOwnProperty(t))throw e=!1,new Error("Question must have property '"+t+"'")}),e&&t.push(n)},this.nextQuestion=function(){return null===n?n=0:n++,this.hasEnded()?this.isActive():t[n]},this.currentQuestion=function(){return this.isActive()?t[n]:null},this.getTotalPoints=function(){if(!this.hasStarted())return null;var n=0;return t.forEach(function(t){var e=t.points();void 0!==e&&(n+=e)}),n},this.getCurrentQuestionNumber=function(){return null===n?null:n+1},this.getNumberOfQuestions=function(){return t.length}},Question=function(n){var t=null,e=null,r=null,o=null,u=0,i=null,a=null,s=!1,l=function(n){t=n.text,e=n.info||{},r=n.answer,i=n.checkAnswer||null,o=n.hints||{allowed:!1,maximum:0,cost:0,give:null}};n&&l(n),this.config=function(n){l(n)},this.question=function(){return t},this.info=function(n,t){return void 0===t?e[n]:void(e[n]=t)},this.getInfo=function(){return e},this.solution=function(){return s?r:null},this.hint=function(){if(!o.allowed||u>=o.maximum)return null;if(o.allowed&&!o.give)throw new Error("Hints allowed but no give method passed");return u++,o.give(u,r)},this.answer=function(n){if(!s&&i)return s=!0,a=i(r,n,e),o.allowed&&u>0&&(a-=u*o.cost),Math.max(0,a)},this.points=function(){if(s&&null!==a)return a},this.answered=function(){return s},this.hintsAllowed=function(){return null!==o?o.allowed:null},this.hintsRemaining=function(){var n=this.hintsAllowed();return null===n||n===!1?null:o.maximum-u}},getRandomInt=function(n,t){return Math.floor(Math.random()*(t-n+1))+n},getStringBetween=function(n,t,e){var r=n.indexOf(t),o=n.indexOf(e);return r>=0&&o>=0&&o>r?n.substr(r+1,o-r-1):null};"undefined"!=typeof module&&module.exports&&(module.exports.Question=Question,module.exports.Quiz=Quiz),angular.module("magellan").config(["$locationProvider","$stateProvider","$urlRouterProvider",function(n,t,e){n.html5Mode(!0),e.otherwise("/home"),t.state("home",{url:"/home",templateUrl:"/build/views/partials/home.partial.html"}).state("quiz",{url:"/quiz",templateUrl:"/build/views/partials/quiz.partial.html"}).state("countries",{url:"/countries",templateUrl:"/build/views/partials/countries.partial.html"}).state("countries.detail",{url:"/:alpha3Code",templateUrl:"/build/views/partials/countries-detail.partial.html"}).state("login",{url:"/login",templateUrl:"/build/views/partials/login.partial.html"}).state("logout",{url:"/logout",controller:"LogoutCtrl"}).state("register",{url:"/register",templateUrl:"/build/views/partials/register.partial.html"}).state("settings",{url:"/settings",templateUrl:"/build/views/partials/settings.partial.html"}).state("about",{url:"/about",templateUrl:"/build/views/partials/about.partial.html"})}]),angular.module("magellan").controller("CountriesCtrl",["$scope","CountrySrv",function(n,t){var e=null,r=null,o=function(){e=t.getCountriesByLetter(),r=Object.keys(e),n.$$phase?(n.countryKeys=r,n.countriesByLetter=e):n.$apply(function(){n.countryKeys=r,n.countriesByLetter=e})};t.areCountriesLoaded()&&o(),n.$on("countries.loaded",function(){o()})}]),angular.module("magellan").controller("CountryDetailCtrl",["$scope","CountrySrv","$stateParams",function(n,t,e){var r=e.alpha3Code;t.areCountriesLoaded()&&(n.country=t.getCountryByAlpha3(r)),n.$on("countries.loaded",function(){n.$apply(function(){n.country=t.getCountryByAlpha3(r)})});var o=function(n){return t.getCountryByAlpha3(n)};n.getCountryFromService=o}]),angular.module("magellan").controller("DropdownCtrl",["$scope",function(n){function t(){u=!u}function e(){u=!0}function r(){u=!1}function o(){return u}var u=!1;n.toggleDropdown=t,n.showDropdown=e,n.hideDropdown=r,n.isDropdownVisible=o,n.handleClickOutside=function(n){console.log("CLICKED OUTSIDE")}}]),angular.module("magellan").controller("LoginCtrl",["$scope","UserSrv","FocusSrv",function(n,t,e){n.login=function(e,r){t.login(e,r).then(function(t){n.$emit("app.login",t.data)})["catch"](function(n){console.error(n)})},e("username")}]),angular.module("magellan").controller("LogoutCtrl",["$scope","UserSrv",function(n,t){t.logout().then(function(){n.$emit("app.logout")})}]),angular.module("magellan").controller("QuizCtrl",["$scope","QuizSrv","LogSrv","FocusSrv","ngProgressFactory",function(n,t,e,r,o){n.progressbar=o.createInstance(),n.progressbar.setParent(document.getElementById("quiz-progress")),n.progressbar.setAbsolute(),n.progressbar.setColor("#336e7b");var u=null,i=function(){t.init().then(function(){e.info("Quiz started"),a()})["catch"](function(n){e.error(n)})},a=function(){u=t.getCurrentQuestion(),r("answer")},s=function(n,t){return n.replace("[","<span class='"+t+"'>").replace("]","</span>")},l=function(n){n&&(console.log(u.answer(n)),r("btnNextQuestion"))},c=function(t){13==t.which&&l(n.answerObj.answer)},f=function(){return t.isQuizRunning()},d=function(){return t.getCurrentQuestionNumber()},g=function(){return t.getNumberOfQuizQuestions()},h=function(){return!(!f()||null===u)&&u.answered()},m=function(){return null===u?null:s(u.question(),"question-highlight")+"?"},p=function(){return null===u?null:u.solution().correct},v=function(){t.nextQuestion(),n.answerObj.answer="",a()};n.startQuiz=i,n.isQuizRunning=f,n.getCurrentQuestionNumber=d,n.getNumberOfQuizQuestions=g,n.getQuestionText=m,n.getAnswerText=p,n.handleKeyPress=c,n.submitAnswer=l,n.questionAnswered=h,n.nextQuestion=v,n.answerObj={answer:""},a()}]),angular.module("magellan").filter("renderHtml",["$sce",function(n){return function(t){return n.trustAsHtml(t)}}]),angular.module("magellan").factory("AuthInterceptor",["AuthTokenSrv",function(n){var t=function(t){var e=n.getToken();return e&&(t.headers=t.headers||{},t.headers["X-Auth"]=e),t};return{request:t}}]),angular.module("magellan").factory("AuthTokenSrv",["$window",function(n){var t=n.sessionStorage,e="auth-token",r=function(){return t.getItem(e)},o=function(n){n?t.setItem(e,n):t.removeItem(e)};return{getToken:r,setToken:o}}]),angular.module("magellan").factory("CountrySrv",["$http","IndexedDBSrv","LogSrv",function(n,t,e){var r=null,o=null,u=null,i="magellan",a="countryStore",s="countries",l="version",c=t.indexedDBAvailable(),f=function(){return d()},d=function(){return c?new Promise(function(n,s){t.createDatabase(i,a).then(m).then(p).then(v).then(g).then(h).then(function(t){r=t.countries,e.info("loaded countries from",t.loadStrategy.toUpperCase()),o={},u={},r.forEach(function(n){o[n.alpha3Code]=n;var t=n.name.substr(0,1).toUpperCase();switch(t){case"Ä":t="A";break;case"Ö":t="O";break;case"Ü":t="U"}void 0===u[t]&&(u[t]=[]),u[t].push({alpha3Code:n.alpha3Code,name:n.name})}),n(r)})["catch"](function(n){e.error("failed to load countries",n),s(n)})}):C()},g=function(n){return new Promise(function(t,e){var r,o=n.internalVersion,u=n.externalVersion;r=null===o?"api":u>o?"api":"db",n.loadStrategy=r,t(n)})},h=function(n){return new Promise(function(e,r){var o=n.loadStrategy;switch(o){case"api":C().then(function(r){n.countries=r,t.putItem(i,a,{name:s,value:r}),t.putItem(i,a,{name:l,value:n.externalVersion}),e(n)})["catch"](function(n){r(n)});break;case"db":w(n).then(function(n){e(n)})["catch"](function(n){r(n)});break;default:r("Unknown load strategy")}})},m=function(){return new Promise(function(n,t){n({})})},p=function(n){return new Promise(function(e,r){t.retrieveItem(i,a,l).then(function(t){n.internalVersion=t.value,e(n)})["catch"](function(t){n.internalVersion=null,e(n)})})},v=function(n){return A().then(function(t){return n.externalVersion=t,n})},w=function(n){return new Promise(function(e,r){t.retrieveItem(i,a,s).then(function(t){n.countries=t.value,e(n)})["catch"](function(n){e(null)})})},C=function(){return new Promise(function(t,e){n.get("/api/countries").then(function(n){t(n.data)})["catch"](function(n){e(n)})})},A=function(){return new Promise(function(t,e){n.get("/api/countries/version").then(function(n){t(n.data.version||0)})["catch"](function(n){t(0)})})},b=function(n){return null===o?null:o[n]},O=function(){return null===u?null:u},y=function(){return null!==r&&r.length>0};return{init:f,getCountryByAlpha3:b,getCountriesByLetter:O,areCountriesLoaded:y}}]),angular.module("magellan").factory("FocusSrv",["$timeout","$window",function(n,t){return function(e){n(function(){var n=t.document.getElementById(e);n&&n.focus()})}}]),angular.module("magellan").factory("IndexedDBSrv",["$window",function(n){var t="name",e=n.indexedDB||n.webkitIndexedDB||n.msIndexedDB,r=n.IDBKeyRange||n.webkitIDBKeyRange,o=n.IDBTransaction||n.webkitIDBTransaction;o&&(o.READ_WRITE=o.READ_WRITE||"readwrite",o.READ_ONLY=o.READ_ONLY||"readonly");var u=function(){return!!e},i=function(n,r){return new Promise(function(o,u){var i=e.open(n);i.onupgradeneeded=function(n){var e=n.target.result;e.createObjectStore(r,{keyPath:t})},i.onsuccess=function(n){o(n)},i.onerror=function(n){u(n)}})},a=function(n){return new Promise(function(t,r){var o=e.deleteDatabase(n);o.onsuccess=function(n){t(n)},o.onerror=function(n){r(n)}})},s=function(n,t,r){return new Promise(function(u,i){var a=e.open(n);a.onsuccess=function(n){var e=n.target.result,a=e.transaction(t,o.READ_WRITE),s=a.objectStore(t),l=s.add(r);l.onsuccess=function(n){u(n)},l.onerror=function(n){i(n)}}})},l=function(n,t,r){return new Promise(function(u,i){var a=e.open(n);a.onsuccess=function(n){var e=n.target.result,a=e.transaction(t,o.READ_WRITE),s=a.objectStore(t),l=s.put(r);l.onsuccess=function(n){u(n)},l.onerror=function(n){i(n)}}})},c=function(n,t,u){return new Promise(function(i,a){var s=null,l=e.open(n);l.onsuccess=function(n){var e=n.target.result,a=e.transaction(t,o.READ_ONLY),l=a.objectStore(t),c=r.only(u);l.openCursor(c).onsuccess=function(n){var t=n.target.result;t?(s=t.value,t["continue"]()):i(s)}},l.onerror=function(n){a(n)}})},f=function(n,t){return new Promise(function(r,u){var i=[],a=e.open(n);a.onsuccess=function(n){var e=n.target.result,u=e.transaction(t,o.READ_ONLY),a=u.objectStore(t);a.openCursor().onsuccess=function(n){var t=n.target.result;t?(i.push(t.value),t["continue"]()):r(i)}},a.onerror=function(n){u(n)}})};return{createDatabase:i,dropDatabase:a,addItem:s,putItem:l,retrieveItem:c,retrieveItems:f,indexedDBAvailable:u}}]),angular.module("magellan").factory("LogSrv",["AppConfig",function(n){var t=function(){n["log.info"]&&console.log.apply(console,arguments)},e=function(){n["log.error"]&&console.error.apply(console,arguments)};return{info:t,error:e}}]),angular.module("magellan").factory("QuizSrv",["AppConfig","CountrySrv","LogSrv",function(n,t,e){var r=null,o=null,u=function(n){r=n},i=function(){return null!==r&&r.length>0},a=function(){return new Promise(function(n,t){i||t("Countries have not been loaded"),o=l("country"),n(o.start())})},s=function(){return null!==o&&o.hasStarted()},l=function(n){switch(n){case"country":default:return c()}},c=function(){for(var e=new Quiz,o=100,u=3,i=25,a=2.5,s=n["quiz.country.types"],l=Object.keys(s).length,c=[],m=n["quiz.country.questions"],p=0;p<m;p++){for(var v=!1;!v;){var w=r[getRandomInt(0,r.length-1)];v=c.indexOf(w.alpha3Code)<0}c.push(w.alpha3Code)}var C=0;return c.forEach(function(n){C++;var r=t.getCountryByAlpha3(n),c=s[getRandomInt(1,l)],p=f(c,r),v={type:c},w=d(c,r),A=g(c,o,a),b=h(c,u,i);C>=m&&(v.bonus=!0),e.addQuestion(new Question({text:p,info:v,answer:w,checkAnswer:A,hints:b}))}),e},f=function(n,t){switch(n){case"CAPITAL_OF_COUNTRY":return"Wie heißt die Hauptstadt von ["+t.name+"]";case"COUNTRY_OF_CAPITAL":return"["+t.capital+"] ist die Hauptstadt von welchem Land";case"POPULATION_OF_COUNTRY":return"Wie viele Menschen leben in ["+t.name+"]";case"AREA_OF_COUNTRY":return"Wie groß ist die Fläche von ["+t.name+"]";default:return"?"}},d=function(n,t){switch(n){case"CAPITAL_OF_COUNTRY":var e=void 0!==t.altSpellings&&void 0!==t.altSpellings.capital?t.altSpellings.capital:[];return{correct:t.capital,altSpellings:e};case"COUNTRY_OF_CAPITAL":var e=void 0!==t.altSpellings&&void 0!==t.altSpellings.name?t.altSpellings.name:[];return{correct:t.name,altSpellings:e};case"POPULATION_OF_COUNTRY":return{correct:t.population};case"AREA_OF_COUNTRY":return{correct:t.area};default:return"?"}},g=function(n,t,e){switch(n){case"CAPITAL_OF_COUNTRY":case"COUNTRY_OF_CAPITAL":return function(n,r,o){var u=r===n.correct||n.altSpellings&&n.altSpellings.indexOf(r)>=0,i=u?t:0;return void 0!==o&&void 0!==o.bonus&&o.bonus===!0&&(i*=e),i};case"POPULATION_OF_COUNTRY":case"AREA_OF_COUNTRY":return function(n,t,r){var o,u=Math.abs(t-n.correct)/n.correct*100;return o=u<=3?100:u<=6?90:u<=9?80:u<=12?70:u<=14?60:u<=16?50:u<=18?40:u<=20?30:u<=25?20:u<=30?10:0,void 0!==r&&void 0!==r.bonus&&r.bonus===!0&&(o*=e),o};default:return"?"}},h=function(n,t,e){switch(n){case"CAPITAL_OF_COUNTRY":case"COUNTRY_OF_CAPITAL":return{allowed:!0,maximum:t,cost:e,give:function(n,t){return t.correct.substr(0,n)}};case"POPULATION_OF_COUNTRY":case"AREA_OF_COUNTRY":return{allowed:!1};default:return"?"}},m=function(){return s()?o.getCurrentQuestionNumber():null},p=function(){return s()?o.getNumberOfQuestions():null},v=function(){return s()?o.currentQuestion():null},w=function(){s()&&o.nextQuestion()};return{init:a,setCountries:u,isQuizRunning:s,getCurrentQuestionNumber:m,getNumberOfQuizQuestions:p,getCurrentQuestion:v,nextQuestion:w}}]),angular.module("magellan").factory("UserSrv",["$http","AuthTokenSrv",function(n,t){var e=this,r=function(){return n.get("/api/user")},o=function(){return new Promise(function(n,e){var o=t.getToken();o?(t.setToken(o),r().then(function(t){n(t.data)})["catch"](function(n){e(n)})):e("No token in storage")})},u=function(o,u){return n.post("/api/session",{username:o,password:u}).then(function(n){return e.token=n.data,t.setToken(e.token),r()})},i=function(){return new Promise(function(n,r){e.token=null,t.setToken(),n()})};return{getUser:r,getUserFromStorage:o,login:u,logout:i}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInNjcmlwdC5qcyIsIm1vZGVscy5qcyIsInJvdXRlcy5qcyIsImNvbnRyb2xsZXJzL2NvdW50cmllcy5jdHJsLmpzIiwiY29udHJvbGxlcnMvY291bnRyeS1kZXRhaWwuY3RybC5qcyIsImNvbnRyb2xsZXJzL2Ryb3Bkb3duLmN0cmwuanMiLCJjb250cm9sbGVycy9sb2dpbi5jdHJsLmpzIiwiY29udHJvbGxlcnMvbG9nb3V0LmN0cmwuanMiLCJjb250cm9sbGVycy9xdWl6LmN0cmwuanMiLCJmaWx0ZXJzL3JlbmRlckh0bWwuZmlsdGVyLmpzIiwiaW50ZXJjZXB0b3JzL2F1dGguaW50ZXJjZXB0b3IuanMiLCJzZXJ2aWNlcy9hdXRoLXRva2VuLnNlcnZpY2UuanMiLCJzZXJ2aWNlcy9jb3VudHJ5LnNlcnZpY2UuanMiLCJzZXJ2aWNlcy9mb2N1cy5zZXJ2aWNlLmpzIiwic2VydmljZXMvaW5kZXhlZC1kYi5zZXJ2aWNlLmpzIiwic2VydmljZXMvbG9nLnNlcnZpY2UuanMiLCJzZXJ2aWNlcy9xdWl6LnNlcnZpY2UuanMiLCJzZXJ2aWNlcy91c2VyLnNlcnZpY2UuanMiXSwibmFtZXMiOlsibWFnZWxsYW4iLCJhbmd1bGFyIiwibW9kdWxlIiwiJGh0dHBQcm92aWRlciIsImludGVyY2VwdG9ycyIsInB1c2giLCJjb25zdGFudCIsImxvZy5pbmZvIiwibG9nLmVycm9yIiwicXVpei5jb3VudHJ5LnF1ZXN0aW9ucyIsInF1aXouY291bnRyeS50eXBlcyIsIjEiLCIyIiwiMyIsIjQiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJHN0YXRlIiwiVXNlclNydiIsIkNvdW50cnlTcnYiLCJRdWl6U3J2IiwiYXBwIiwiY29uZmlnIiwidGl0bGUiLCJzdWJ0aXRsZSIsImF1dGhvciIsImdldFVzZXJGcm9tU3RvcmFnZSIsInRoZW4iLCJ1c2VyIiwiaW5pdCIsImNvdW50cmllcyIsIiRicm9hZGNhc3QiLCJzZXRDb3VudHJpZXMiLCJlcnIiLCJpc1Byb2dyZXNzQmFyVmlzaWJsZSIsImlzIiwiJG9uIiwiZXZlbnQiLCJkYXRhIiwiZ28iLCJRdWl6IiwiY3VycmVudFF1ZXN0aW9uSWR4IiwicXVlc3Rpb25zIiwidGhpcyIsInN0YXJ0IiwibGVuZ3RoIiwiRXJyb3IiLCJuZXh0UXVlc3Rpb24iLCJpc0FjdGl2ZSIsImhhc1N0YXJ0ZWQiLCJoYXNFbmRlZCIsImFkZFF1ZXN0aW9uIiwicXVlc3Rpb24iLCJ1bmRlZmluZWQiLCJ2YWxpZCIsIm5lY2Vzc2FyeVByb3BlcnRpZXMiLCJmb3JFYWNoIiwicHJvcGVydHkiLCJoYXNPd25Qcm9wZXJ0eSIsImN1cnJlbnRRdWVzdGlvbiIsImdldFRvdGFsUG9pbnRzIiwidG90YWxQb2ludHMiLCJwb2ludHMiLCJnZXRDdXJyZW50UXVlc3Rpb25OdW1iZXIiLCJnZXROdW1iZXJPZlF1ZXN0aW9ucyIsIlF1ZXN0aW9uIiwib3B0aW9ucyIsInRleHQiLCJpbmZvIiwiYW5zd2VyIiwiaGludHMiLCJoaW50c1VzZWQiLCJjaGVja0Fuc3dlciIsImFuc3dlcmVkIiwib3B0cyIsImFsbG93ZWQiLCJtYXhpbXVtIiwiY29zdCIsImdpdmUiLCJwcm9wIiwidmFsdWUiLCJnZXRJbmZvIiwic29sdXRpb24iLCJoaW50Iiwic3VibWl0dGVkQW5zd2VyIiwiTWF0aCIsIm1heCIsImhpbnRzQWxsb3dlZCIsImhpbnRzUmVtYWluaW5nIiwiZ2V0UmFuZG9tSW50IiwibWluIiwiZmxvb3IiLCJyYW5kb20iLCJnZXRTdHJpbmdCZXR3ZWVuIiwiZmlyc3RTdHJpbmciLCJzZWNvbmRTdHJpbmciLCJmaXJzdFBvcyIsImluZGV4T2YiLCJzZWNvbmRQb3MiLCJzdWJzdHIiLCJleHBvcnRzIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsImh0bWw1TW9kZSIsIm90aGVyd2lzZSIsInN0YXRlIiwidXJsIiwidGVtcGxhdGVVcmwiLCJjb3VudHJpZXNCeUxldHRlciIsImNvdW50cnlLZXlzIiwiZ2V0Q291bnRyaWVzQnlMZXR0ZXIiLCJPYmplY3QiLCJrZXlzIiwiJCRwaGFzZSIsIiRhcHBseSIsImFyZUNvdW50cmllc0xvYWRlZCIsIiRzdGF0ZVBhcmFtcyIsImFscGhhM0NvZGUiLCJjb3VudHJ5IiwiZ2V0Q291bnRyeUJ5QWxwaGEzIiwiZ2V0Q291bnRyeUZyb21TZXJ2aWNlIiwiYWxwaGEzIiwidG9nZ2xlRHJvcGRvd24iLCJ2aXNpYmxlIiwic2hvd0Ryb3Bkb3duIiwiaGlkZURyb3Bkb3duIiwiaXNEcm9wZG93blZpc2libGUiLCJoYW5kbGVDbGlja091dHNpZGUiLCJjb25zb2xlIiwibG9nIiwiRm9jdXNTcnYiLCJsb2dpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJyZXNwb25zZSIsIiRlbWl0IiwiZXJyb3IiLCJsb2dvdXQiLCJMb2dTcnYiLCJuZ1Byb2dyZXNzRmFjdG9yeSIsInByb2dyZXNzYmFyIiwiY3JlYXRlSW5zdGFuY2UiLCJzZXRQYXJlbnQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwic2V0QWJzb2x1dGUiLCJzZXRDb2xvciIsInN0YXJ0UXVpeiIsInVwZGF0ZVF1ZXN0aW9uIiwiZ2V0Q3VycmVudFF1ZXN0aW9uIiwicmVuZGVyUXVlc3Rpb24iLCJjbGFzc05hbWUiLCJyZXBsYWNlIiwic3VibWl0QW5zd2VyIiwiaGFuZGxlS2V5UHJlc3MiLCJrZXlFdmVudCIsIndoaWNoIiwiYW5zd2VyT2JqIiwiaXNRdWl6UnVubmluZyIsImdldE51bWJlck9mUXVpelF1ZXN0aW9ucyIsInF1ZXN0aW9uQW5zd2VyZWQiLCJnZXRRdWVzdGlvblRleHQiLCJnZXRBbnN3ZXJUZXh0IiwiY29ycmVjdCIsImZpbHRlciIsIiRzY2UiLCJ0cnVzdEFzSHRtbCIsImZhY3RvcnkiLCJBdXRoVG9rZW5TcnYiLCJhZGRUb2tlbiIsInRva2VuIiwiZ2V0VG9rZW4iLCJoZWFkZXJzIiwicmVxdWVzdCIsIiR3aW5kb3ciLCJzdG9yZSIsInNlc3Npb25TdG9yYWdlIiwia2V5IiwiZ2V0SXRlbSIsInNldFRva2VuIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCIkaHR0cCIsIkluZGV4ZWREQlNydiIsImNvdW50cmllc0J5QWxwaGEzIiwiZGF0YWJhc2UiLCJrZXlDb3VudHJpZXMiLCJrZXlWZXJzaW9uIiwiaW5kZXhlZERCQXZhaWxhYmxlIiwibG9hZENvdW50cmllcyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY3JlYXRlRGF0YWJhc2UiLCJnZXRFbXB0eU9iamVjdCIsImdldEludGVybmFsVmVyc2lvbiIsImdldEV4dGVybmFsVmVyc2lvbiIsImRldGVybWluZUxvYWRTdHJhdGVneSIsImxvYWREYXRhIiwib2JqIiwidG9VcHBlckNhc2UiLCJjIiwiZmlyc3RMZXR0ZXIiLCJuYW1lIiwiZ2V0Q291bnRyaWVzRnJvbUFQSSIsInN0cmF0ZWd5IiwiaW50ZXJuYWxWZXJzaW9uIiwiZXh0ZXJuYWxWZXJzaW9uIiwicHV0SXRlbSIsImdldENvdW50cmllc0Zyb21EQiIsIl9vYmoiLCJyZXRyaWV2ZUl0ZW0iLCJpdGVtIiwiZ2V0VmVyc2lvbkZyb21BUEkiLCJ2ZXJzaW9uIiwiZ2V0IiwiJHRpbWVvdXQiLCJpZCIsImVsZW1lbnQiLCJmb2N1cyIsImtleVBhdGgiLCJpbmRleGVkREIiLCJ3ZWJraXRJbmRleGVkREIiLCJtc0luZGV4ZWREQiIsIklEQktleVJhbmdlIiwid2Via2l0SURCS2V5UmFuZ2UiLCJJREJUcmFuc2FjdGlvbiIsIndlYmtpdElEQlRyYW5zYWN0aW9uIiwiUkVBRF9XUklURSIsIlJFQURfT05MWSIsImRiTmFtZSIsInN0b3JlTmFtZSIsIm9wZW4iLCJvbnVwZ3JhZGVuZWVkZWQiLCJlIiwiaWRiIiwidGFyZ2V0IiwicmVzdWx0IiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJvbnN1Y2Nlc3MiLCJvbmVycm9yIiwiZHJvcERhdGFiYXNlIiwiZGVsZXRlRGF0YWJhc2UiLCJhZGRJdGVtIiwidHJhbnNhY3Rpb24iLCJvYmplY3RTdG9yZSIsInJlcXVlc3RBZGQiLCJhZGQiLCJwdXQiLCJpdGVtTmFtZSIsInJhbmdlIiwib25seSIsIm9wZW5DdXJzb3IiLCJjdXJzb3IiLCJyZXRyaWV2ZUl0ZW1zIiwiaXRlbXMiLCJBcHBDb25maWciLCJsb2dJbmZvIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJsb2dFcnJvciIsInF1aXoiLCJfY291bnRyaWVzIiwiY291bnRyaWVzTG9hZGVkIiwiY3JlYXRlUXVpeiIsInF1aXpUeXBlIiwiY3JlYXRlQ291bnRyeVF1aXoiLCJjb3VudHJ5UXVpeiIsImZ1bGxQb2ludHMiLCJoaW50TWF4aW11bSIsImhpbnRDb3N0IiwibGFzdFF1ZXN0aW9uQm9udXMiLCJxdWVzdGlvblR5cGVzIiwicXVlc3Rpb25UeXBlc0xlbmd0aCIsInNlbGVjdGVkQ291bnRyaWVzIiwibnVtYmVyT2ZRdWVzdGlvbnMiLCJpIiwiY291bnRyeU9rIiwicWNudCIsInF1ZXN0aW9uVHlwZSIsInR5cGUiLCJnZXRRdWVzdGlvbkFuc3dlciIsImdldENoZWNrQW5zd2VyTGFtYmRhIiwiZ2V0UXVlc3Rpb25IaW50cyIsImNhcGl0YWwiLCJhbHRTcGVsbGluZ3MiLCJwb3B1bGF0aW9uIiwiYXJlYSIsImJvbnVzIiwiZXJyb3JQZXJjZW50YWdlIiwiYWJzIiwiaGludHNQb3NzaWJsZSIsInNlbGYiLCJnZXRVc2VyIiwicG9zdCJdLCJtYXBwaW5ncyI6IkFBQUEsR0FBQUEsVUFBQUMsUUFBQUMsT0FBQSxZQUNBLFlBQ0EsYUFDQSxjQ0NJLGdCREFKLFNBQUFDLEdBQ0FBLEVBQUFDLGFBQUFDLEtBQUEscUJBSUFMLFVBQUFNLFNBQUEsYUFDQUMsWUFBQSxFQUNBQyxhQUFBLEVBRUFDLHlCQUFBLEdBQ0FDLHNCQUNBQyxFQUFBLHFCQUNBQyxFQUFBLHFCQUNBQyxFQUFBLHdCQUNBQyxFQUFBLHFCQUlBZCxTQUFBZSxXQUFBLFdBQUEsU0FBQSxTQUFBLFVBQUEsYUFBQSxVQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBRUFKLEVBQUFLLEtBQ0FDLFFBQ0FDLE1BQUEsV0FDQUMsU0FB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LE1BS0FaLEVBQUEsV0FDQWdILEtBSUF1RyxFQUFBdk4sZUFHQSxRQUNBbEIsS0FBQUEsRUFDQUcsYUFBQUEsRUFDQStILGNBQUFBLEVBQ0FoRyx5QkFBQUEsRUFDQWlHLHlCQUFBQSxFQUNBVixtQkFBQUEsRUFDQXZHLGFBQUFBLE1DclJBOUMsUUFDQUMsT0FBQSxZQUNBc0ssUUFBQSxXQUFBLFFBQUEsZUFBQSxTQUFBZSxFQUFBZCxHQUNBLEdBQUE0SCxHQUFBMVAsS0FFQTJQLEVBQUEsV0FDQSxNQUFBL0csR0FBQWlDLElBQUEsY0FHQTlMLEVBQUEsV0FDQSxNQUFBLElBQUFxSyxTQUFBLFNBQUFDLEVBQUFDLEdBQ0EsR0FBQXRCLEdBQUFGLEVBQUFHLFVBRUFELElBQ0FGLEVBQUFXLFNBQUFULEdBRUEySCxJQUNBM1EsS0FBQSxTQUFBNEcsR0FDQXlELEVBQUF6RCxFQUFBakcsUUFGQWdRLFNBSUEsU0FBQXJRLEdBQ0FnSyxFQUFBaEssTUFJQWdLLEVBQUEsMEJBS0E3RCxFQUFBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQWlELEdBQUFnSCxLQUFBLGdCQUNBbEssU0FBQUEsRUFDQUMsU0FBQUEsSUFDQTNHLEtBQUEsU0FBQTRHLEdBTUEsTUFMQThKLEdBQUExSCxNQUFBcEMsRUFBQWpHLEtBR0FtSSxFQUFBVyxTQUFBaUgsRUFBQTFILE9BRUEySCxPQUlBNUosRUFBQSxXQUNBLE1BQUEsSUFBQXFELFNBQUEsU0FBQUMsRUFBQUMsR0FDQW9HLEVBQUExSCxNQUFBLEtBR0FGLEVBQUFXLFdBRUFZLE1BSUEsUUFDQXNHLFFBQUFBLEVBQ0E1USxtQkFBQUEsRUFDQTBHLE1BQUFBLEVBQ0FNLE9BQUFBIiwiZmlsZSI6InNjcmlwdC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBtYWdlbGxhbiA9IGFuZ3VsYXIubW9kdWxlKFwibWFnZWxsYW5cIiwgW1xyXG4gICAgJ3VpLnJvdXRlcicsXHJcbiAgICAnbmdQcm9ncmVzcycsXHJcbiAgICAnbmdBbmltYXRlJ1xyXG5dLCBmdW5jdGlvbiBjb25maWcoJGh0dHBQcm92aWRlcikge1xyXG4gICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaCgnQXV0aEludGVyY2VwdG9yJyk7XHJcbn0pO1xyXG5cclxuLy8gZGVmaW5lIGFwcGxpY2F0aW9uIGNvbnN0YW50c1xyXG5tYWdlbGxhbi5jb25zdGFudChcIkFwcENvbmZpZ1wiLCB7XHJcbiAgICBcImxvZy5pbmZvXCI6IHRydWUsXHJcbiAgICBcImxvZy5lcnJvclwiOiB0cnVlLFxyXG5cclxuICAgIFwicXVpei5jb3VudHJ5LnF1ZXN0aW9uc1wiOiAxNixcclxuICAgIFwicXVpei5jb3VudHJ5LnR5cGVzXCI6IHtcclxuICAgICAgICAxOiBcIkNBUElUQUxfT0ZfQ09VTlRSWVwiLFxyXG4gICAgICAgIDI6IFwiQ09VTlRSWV9PRl9DQVBJVEFMXCIsXHJcbiAgICAgICAgMzogXCJQT1BVTEFUSU9OX09GX0NPVU5UUllcIixcclxuICAgICAgICA0OiBcIkFSRUFfT0ZfQ09VTlRSWVwiXHJcbiAgICB9XHJcbn0pO1xyXG5cclxubWFnZWxsYW4uY29udHJvbGxlcihcIkFwcEN0cmxcIiwgZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGUsIFVzZXJTcnYsIENvdW50cnlTcnYsIFF1aXpTcnYpIHtcclxuICAgIC8vIC0tLS0tLS0tLS0tIEFwcCBjb25maWcgLS0tLS0tLS0tLS0tXHJcbiAgICAkc2NvcGUuYXBwID0ge1xyXG4gICAgICAgIGNvbmZpZzoge1xyXG4gICAgICAgICAgICB0aXRsZTogXCJNYWdlbGxhblwiLFxyXG4gICAgICAgICAgICBzdWJ0aXRsZTogXCJUZXN0IHlvdXIga25vd2xlZGdlIGFib3V0IHRoZSBjb3VudHJpZXMgb2Ygb3VyIHdvcmxkXCIsXHJcbiAgICAgICAgICAgIGF1dGhvcjogXCJNaWNoYWVsIFN0aWZ0ZXJcIlxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0gQXBwIGluaXRpYWxpemF0aW9uIC0tLS0tLS0tLS0tLVxyXG4gICAgVXNlclNydi5nZXRVc2VyRnJvbVN0b3JhZ2UoKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHVzZXIpIHtcclxuICAgICAgICAgICAgLy8gc3RvcmUgdXNlciBvYmplY3QgaW4gc2NvcGVcclxuICAgICAgICAgICAgJHNjb3BlLnVzZXIgPSB1c2VyO1xyXG5cclxuICAgICAgICAgICAgLy8gaW5pdCBjb3VudHJ5IHNlcnZpY2VcclxuICAgICAgICAgICAgQ291bnRyeVNydi5pbml0KClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGNvdW50cmllcykge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdjb3VudHJpZXMubG9hZGVkJywgY291bnRyaWVzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGNvdW50cmllcyBpbiBxdWl6IHNlcnZpY2VcclxuICAgICAgICAgICAgICAgICAgICBRdWl6U3J2LnNldENvdW50cmllcyhjb3VudHJpZXMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgIC8vIHRoZSBvbmx5IGVycm9yIHRoYXQgY2FuIG9jY3VyIGlzIHRoYXQgdGhlcmUgaXMgbm8gdG9rZW4gaW4gc3RvcmFnZSwgd2UgZG8gbm90IG5lZWQgdG8gcmVhY3QgdG8gdGhhdFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICRzY29wZS5pc1Byb2dyZXNzQmFyVmlzaWJsZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAkc3RhdGUuaXMoJ3F1aXonKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0gRXZlbnQgaGFuZGxpbmcgLS0tLS0tLS0tLS0tXHJcbiAgICAkc2NvcGUuJG9uKCdhcHAubG9naW4nLCBmdW5jdGlvbihldmVudCwgZGF0YSkge1xyXG4gICAgICAgIC8vIHN0b3JlIHVzZXIgb2JqZWN0IGluIHNjb3BlXHJcbiAgICAgICAgJHNjb3BlLnVzZXIgPSBkYXRhO1xyXG5cclxuICAgICAgICAvLyBpbml0IGNvdW50cnkgc2VydmljZVxyXG4gICAgICAgIENvdW50cnlTcnYuaW5pdCgpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGNvdW50cmllcykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ2NvdW50cmllcy5sb2FkZWQnLCBjb3VudHJpZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHNldCBjb3VudHJpZXMgaW4gcXVpeiBzZXJ2aWNlXHJcbiAgICAgICAgICAgICAgICBRdWl6U3J2LnNldENvdW50cmllcyhjb3VudHJpZXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gZ28gdG8gcXVpeiBwYWdlXHJcbiAgICAgICAgJHN0YXRlLmdvKCdxdWl6Jyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuJG9uKCdhcHAubG9nb3V0JywgZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcclxuICAgICAgICAvLyByZW1vdmUgdXNlciBvYmplY3QgZnJvbSBzY29wZVxyXG4gICAgICAgICRzY29wZS51c2VyID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gZ28gdG8gaG9tZSBwYWdlXHJcbiAgICAgICAgJHN0YXRlLmdvKCdob21lJyk7XHJcbiAgICB9KTtcclxufSk7IiwidmFyIG1hZ2VsbGFuID0gYW5ndWxhci5tb2R1bGUoXCJtYWdlbGxhblwiLCBbXHJcbiAgICAndWkucm91dGVyJyxcclxuICAgICduZ1Byb2dyZXNzJyxcclxuICAgICduZ0FuaW1hdGUnXHJcbl0sIFtcIiRodHRwUHJvdmlkZXJcIiwgZnVuY3Rpb24gY29uZmlnKCRodHRwUHJvdmlkZXIpIHtcclxuICAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goJ0F1dGhJbnRlcmNlcHRvcicpO1xyXG59XSk7XHJcblxyXG4vLyBkZWZpbmUgYXBwbGljYXRpb24gY29uc3RhbnRzXHJcbm1hZ2VsbGFuLmNvbnN0YW50KFwiQXBwQ29uZmlnXCIsIHtcclxuICAgIFwibG9nLmluZm9cIjogdHJ1ZSxcclxuICAgIFwibG9nLmVycm9yXCI6IHRydWUsXHJcblxyXG4gICAgXCJxdWl6LmNvdW50cnkucXVlc3Rpb25zXCI6IDE2LFxyXG4gICAgXCJxdWl6LmNvdW50cnkudHlwZXNcIjoge1xyXG4gICAgICAgIDE6IFwiQ0FQSVRBTF9PRl9DT1VOVFJZXCIsXHJcbiAgICAgICAgMjogXCJDT1VOVFJZX09GX0NBUElUQUxcIixcclxuICAgICAgICAzOiBcIlBPUFVMQVRJT05fT0ZfQ09VTlRSWVwiLFxyXG4gICAgICAgIDQ6IFwiQVJFQV9PRl9DT1VOVFJZXCJcclxuICAgIH1cclxufSk7XHJcblxyXG5tYWdlbGxhbi5jb250cm9sbGVyKFwiQXBwQ3RybFwiLCBbXCIkc2NvcGVcIiwgXCIkc3RhdGVcIiwgXCJVc2VyU3J2XCIsIFwiQ291bnRyeVNydlwiLCBcIlF1aXpTcnZcIiwgZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGUsIFVzZXJTcnYsIENvdW50cnlTcnYsIFF1aXpTcnYpIHtcclxuICAgIC8vIC0tLS0tLS0tLS0tIEFwcCBjb25maWcgLS0tLS0tLS0tLS0tXHJcbiAgICAkc2NvcGUuYXBwID0ge1xyXG4gICAgICAgIGNvbmZpZzoge1xyXG4gICAgICAgICAgICB0aXRsZTogXCJNYWdlbGxhblwiLFxyXG4gICAgICAgICAgICBzdWJ0aXRsZTogXCJUZXN0IHlvdXIga25vd2xlZGdlIGFib3V0IHRoZSBjb3VudHJpZXMgb2Ygb3VyIHdvcmxkXCIsXHJcbiAgICAgICAgICAgIGF1dGhvcjogXCJNaWNoYWVsIFN0aWZ0ZXJcIlxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0gQXBwIGluaXRpYWxpemF0aW9uIC0tLS0tLS0tLS0tLVxyXG4gICAgVXNlclNydi5nZXRVc2VyRnJvbVN0b3JhZ2UoKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHVzZXIpIHtcclxuICAgICAgICAgICAgLy8gc3RvcmUgdXNlciBvYmplY3QgaW4gc2NvcGVcclxuICAgICAgICAgICAgJHNjb3BlLnVzZXIgPSB1c2VyO1xyXG5cclxuICAgICAgICAgICAgLy8gaW5pdCBjb3VudHJ5IHNlcnZpY2VcclxuICAgICAgICAgICAgQ291bnRyeVNydi5pbml0KClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGNvdW50cmllcykge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdjb3VudHJpZXMubG9hZGVkJywgY291bnRyaWVzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGNvdW50cmllcyBpbiBxdWl6IHNlcnZpY2VcclxuICAgICAgICAgICAgICAgICAgICBRdWl6U3J2LnNldENvdW50cmllcyhjb3VudHJpZXMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgIC8vIHRoZSBvbmx5IGVycm9yIHRoYXQgY2FuIG9jY3VyIGlzIHRoYXQgdGhlcmUgaXMgbm8gdG9rZW4gaW4gc3RvcmFnZSwgd2UgZG8gbm90IG5lZWQgdG8gcmVhY3QgdG8gdGhhdFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICRzY29wZS5pc1Byb2dyZXNzQmFyVmlzaWJsZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAkc3RhdGUuaXMoJ3F1aXonKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0gRXZlbnQgaGFuZGxpbmcgLS0tLS0tLS0tLS0tXHJcbiAgICAkc2NvcGUuJG9uKCdhcHAubG9naW4nLCBmdW5jdGlvbihldmVudCwgZGF0YSkge1xyXG4gICAgICAgIC8vIHN0b3JlIHVzZXIgb2JqZWN0IGluIHNjb3BlXHJcbiAgICAgICAgJHNjb3BlLnVzZXIgPSBkYXRhO1xyXG5cclxuICAgICAgICAvLyBpbml0IGNvdW50cnkgc2VydmljZVxyXG4gICAgICAgIENvdW50cnlTcnYuaW5pdCgpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGNvdW50cmllcykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ2NvdW50cmllcy5sb2FkZWQnLCBjb3VudHJpZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHNldCBjb3VudHJpZXMgaW4gcXVpeiBzZXJ2aWNlXHJcbiAgICAgICAgICAgICAgICBRdWl6U3J2LnNldENvdW50cmllcyhjb3VudHJpZXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gZ28gdG8gcXVpeiBwYWdlXHJcbiAgICAgICAgJHN0YXRlLmdvKCdxdWl6Jyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuJG9uKCdhcHAubG9nb3V0JywgZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcclxuICAgICAgICAvLyByZW1vdmUgdXNlciBvYmplY3QgZnJvbSBzY29wZVxyXG4gICAgICAgICRzY29wZS51c2VyID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gZ28gdG8gaG9tZSBwYWdlXHJcbiAgICAgICAgJHN0YXRlLmdvKCdob21lJyk7XHJcbiAgICB9KTtcclxufV0pO1xuLy8gb3duIGNsYXNzZXMgYW5kIGZ1bmN0aW9uc1xyXG5cclxuLy8gLS0tLS0tLS0tLSBRVUlaIC0tLS0tLS0tLS1cclxudmFyIFF1aXogPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIGluZGV4IG9mIGN1cnJlbnQgcXVlc3Rpb25cclxuICAgIHZhciBjdXJyZW50UXVlc3Rpb25JZHggPSBudWxsO1xyXG5cclxuICAgIC8vIGFycmF5IGNvbnRhaW5pbmcgYWxsIHF1ZXN0aW9uc1xyXG4gICAgdmFyIHF1ZXN0aW9ucyA9IFtdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3RhcnRzIHRoZSBxdWl6LlxyXG4gICAgICovXHJcbiAgICB0aGlzLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gY2hlY2sgaWYgcXVpeiBoYXMgcXVlc3Rpb25zXHJcbiAgICAgICAgaWYgKHF1ZXN0aW9ucy5sZW5ndGggPD0gMClcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJDYW5ub3Qgc3RhcnQgYSBxdWl6IHdpdGhvdXQgcXVlc3Rpb25zXCIpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5uZXh0UXVlc3Rpb24oKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5pc0FjdGl2ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhhc1N0YXJ0ZWQoKSAmJiAhdGhpcy5oYXNFbmRlZCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmhhc1N0YXJ0ZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gY3VycmVudFF1ZXN0aW9uSWR4ICE9PSBudWxsO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmhhc0VuZGVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzU3RhcnRlZCgpICYmIGN1cnJlbnRRdWVzdGlvbklkeCA+PSBxdWVzdGlvbnMubGVuZ3RoO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYSBuZXcgcXVlc3Rpb24gdG8gdGhlIHF1aXouXHJcbiAgICAgKiBUaGUgcGFyYW1ldGVyIG11c3QgYmUgYW4gcXVlc3Rpb24gb2JqZWN0LlxyXG4gICAgICogSWYgbm8gcXVlc3Rpb24gb2JqZWN0IGlzIHBhc3NlZCBvciBhbiBvYmplY3Qgd2l0aCBtaXNzaW5nIHByb3BlcnRpZXMsIGFuIGVycm9yIGlzIHRocm93bi5cclxuICAgICAqL1xyXG4gICAgdGhpcy5hZGRRdWVzdGlvbiA9IGZ1bmN0aW9uKHF1ZXN0aW9uKSB7XHJcbiAgICAgICAgaWYgKHF1ZXN0aW9uID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiTm8gcXVlc3Rpb24gb2JqZWN0IHBhc3NlZFwiKTtcclxuXHJcbiAgICAgICAgdmFyIHZhbGlkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy8gYSBxdWVzdGlvbiBvYmplY3QgbXVzdCBjb250YWluIGFsbCB0aGVzZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIG5lY2Vzc2FyeVByb3BlcnRpZXMgPSBbJ2NvbmZpZycsICdoaW50JywgJ3NvbHV0aW9uJywgJ2Fuc3dlcicsICdxdWVzdGlvbicsICdnZXRJbmZvJywgJ2luZm8nLCAncG9pbnRzJywgJ2Fuc3dlcmVkJywgJ2hpbnRzQWxsb3dlZCcsICdoaW50c1JlbWFpbmluZyddO1xyXG5cclxuICAgICAgICBuZWNlc3NhcnlQcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24ocHJvcGVydHkpIHtcclxuICAgICAgICAgICAgaWYgKCFxdWVzdGlvbi5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcclxuICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJRdWVzdGlvbiBtdXN0IGhhdmUgcHJvcGVydHkgJ1wiICsgcHJvcGVydHkgKyBcIidcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgIHF1ZXN0aW9ucy5wdXNoKHF1ZXN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgbmV4dCBxdWVzdGlvbiBvZiB0aGUgcXVpei5cclxuICAgICAqIElmIHRoZSBxdWl6IGhhcyBlbmRlZCwgaXQgcmV0dXJucyBub3RoaW5nLlxyXG4gICAgICovXHJcbiAgICB0aGlzLm5leHRRdWVzdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmIChjdXJyZW50UXVlc3Rpb25JZHggPT09IG51bGwpIHtcclxuICAgICAgICAgICAgY3VycmVudFF1ZXN0aW9uSWR4ID0gMDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjdXJyZW50UXVlc3Rpb25JZHgrKztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmhhc0VuZGVkKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNBY3RpdmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBxdWVzdGlvbnNbY3VycmVudFF1ZXN0aW9uSWR4XTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5jdXJyZW50UXVlc3Rpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNBY3RpdmUoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBxdWVzdGlvbnNbY3VycmVudFF1ZXN0aW9uSWR4XTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5nZXRUb3RhbFBvaW50cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaGFzU3RhcnRlZCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHRvdGFsUG9pbnRzID0gMDtcclxuXHJcbiAgICAgICAgcXVlc3Rpb25zLmZvckVhY2goZnVuY3Rpb24ocXVlc3Rpb24pIHtcclxuICAgICAgICAgICAgdmFyIHBvaW50cyA9IHF1ZXN0aW9uLnBvaW50cygpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHBvaW50cyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0b3RhbFBvaW50cyArPSBwb2ludHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRvdGFsUG9pbnRzO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmdldEN1cnJlbnRRdWVzdGlvbk51bWJlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmIChjdXJyZW50UXVlc3Rpb25JZHggPT09IG51bGwpXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICByZXR1cm4gY3VycmVudFF1ZXN0aW9uSWR4ICsgMTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5nZXROdW1iZXJPZlF1ZXN0aW9ucyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBxdWVzdGlvbnMubGVuZ3RoO1xyXG4gICAgfTtcclxufTtcclxuXHJcbi8vIC0tLS0tLS0tLS0gUVVFU1RJT04gLS0tLS0tLS0tLVxyXG52YXIgUXVlc3Rpb24gPSBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAvLyBUZXh0IG9mIHRoZSBxdWVzdGlvblxyXG4gICAgdmFyIHRleHQgPSBudWxsO1xyXG5cclxuICAgIC8vIEluZm8gb2JqZWN0IGZvciB0aGUgcXVlc3Rpb25cclxuICAgIHZhciBpbmZvID0gbnVsbDtcclxuXHJcbiAgICAvLyBBbnN3ZXIgb2YgdGhlIHF1ZXN0aW9uXHJcbiAgICB2YXIgYW5zd2VyID0gbnVsbDtcclxuXHJcbiAgICAvLyBIaW50cyBvZiB0aGUgcXVlc3Rpb25cclxuICAgIHZhciBoaW50cyA9IG51bGw7XHJcbiAgICB2YXIgaGludHNVc2VkID0gMDtcclxuXHJcbiAgICAvLyBMYW1iZGEgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIHRoZSBhbnN3ZXIgc3RhdHVzIG9mIHRoZSBxdWVzdGlvblxyXG4gICAgdmFyIGNoZWNrQW5zd2VyID0gbnVsbDtcclxuXHJcbiAgICAvLyBQb2ludHMgYXdhcmRlZCBmb3IgdGhlIHF1ZXN0aW9uXHJcbiAgICB2YXIgcG9pbnRzID0gbnVsbDtcclxuXHJcbiAgICAvLyBGbGFnIGluZGljYXRpbmcgd2hldGhlciBxdWVzdGlvbiBoYXMgYWxyZWFkeSBiZWVuIGFuc3dlcmVkXHJcbiAgICB2YXIgYW5zd2VyZWQgPSBmYWxzZTtcclxuXHJcbiAgICB2YXIgaW5pdCA9IGZ1bmN0aW9uKG9wdHMpIHtcclxuICAgICAgICB0ZXh0ID0gb3B0cy50ZXh0O1xyXG4gICAgICAgIGluZm8gPSBvcHRzLmluZm8gfHwge307XHJcbiAgICAgICAgYW5zd2VyID0gb3B0cy5hbnN3ZXI7XHJcbiAgICAgICAgY2hlY2tBbnN3ZXIgPSBvcHRzLmNoZWNrQW5zd2VyIHx8IG51bGw7XHJcblxyXG4gICAgICAgIGhpbnRzID0gb3B0cy5oaW50cyB8fCB7XHJcbiAgICAgICAgICAgICAgICBhbGxvd2VkOiBmYWxzZSwgICAgIC8vIGlzIGEgaGludCBhbGxvd2VkP1xyXG4gICAgICAgICAgICAgICAgbWF4aW11bTogMCwgICAgICAgICAvLyBtYXhpbXVtIG51bWJlciBvZiBoaW50cyBmb3IgdGhpcyBxdWVzdGlvbiAoaXJyZWxldmFudCBpZiBhbGxvd2VkIGlzIHNldCB0byBmYWxzZSlcclxuICAgICAgICAgICAgICAgIGNvc3Q6IDAsICAgICAgICAgICAgLy8gbnVtYmVyIG9mIHBvaW50cyBzdWJ0cmFjdGVkIHBlciB1c2VkIGhpbnQgKGlycmVsZXZhbnQgaWYgYWxsb3dlZCBpcyBzZXQgdG8gZmFsc2UpXHJcbiAgICAgICAgICAgICAgICBnaXZlOiBudWxsICAgICAgICAgIC8vIGxhbWJkYSBmdW5jdGlvbiB0byBnaXZlIGEgaGludCBmb3IgYSBxdWVzdGlvblxyXG4gICAgICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgIGluaXQob3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jb25maWcgPSBmdW5jdGlvbihvcHRzKSB7XHJcbiAgICAgICAgaW5pdChvcHRzKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBxdWVzdGlvbiB0ZXh0LlxyXG4gICAgICovXHJcbiAgICB0aGlzLnF1ZXN0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRleHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgcXVlc3Rpb24gaW5mbyBvYmplY3QuXHJcbiAgICAgKiBBY3RzIGFzIGdldHRlciAod2l0aCBvbmx5IG9uZSBhcmd1bWVudCkgYW5kIHNldHRlciAod2l0aCB0d28gYXJndW1lbnRzKVxyXG4gICAgICovXHJcbiAgICB0aGlzLmluZm8gPSBmdW5jdGlvbihwcm9wLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIC8vIHNldHRlclxyXG4gICAgICAgICAgICBpbmZvW3Byb3BdID0gdmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gZ2V0dGVyXHJcbiAgICAgICAgICAgIHJldHVybiBpbmZvW3Byb3BdO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBlbnRpcmUgaW5mbyBvYmplY3QuXHJcbiAgICAgKi9cclxuICAgIHRoaXMuZ2V0SW5mbyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBpbmZvO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGNvcnJlY3QgYW5zd2VyIHRvIHRoZSBxdWVzdGlvbiBhZnRlciB0aGUgcXVlc3Rpb24gaGFzIGJlZW4gYW5zd2VyZWQuXHJcbiAgICAgKiBJZiB0aGUgcXVlc3Rpb24gaGFzIG5vdCBiZWVuIGFuc3dlcmVkIHlldCwgaXQgcmV0dXJucyBudWxsLlxyXG4gICAgICovXHJcbiAgICB0aGlzLnNvbHV0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKGFuc3dlcmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhbnN3ZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgaGludCBmb3IgdGhlIHF1ZXN0aW9uLlxyXG4gICAgICogSWYgbm8gaGludHMgYXJlIGFsbG93ZWQsIG9yIHRoZSBtYXhpbXVtIG51bWJlciBvZiBoaW50cyBoYXZlIGJlZW4gdXNlZCwgbnVsbCBpcyByZXR1cm5lZC5cclxuICAgICAqL1xyXG4gICAgdGhpcy5oaW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCFoaW50cy5hbGxvd2VkIHx8IGhpbnRzVXNlZCA+PSBoaW50cy5tYXhpbXVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGhpbnRzLmFsbG93ZWQgJiYgIWhpbnRzLmdpdmUpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSGludHMgYWxsb3dlZCBidXQgbm8gZ2l2ZSBtZXRob2QgcGFzc2VkXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaGludHNVc2VkKys7XHJcblxyXG4gICAgICAgIHJldHVybiBoaW50cy5naXZlKGhpbnRzVXNlZCwgYW5zd2VyKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdWJtaXRzIGFuIGFuc3dlciB0byB0aGUgcXVlc3Rpb24uXHJcbiAgICAgKiBJZiB0aGUgcXVlc3Rpb24gaGFzIGFscmVhZHkgYmVlbiBhbnN3ZXJlZCBvciBubyBjaGVja0Fuc3dlciBsYW1iZGEgaGFzIGJlZW4gc2V0LCB0aGlzIG1ldGhvZCBkb2VzIG5vdGhpbmcuXHJcbiAgICAgKi9cclxuICAgIHRoaXMuYW5zd2VyID0gZnVuY3Rpb24oc3VibWl0dGVkQW5zd2VyKSB7XHJcbiAgICAgICAgaWYgKGFuc3dlcmVkIHx8IWNoZWNrQW5zd2VyKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFuc3dlcmVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy8gY2hlY2tBbnN3ZXIgbWV0aG9kIHNob3VsZCByZXR1cm4gdGhlIHN0YXR1cyByZXN1bHRzXHJcbiAgICAgICAgcG9pbnRzID0gY2hlY2tBbnN3ZXIoYW5zd2VyLCBzdWJtaXR0ZWRBbnN3ZXIsIGluZm8pO1xyXG5cclxuICAgICAgICAvLyBpZiBoaW50cyBhcmUgYWxsb3dlZCBhbmQgaGF2ZSBiZWVuIHVzZWQsIHN1YnRyYWN0IHRoZSBwb2ludHNcclxuICAgICAgICBpZiAoaGludHMuYWxsb3dlZCAmJiBoaW50c1VzZWQgPiAwKSB7XHJcbiAgICAgICAgICAgIHBvaW50cyAtPSAoaGludHNVc2VkICogaGludHMuY29zdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBlbnN1cmUgdGhhdCBubyBuZWdhdGl2ZSBwb2ludHMgYXJlIGF3YXJkZWRcclxuICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgcG9pbnRzKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5wb2ludHMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIWFuc3dlcmVkIHx8IHBvaW50cyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcG9pbnRzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgc3RhdGUgb2YgdGhlIHF1ZXN0aW9uLlxyXG4gICAgICovXHJcbiAgICB0aGlzLmFuc3dlcmVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIGFuc3dlcmVkO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBoaW50cyBhcmUgYWxsb3dlZCBmb3IgdGhpcyBxdWVzdGlvbiwgZmFsc2UgaWYgbm90LlxyXG4gICAgICogSWYgaGludHMgaGF2ZSBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXQsIG51bGwgaXMgcmV0dXJuZWQuXHJcbiAgICAgKi9cclxuICAgIHRoaXMuaGludHNBbGxvd2VkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKGhpbnRzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBoaW50cy5hbGxvd2VkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHJlbWFpbmluZyBoaW50cy5cclxuICAgICAqIElmIG5vIGhpbnRzIGFyZSBhbGxvd2VkIGZvciB0aGlzIHF1ZXN0aW9uLCBudWxsIGlzIHJldHVybmVkLlxyXG4gICAgICovXHJcbiAgICB0aGlzLmhpbnRzUmVtYWluaW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGFsbG93ZWQgPSB0aGlzLmhpbnRzQWxsb3dlZCgpO1xyXG5cclxuICAgICAgICBpZiAoYWxsb3dlZCA9PT0gbnVsbCB8fCBhbGxvd2VkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBoaW50cy5tYXhpbXVtIC0gaGludHNVc2VkO1xyXG4gICAgfTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgcmFuZG9tIGludGVnZXIgYmV0d2VlbiBtaW4gKGluY2x1c2l2ZSkgYW5kIG1heCAoaW5jbHVzaXZlKVxyXG4gKiBVc2luZyBNYXRoLnJvdW5kKCkgd2lsbCBnaXZlIHlvdSBhIG5vbi11bmlmb3JtIGRpc3RyaWJ1dGlvbiFcclxuICovXHJcbnZhciBnZXRSYW5kb21JbnQgPSBmdW5jdGlvbihtaW4sIG1heCkge1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgdGV4dCBiZXR3ZWVuIHR3byBkZWxpbWl0aW5nIHRleHQgb2NjdXJyZW5jZXNcclxuICovXHJcbnZhciBnZXRTdHJpbmdCZXR3ZWVuID0gZnVuY3Rpb24odGV4dCwgZmlyc3RTdHJpbmcsIHNlY29uZFN0cmluZykge1xyXG4gICAgdmFyIGZpcnN0UG9zID0gdGV4dC5pbmRleE9mKGZpcnN0U3RyaW5nKTtcclxuICAgIHZhciBzZWNvbmRQb3MgPSB0ZXh0LmluZGV4T2Yoc2Vjb25kU3RyaW5nKTtcclxuXHJcbiAgICBpZiAoZmlyc3RQb3MgPj0gMCAmJiBzZWNvbmRQb3MgPj0gMCAmJiBzZWNvbmRQb3MgPiBmaXJzdFBvcykge1xyXG4gICAgICAgIHJldHVybiB0ZXh0LnN1YnN0cihmaXJzdFBvcyArIDEsIHNlY29uZFBvcyAtIGZpcnN0UG9zIC0gMSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XHJcblxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcclxuICAgIG1vZHVsZS5leHBvcnRzLlF1ZXN0aW9uID0gUXVlc3Rpb247XHJcbiAgICBtb2R1bGUuZXhwb3J0cy5RdWl6ID0gUXVpejtcclxufVxuYW5ndWxhci5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5jb25maWcoW1wiJGxvY2F0aW9uUHJvdmlkZXJcIiwgXCIkc3RhdGVQcm92aWRlclwiLCBcIiR1cmxSb3V0ZXJQcm92aWRlclwiLCBmdW5jdGlvbigkbG9jYXRpb25Qcm92aWRlciwgJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xyXG4gICAgICAgIC8vIGVuYWJsZSBIVE1MNSBwdXNoc3RhdGVcclxuICAgICAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XHJcblxyXG4gICAgICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9ob21lJyk7XHJcblxyXG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnaG9tZScsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9ob21lJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2J1aWxkL3ZpZXdzL3BhcnRpYWxzL2hvbWUucGFydGlhbC5odG1sJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ3F1aXonLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvcXVpeicsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9idWlsZC92aWV3cy9wYXJ0aWFscy9xdWl6LnBhcnRpYWwuaHRtbCdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdjb3VudHJpZXMnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvY291bnRyaWVzJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2J1aWxkL3ZpZXdzL3BhcnRpYWxzL2NvdW50cmllcy5wYXJ0aWFsLmh0bWwnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnY291bnRyaWVzLmRldGFpbCcsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy86YWxwaGEzQ29kZScsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9idWlsZC92aWV3cy9wYXJ0aWFscy9jb3VudHJpZXMtZGV0YWlsLnBhcnRpYWwuaHRtbCdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdsb2dpbicsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9sb2dpbicsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9idWlsZC92aWV3cy9wYXJ0aWFscy9sb2dpbi5wYXJ0aWFsLmh0bWwnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnbG9nb3V0Jywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2xvZ291dCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTG9nb3V0Q3RybCdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdyZWdpc3RlcicsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9yZWdpc3RlcicsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9idWlsZC92aWV3cy9wYXJ0aWFscy9yZWdpc3Rlci5wYXJ0aWFsLmh0bWwnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnc2V0dGluZ3MnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvc2V0dGluZ3MnLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYnVpbGQvdmlld3MvcGFydGlhbHMvc2V0dGluZ3MucGFydGlhbC5odG1sJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2Fib3V0Jywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2Fib3V0JyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2J1aWxkL3ZpZXdzL3BhcnRpYWxzL2Fib3V0LnBhcnRpYWwuaHRtbCdcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuY29udHJvbGxlcignQ291bnRyaWVzQ3RybCcsIFtcIiRzY29wZVwiLCBcIkNvdW50cnlTcnZcIiwgZnVuY3Rpb24oJHNjb3BlLCBDb3VudHJ5U3J2KSB7XHJcbiAgICAgICAgdmFyIGNvdW50cmllc0J5TGV0dGVyID0gbnVsbDtcclxuICAgICAgICB2YXIgY291bnRyeUtleXMgPSBudWxsO1xyXG5cclxuICAgICAgICB2YXIgaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBjb3VudHJpZXNCeUxldHRlciA9IENvdW50cnlTcnYuZ2V0Q291bnRyaWVzQnlMZXR0ZXIoKTtcclxuICAgICAgICAgICAgY291bnRyeUtleXMgPSBPYmplY3Qua2V5cyhjb3VudHJpZXNCeUxldHRlcik7XHJcblxyXG4gICAgICAgICAgICBpZiAoISRzY29wZS4kJHBoYXNlKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jb3VudHJ5S2V5cyA9IGNvdW50cnlLZXlzO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jb3VudHJpZXNCeUxldHRlciA9IGNvdW50cmllc0J5TGV0dGVyO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY291bnRyeUtleXMgPSBjb3VudHJ5S2V5cztcclxuICAgICAgICAgICAgICAgICRzY29wZS5jb3VudHJpZXNCeUxldHRlciA9IGNvdW50cmllc0J5TGV0dGVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKENvdW50cnlTcnYuYXJlQ291bnRyaWVzTG9hZGVkKCkpIHtcclxuICAgICAgICAgICAgaW5pdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJHNjb3BlLiRvbignY291bnRyaWVzLmxvYWRlZCcsIGZ1bmN0aW9uKCkgIHtcclxuICAgICAgICAgICAgaW5pdCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfV0pO1xuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0NvdW50cnlEZXRhaWxDdHJsJywgW1wiJHNjb3BlXCIsIFwiQ291bnRyeVNydlwiLCBcIiRzdGF0ZVBhcmFtc1wiLCBmdW5jdGlvbigkc2NvcGUsIENvdW50cnlTcnYsICRzdGF0ZVBhcmFtcykge1xyXG4gICAgICAgIHZhciBhbHBoYTNDb2RlID0gJHN0YXRlUGFyYW1zLmFscGhhM0NvZGU7XHJcblxyXG4gICAgICAgIGlmIChDb3VudHJ5U3J2LmFyZUNvdW50cmllc0xvYWRlZCgpKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5jb3VudHJ5ID0gQ291bnRyeVNydi5nZXRDb3VudHJ5QnlBbHBoYTMoYWxwaGEzQ29kZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkc2NvcGUuJG9uKCdjb3VudHJpZXMubG9hZGVkJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY291bnRyeSA9IENvdW50cnlTcnYuZ2V0Q291bnRyeUJ5QWxwaGEzKGFscGhhM0NvZGUpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgZ2V0Q291bnRyeUZyb21TZXJ2aWNlID0gZnVuY3Rpb24oYWxwaGEzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBDb3VudHJ5U3J2LmdldENvdW50cnlCeUFscGhhMyhhbHBoYTMpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5nZXRDb3VudHJ5RnJvbVNlcnZpY2UgPSBnZXRDb3VudHJ5RnJvbVNlcnZpY2U7XHJcbiAgICB9XSk7XG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuY29udHJvbGxlcignRHJvcGRvd25DdHJsJywgW1wiJHNjb3BlXCIsIGZ1bmN0aW9uKCRzY29wZSkge1xyXG4gICAgICAgIHZhciB2aXNpYmxlID0gZmFsc2U7XHJcblxyXG4gICAgICAgICRzY29wZS50b2dnbGVEcm9wZG93biA9IHRvZ2dsZURyb3Bkb3duO1xyXG4gICAgICAgICRzY29wZS5zaG93RHJvcGRvd24gPSBzaG93RHJvcGRvd247XHJcbiAgICAgICAgJHNjb3BlLmhpZGVEcm9wZG93biA9IGhpZGVEcm9wZG93bjtcclxuICAgICAgICAkc2NvcGUuaXNEcm9wZG93blZpc2libGUgPSBpc0Ryb3Bkb3duVmlzaWJsZTtcclxuXHJcbiAgICAgICAgJHNjb3BlLmhhbmRsZUNsaWNrT3V0c2lkZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ0xJQ0tFRCBPVVRTSURFXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdG9nZ2xlRHJvcGRvd24oKSB7XHJcbiAgICAgICAgICAgIHZpc2libGUgPSAhdmlzaWJsZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNob3dEcm9wZG93bigpIHtcclxuICAgICAgICAgICAgdmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBoaWRlRHJvcGRvd24oKSB7XHJcbiAgICAgICAgICAgIHZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGlzRHJvcGRvd25WaXNpYmxlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmlzaWJsZTtcclxuICAgICAgICB9XHJcbiAgICB9XSk7XG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuY29udHJvbGxlcignTG9naW5DdHJsJywgW1wiJHNjb3BlXCIsIFwiVXNlclNydlwiLCBcIkZvY3VzU3J2XCIsIGZ1bmN0aW9uKCRzY29wZSwgVXNlclNydiwgRm9jdXNTcnYpIHtcclxuICAgICAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcclxuICAgICAgICAgICAgVXNlclNydi5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGluZm9ybSBhcHBsaWNhdGlvbiBjb250cm9sIGFib3V0IGxvZ2luIGV2ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdhcHAubG9naW4nLCByZXNwb25zZS5kYXRhKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBub3RpZnkgdXNlciBhYm91dCBlcnJvciBpbiBsb2dpbiBwcm9jZXNzXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBmb2N1cyB1c2VybmFtZSBmaWVsZFxyXG4gICAgICAgIEZvY3VzU3J2KCd1c2VybmFtZScpO1xyXG4gICAgfV0pO1xuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0xvZ291dEN0cmwnLCBbXCIkc2NvcGVcIiwgXCJVc2VyU3J2XCIsIGZ1bmN0aW9uKCRzY29wZSwgVXNlclNydikge1xyXG4gICAgICAgIFVzZXJTcnYubG9nb3V0KClcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpbmZvcm0gYXBwbGljYXRpb24gY29udHJvbCBhYm91dCBsb2dvdXQgZXZlbnRcclxuICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnYXBwLmxvZ291dCcpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5jb250cm9sbGVyKCdRdWl6Q3RybCcsIFtcIiRzY29wZVwiLCBcIlF1aXpTcnZcIiwgXCJMb2dTcnZcIiwgXCJGb2N1c1NydlwiLCBcIm5nUHJvZ3Jlc3NGYWN0b3J5XCIsIGZ1bmN0aW9uKCRzY29wZSwgUXVpelNydiwgTG9nU3J2LCBGb2N1c1NydiwgbmdQcm9ncmVzc0ZhY3RvcnkpIHtcclxuXHJcbiAgICAgICAgLy8gUHJvZ3Jlc3MgYmFyIGluaXRpYWxpemF0aW9uXHJcbiAgICAgICAgJHNjb3BlLnByb2dyZXNzYmFyID0gbmdQcm9ncmVzc0ZhY3RvcnkuY3JlYXRlSW5zdGFuY2UoKTtcclxuICAgICAgICAkc2NvcGUucHJvZ3Jlc3NiYXIuc2V0UGFyZW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdxdWl6LXByb2dyZXNzJykpO1xyXG4gICAgICAgICRzY29wZS5wcm9ncmVzc2Jhci5zZXRBYnNvbHV0ZSgpO1xyXG4gICAgICAgICRzY29wZS5wcm9ncmVzc2Jhci5zZXRDb2xvcihcIiMzMzZlN2JcIik7XHJcblxyXG4gICAgICAgIHZhciBxdWVzdGlvbiA9IG51bGw7XHJcblxyXG4gICAgICAgIHZhciBzdGFydFF1aXogPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgUXVpelNydi5pbml0KClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZ1Nydi5pbmZvKFwiUXVpeiBzdGFydGVkXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVRdWVzdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2dTcnYuZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciB1cGRhdGVRdWVzdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBxdWVzdGlvbiA9IFF1aXpTcnYuZ2V0Q3VycmVudFF1ZXN0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICBGb2N1c1NydignYW5zd2VyJyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHJlbmRlclF1ZXN0aW9uID0gZnVuY3Rpb24odGV4dCwgY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXh0XHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZShcIltcIiwgXCI8c3BhbiBjbGFzcz0nXCIgKyBjbGFzc05hbWUgKyBcIic+XCIpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZShcIl1cIiwgXCI8L3NwYW4+XCIpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBzdWJtaXRBbnN3ZXIgPSBmdW5jdGlvbihzdWJtaXR0ZWRBbnN3ZXIpIHtcclxuICAgICAgICAgICAgaWYgKHN1Ym1pdHRlZEFuc3dlcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocXVlc3Rpb24uYW5zd2VyKHN1Ym1pdHRlZEFuc3dlcikpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHNldCBwcm9ncmVzcyBiYXJcclxuICAgICAgICAgICAgICAgIC8vJHNjb3BlLnByb2dyZXNzYmFyLnNldCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHNldCBmb2N1cyB0byBuZXh0IHF1ZXN0aW9uIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgRm9jdXNTcnYoJ2J0bk5leHRRdWVzdGlvbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGhhbmRsZUtleVByZXNzID0gZnVuY3Rpb24oa2V5RXZlbnQpIHtcclxuICAgICAgICAgICAgaWYgKGtleUV2ZW50LndoaWNoID09IDEzKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJtaXRBbnN3ZXIoJHNjb3BlLmFuc3dlck9iai5hbnN3ZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGlzUXVpelJ1bm5pbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFF1aXpTcnYuaXNRdWl6UnVubmluZygpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRDdXJyZW50UXVlc3Rpb25OdW1iZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFF1aXpTcnYuZ2V0Q3VycmVudFF1ZXN0aW9uTnVtYmVyKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldE51bWJlck9mUXVpelF1ZXN0aW9ucyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUXVpelNydi5nZXROdW1iZXJPZlF1aXpRdWVzdGlvbnMoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgcXVlc3Rpb25BbnN3ZXJlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoIWlzUXVpelJ1bm5pbmcoKSB8fCBxdWVzdGlvbiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcXVlc3Rpb24uYW5zd2VyZWQoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0UXVlc3Rpb25UZXh0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChxdWVzdGlvbiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZW5kZXJRdWVzdGlvbihxdWVzdGlvbi5xdWVzdGlvbigpLCAncXVlc3Rpb24taGlnaGxpZ2h0JykgKyBcIj9cIjtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0QW5zd2VyVGV4dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAocXVlc3Rpb24gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcXVlc3Rpb24uc29sdXRpb24oKS5jb3JyZWN0O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBuZXh0UXVlc3Rpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgUXVpelNydi5uZXh0UXVlc3Rpb24oKTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5hbnN3ZXJPYmouYW5zd2VyID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgIHVwZGF0ZVF1ZXN0aW9uKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLnN0YXJ0UXVpeiA9IHN0YXJ0UXVpejtcclxuICAgICAgICAkc2NvcGUuaXNRdWl6UnVubmluZyA9IGlzUXVpelJ1bm5pbmc7XHJcbiAgICAgICAgJHNjb3BlLmdldEN1cnJlbnRRdWVzdGlvbk51bWJlciA9IGdldEN1cnJlbnRRdWVzdGlvbk51bWJlcjtcclxuICAgICAgICAkc2NvcGUuZ2V0TnVtYmVyT2ZRdWl6UXVlc3Rpb25zID0gZ2V0TnVtYmVyT2ZRdWl6UXVlc3Rpb25zO1xyXG4gICAgICAgICRzY29wZS5nZXRRdWVzdGlvblRleHQgPSBnZXRRdWVzdGlvblRleHQ7XHJcbiAgICAgICAgJHNjb3BlLmdldEFuc3dlclRleHQgPSBnZXRBbnN3ZXJUZXh0O1xyXG4gICAgICAgICRzY29wZS5oYW5kbGVLZXlQcmVzcyA9IGhhbmRsZUtleVByZXNzO1xyXG4gICAgICAgICRzY29wZS5zdWJtaXRBbnN3ZXIgPSBzdWJtaXRBbnN3ZXI7XHJcbiAgICAgICAgJHNjb3BlLnF1ZXN0aW9uQW5zd2VyZWQgPSBxdWVzdGlvbkFuc3dlcmVkO1xyXG4gICAgICAgICRzY29wZS5uZXh0UXVlc3Rpb24gPSBuZXh0UXVlc3Rpb247XHJcblxyXG4gICAgICAgICRzY29wZS5hbnN3ZXJPYmogPSB7XHJcbiAgICAgICAgICAgIGFuc3dlcjogXCJcIlxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIGluaXRpYWxseSB0cnkgdG8gdXBkYXRlIHF1ZXN0aW9uXHJcbiAgICAgICAgdXBkYXRlUXVlc3Rpb24oKTtcclxuICAgIH1dKTtcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5maWx0ZXIoJ3JlbmRlckh0bWwnLCBbXCIkc2NlXCIsIGZ1bmN0aW9uKCRzY2UpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24odGV4dCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJHNjZS50cnVzdEFzSHRtbCh0ZXh0KTtcclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmZhY3RvcnkoJ0F1dGhJbnRlcmNlcHRvcicsIFtcIkF1dGhUb2tlblNydlwiLCBmdW5jdGlvbihBdXRoVG9rZW5TcnYpIHtcclxuICAgICAgICB2YXIgYWRkVG9rZW4gPSBmdW5jdGlvbihjb25maWcpIHtcclxuICAgICAgICAgICAgdmFyIHRva2VuID0gQXV0aFRva2VuU3J2LmdldFRva2VuKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XHJcbiAgICAgICAgICAgICAgICBjb25maWcuaGVhZGVyc1snWC1BdXRoJ10gPSB0b2tlbjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXF1ZXN0OiBhZGRUb2tlblxyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuZmFjdG9yeSgnQXV0aFRva2VuU3J2JywgW1wiJHdpbmRvd1wiLCBmdW5jdGlvbigkd2luZG93KSB7XHJcbiAgICAgICAgdmFyIHN0b3JlID0gJHdpbmRvdy5zZXNzaW9uU3RvcmFnZTtcclxuICAgICAgICB2YXIga2V5ID0gJ2F1dGgtdG9rZW4nO1xyXG5cclxuICAgICAgICB2YXIgZ2V0VG9rZW4gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0b3JlLmdldEl0ZW0oa2V5KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgc2V0VG9rZW4gPSBmdW5jdGlvbih0b2tlbikge1xyXG4gICAgICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgICAgIHN0b3JlLnNldEl0ZW0oa2V5LCB0b2tlbik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdG9yZS5yZW1vdmVJdGVtKGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBnZXRUb2tlbjogZ2V0VG9rZW4sXHJcbiAgICAgICAgICAgIHNldFRva2VuOiBzZXRUb2tlblxyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuZmFjdG9yeSgnQ291bnRyeVNydicsIFtcIiRodHRwXCIsIFwiSW5kZXhlZERCU3J2XCIsIFwiTG9nU3J2XCIsIGZ1bmN0aW9uKCRodHRwLCBJbmRleGVkREJTcnYsIExvZ1Nydikge1xyXG4gICAgICAgIC8vIENvdW50cmllcyBhcnJheVxyXG4gICAgICAgIHZhciBjb3VudHJpZXMgPSBudWxsO1xyXG5cclxuICAgICAgICB2YXIgY291bnRyaWVzQnlBbHBoYTMgPSBudWxsO1xyXG4gICAgICAgIHZhciBjb3VudHJpZXNCeUxldHRlciA9IG51bGw7XHJcblxyXG4gICAgICAgIC8vIEluZGV4ZWREQlxyXG4gICAgICAgIHZhciBkYXRhYmFzZSA9ICdtYWdlbGxhbic7XHJcbiAgICAgICAgdmFyIHN0b3JlID0gJ2NvdW50cnlTdG9yZSc7XHJcbiAgICAgICAgdmFyIGtleUNvdW50cmllcyA9ICdjb3VudHJpZXMnO1xyXG4gICAgICAgIHZhciBrZXlWZXJzaW9uID0gJ3ZlcnNpb24nO1xyXG5cclxuICAgICAgICB2YXIgaW5kZXhlZERCQXZhaWxhYmxlID0gSW5kZXhlZERCU3J2LmluZGV4ZWREQkF2YWlsYWJsZSgpO1xyXG5cclxuICAgICAgICB2YXIgaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbG9hZENvdW50cmllcygpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBsb2FkQ291bnRyaWVzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIGluZGV4ZWREQiBpcyBhdmFpbGFibGVcclxuICAgICAgICAgICAgaWYgKGluZGV4ZWREQkF2YWlsYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBkYXRhYmFzZSBleGlzdHNcclxuICAgICAgICAgICAgICAgICAgICBJbmRleGVkREJTcnYuY3JlYXRlRGF0YWJhc2UoZGF0YWJhc2UsIHN0b3JlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihnZXRFbXB0eU9iamVjdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZ2V0SW50ZXJuYWxWZXJzaW9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihnZXRFeHRlcm5hbFZlcnNpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGRldGVybWluZUxvYWRTdHJhdGVneSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4obG9hZERhdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyaWVzID0gb2JqWydjb3VudHJpZXMnXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dTcnYuaW5mbyhcImxvYWRlZCBjb3VudHJpZXMgZnJvbVwiLCBvYmpbJ2xvYWRTdHJhdGVneSddLnRvVXBwZXJDYXNlKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZGl0aW9uYWxseSBtYXAgY291bnRyaWVzIGJ5IHZhcmlvdXMgcHJvcGVydGllc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyaWVzQnlBbHBoYTMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cmllc0J5TGV0dGVyID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyaWVzLmZvckVhY2goZnVuY3Rpb24oYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ5IGFscGhhMyBjb2RlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyaWVzQnlBbHBoYTNbY1snYWxwaGEzQ29kZSddXSA9IGM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ5IGxldHRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdExldHRlciA9IGNbJ25hbWUnXS5zdWJzdHIoMCwgMSkudG9VcHBlckNhc2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChmaXJzdExldHRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICfDhCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdExldHRlciA9ICdBJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnw5YnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RMZXR0ZXIgPSAnTyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ8OcJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0TGV0dGVyID0gJ1UnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50cmllc0J5TGV0dGVyW2ZpcnN0TGV0dGVyXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cmllc0J5TGV0dGVyW2ZpcnN0TGV0dGVyXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyaWVzQnlMZXR0ZXJbZmlyc3RMZXR0ZXJdLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHBoYTNDb2RlOiBjLmFscGhhM0NvZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGMubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShjb3VudHJpZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dTcnYuZXJyb3IoXCJmYWlsZWQgdG8gbG9hZCBjb3VudHJpZXNcIiwgZXJyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIG5vdCwgd2UgYWx3YXlzIHRyeSB0byBkb3dubG9hZCBpdCBmcm9tIHRoZSBjb3VudHJ5IEFQSSBlbmRwb2ludFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldENvdW50cmllc0Zyb21BUEkoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBkZXRlcm1pbmVMb2FkU3RyYXRlZ3kgPSBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0cmF0ZWd5O1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBpbnRlcm5hbFZlcnNpb24gPSBvYmpbXCJpbnRlcm5hbFZlcnNpb25cIl07XHJcbiAgICAgICAgICAgICAgICB2YXIgZXh0ZXJuYWxWZXJzaW9uID0gb2JqW1wiZXh0ZXJuYWxWZXJzaW9uXCJdO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpbnRlcm5hbFZlcnNpb24gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJhdGVneSA9ICdhcGknO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChleHRlcm5hbFZlcnNpb24gPiBpbnRlcm5hbFZlcnNpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJhdGVneSA9ICdhcGknO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJhdGVneSA9ICdkYic7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgb2JqWydsb2FkU3RyYXRlZ3knXSA9IHN0cmF0ZWd5O1xyXG5cclxuICAgICAgICAgICAgICAgIHJlc29sdmUob2JqKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGxvYWREYXRhID0gZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdHJhdGVneSA9IG9ialsnbG9hZFN0cmF0ZWd5J107XHJcblxyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChzdHJhdGVneSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FwaSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldENvdW50cmllc0Zyb21BUEkoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oY291bnRyaWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqW1wiY291bnRyaWVzXCJdID0gY291bnRyaWVzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdG9yZSBjb3VudHJpZXMgYW5kIHZlcnNpb24gbnVtYmVyIGluIGRhdGFiYXNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5kZXhlZERCU3J2LnB1dEl0ZW0oZGF0YWJhc2UsIHN0b3JlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleUNvdW50cmllcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICBjb3VudHJpZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5kZXhlZERCU3J2LnB1dEl0ZW0oZGF0YWJhc2UsIHN0b3JlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleVZlcnNpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBvYmpbXCJleHRlcm5hbFZlcnNpb25cIl1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RiJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Q291bnRyaWVzRnJvbURCKG9iailcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKF9vYmopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKF9vYmopO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgnVW5rbm93biBsb2FkIHN0cmF0ZWd5Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRFbXB0eU9iamVjdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHt9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldEludGVybmFsVmVyc2lvbiA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBJbmRleGVkREJTcnYucmV0cmlldmVJdGVtKGRhdGFiYXNlLCBzdG9yZSwga2V5VmVyc2lvbilcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ialtcImludGVybmFsVmVyc2lvblwiXSA9IGl0ZW0udmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ialtcImludGVybmFsVmVyc2lvblwiXSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRFeHRlcm5hbFZlcnNpb24gPSBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldFZlcnNpb25Gcm9tQVBJKClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHZlcnNpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmpbXCJleHRlcm5hbFZlcnNpb25cIl0gPSB2ZXJzaW9uO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldENvdW50cmllc0Zyb21EQiA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBJbmRleGVkREJTcnYucmV0cmlldmVJdGVtKGRhdGFiYXNlLCBzdG9yZSwga2V5Q291bnRyaWVzKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqW1wiY291bnRyaWVzXCJdID0gaXRlbS52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUob2JqKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0Q291bnRyaWVzRnJvbUFQSSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJy9hcGkvY291bnRyaWVzJylcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldFZlcnNpb25Gcm9tQVBJID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICRodHRwLmdldCgnL2FwaS9jb3VudHJpZXMvdmVyc2lvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZS5kYXRhLnZlcnNpb24gfHwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRDb3VudHJ5QnlBbHBoYTMgPSBmdW5jdGlvbihhbHBoYTMpIHtcclxuICAgICAgICAgICAgaWYgKGNvdW50cmllc0J5QWxwaGEzID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNvdW50cmllc0J5QWxwaGEzW2FscGhhM107XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldENvdW50cmllc0J5TGV0dGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChjb3VudHJpZXNCeUxldHRlciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjb3VudHJpZXNCeUxldHRlcjtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgYXJlQ291bnRyaWVzTG9hZGVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb3VudHJpZXMgIT09IG51bGwgJiYgY291bnRyaWVzLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaW5pdDogaW5pdCxcclxuICAgICAgICAgICAgZ2V0Q291bnRyeUJ5QWxwaGEzOiBnZXRDb3VudHJ5QnlBbHBoYTMsXHJcbiAgICAgICAgICAgIGdldENvdW50cmllc0J5TGV0dGVyOiBnZXRDb3VudHJpZXNCeUxldHRlcixcclxuICAgICAgICAgICAgYXJlQ291bnRyaWVzTG9hZGVkOiBhcmVDb3VudHJpZXNMb2FkZWRcclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmZhY3RvcnkoJ0ZvY3VzU3J2JywgW1wiJHRpbWVvdXRcIiwgXCIkd2luZG93XCIsIGZ1bmN0aW9uKCR0aW1lb3V0LCAkd2luZG93KSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIC8vIHRpbWVvdXQgbWFrZXMgc3VyZSB0aGF0IGlzIGludm9rZWQgYWZ0ZXIgYW55IG90aGVyIGV2ZW50IGhhcyBiZWVuIHRyaWdnZXJlZC5cclxuICAgICAgICAgICAgLy8gZS5nLiBjbGljayBldmVudHMgdGhhdCBuZWVkIHRvIHJ1biBiZWZvcmUgdGhlIGZvY3VzIG9yXHJcbiAgICAgICAgICAgIC8vIGlucHV0cyBlbGVtZW50cyB0aGF0IGFyZSBpbiBhIGRpc2FibGVkIHN0YXRlIGJ1dCBhcmUgZW5hYmxlZCB3aGVuIHRob3NlIGV2ZW50c1xyXG4gICAgICAgICAgICAvLyBhcmUgdHJpZ2dlcmVkLlxyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gJHdpbmRvdy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuZmFjdG9yeSgnSW5kZXhlZERCU3J2JywgW1wiJHdpbmRvd1wiLCBmdW5jdGlvbigkd2luZG93KSB7XHJcbiAgICAgICAgdmFyIGtleVBhdGggPSAnbmFtZSc7XHJcblxyXG4gICAgICAgIHZhciBpbmRleGVkREIgPSAkd2luZG93LmluZGV4ZWREQiB8fCAkd2luZG93LndlYmtpdEluZGV4ZWREQiB8fCAkd2luZG93Lm1zSW5kZXhlZERCO1xyXG4gICAgICAgIHZhciBJREJLZXlSYW5nZSA9ICR3aW5kb3cuSURCS2V5UmFuZ2UgfHwgJHdpbmRvdy53ZWJraXRJREJLZXlSYW5nZTtcclxuXHJcbiAgICAgICAgdmFyIElEQlRyYW5zYWN0aW9uID0gJHdpbmRvdy5JREJUcmFuc2FjdGlvbiB8fCAkd2luZG93LndlYmtpdElEQlRyYW5zYWN0aW9uO1xyXG5cclxuICAgICAgICBpZiAoSURCVHJhbnNhY3Rpb24pIHtcclxuICAgICAgICAgICAgSURCVHJhbnNhY3Rpb24uUkVBRF9XUklURSA9IElEQlRyYW5zYWN0aW9uLlJFQURfV1JJVEUgfHwgJ3JlYWR3cml0ZSc7XHJcbiAgICAgICAgICAgIElEQlRyYW5zYWN0aW9uLlJFQURfT05MWSA9IElEQlRyYW5zYWN0aW9uLlJFQURfT05MWSB8fCAncmVhZG9ubHknO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGluZGV4ZWREQkF2YWlsYWJsZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5kZXhlZERCID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjcmVhdGVEYXRhYmFzZSA9IGZ1bmN0aW9uKGRiTmFtZSwgc3RvcmVOYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4oZGJOYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBlIGlzIGFuIGluc3RhbmNlIG9mIElEQlZlcnNpb25DaGFuZ2VFdmVudFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZGIgPSBlLnRhcmdldC5yZXN1bHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IGlkYi5jcmVhdGVPYmplY3RTdG9yZShzdG9yZU5hbWUsIHsga2V5UGF0aDoga2V5UGF0aCB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkLCB1cGRhdGUsIGRlbGV0ZVxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGUgZXJyb3JcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZHJvcERhdGFiYXNlID0gZnVuY3Rpb24oZGJOYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKGRiTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZHJvcCBzdWNjZXNzZnVsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShlKTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRyb3AgZmFpbGVkXHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGFkZEl0ZW0gPSBmdW5jdGlvbihkYk5hbWUsIHN0b3JlTmFtZSwgaXRlbSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKGRiTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlkYiA9IGUudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNhY3Rpb24gPSBpZGIudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCBJREJUcmFuc2FjdGlvbi5SRUFEX1dSSVRFKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShzdG9yZU5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBhZGRcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdEFkZCA9IHN0b3JlLmFkZChpdGVtKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEFkZC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEFkZC5vbmVycm9yID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBwdXRJdGVtID0gZnVuY3Rpb24oZGJOYW1lLCBzdG9yZU5hbWUsIGl0ZW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihkYk5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZGIgPSBlLnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zYWN0aW9uID0gaWRiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgSURCVHJhbnNhY3Rpb24uUkVBRF9XUklURSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoc3RvcmVOYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcXVlc3RBZGQgPSBzdG9yZS5wdXQoaXRlbSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBZGQub25zdWNjZXNzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBZGQub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgcmV0cmlldmVJdGVtID0gZnVuY3Rpb24oZGJOYW1lLCBzdG9yZU5hbWUsIGl0ZW1OYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKGRiTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlkYiA9IGUudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNhY3Rpb24gPSBpZGIudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCBJREJUcmFuc2FjdGlvbi5SRUFEX09OTFkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHN0b3JlTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IElEQktleVJhbmdlLm9ubHkoaXRlbU5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzdG9yZS5vcGVuQ3Vyc29yKHJhbmdlKS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJzb3IgPSBlLnRhcmdldC5yZXN1bHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3Vyc29yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gY3Vyc29yLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciByZXRyaWV2ZUl0ZW1zID0gZnVuY3Rpb24oZGJOYW1lLCBzdG9yZU5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihkYk5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZGIgPSBlLnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zYWN0aW9uID0gaWRiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgSURCVHJhbnNhY3Rpb24uUkVBRF9PTkxZKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShzdG9yZU5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzdG9yZS5vcGVuQ3Vyc29yKCkub25zdWNjZXNzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3Vyc29yID0gZS50YXJnZXQucmVzdWx0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnNvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChjdXJzb3IudmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShpdGVtcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjcmVhdGVEYXRhYmFzZTogY3JlYXRlRGF0YWJhc2UsXHJcbiAgICAgICAgICAgIGRyb3BEYXRhYmFzZTogZHJvcERhdGFiYXNlLFxyXG4gICAgICAgICAgICBhZGRJdGVtOiBhZGRJdGVtLFxyXG4gICAgICAgICAgICBwdXRJdGVtOiBwdXRJdGVtLFxyXG4gICAgICAgICAgICByZXRyaWV2ZUl0ZW06IHJldHJpZXZlSXRlbSxcclxuICAgICAgICAgICAgcmV0cmlldmVJdGVtczogcmV0cmlldmVJdGVtcyxcclxuICAgICAgICAgICAgaW5kZXhlZERCQXZhaWxhYmxlOiBpbmRleGVkREJBdmFpbGFibGVcclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmZhY3RvcnkoJ0xvZ1NydicsIFtcIkFwcENvbmZpZ1wiLCBmdW5jdGlvbihBcHBDb25maWcpIHtcclxuICAgICAgICB2YXIgbG9nSW5mbyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoQXBwQ29uZmlnW1wibG9nLmluZm9cIl0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgbG9nRXJyb3IgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKEFwcENvbmZpZ1tcImxvZy5lcnJvclwiXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaW5mbzogbG9nSW5mbyxcclxuICAgICAgICAgICAgZXJyb3I6IGxvZ0Vycm9yXHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5mYWN0b3J5KCdRdWl6U3J2JywgW1wiQXBwQ29uZmlnXCIsIFwiQ291bnRyeVNydlwiLCBcIkxvZ1NydlwiLCBmdW5jdGlvbihBcHBDb25maWcsIENvdW50cnlTcnYsIExvZ1Nydikge1xyXG4gICAgICAgIHZhciBjb3VudHJpZXMgPSBudWxsO1xyXG4gICAgICAgIHZhciBjb3VudHJpZXNCeUFscGhhMyA9IG51bGw7XHJcblxyXG4gICAgICAgIHZhciBxdWl6ID0gbnVsbDtcclxuXHJcbiAgICAgICAgdmFyIHNldENvdW50cmllcyA9IGZ1bmN0aW9uKF9jb3VudHJpZXMpIHtcclxuICAgICAgICAgICAgY291bnRyaWVzID0gX2NvdW50cmllcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY291bnRyaWVzTG9hZGVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb3VudHJpZXMgIT09IG51bGwgJiYgY291bnRyaWVzLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjb3VudHJpZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJDb3VudHJpZXMgaGF2ZSBub3QgYmVlbiBsb2FkZWRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcXVpeiA9IGNyZWF0ZVF1aXooJ2NvdW50cnknKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHF1aXouc3RhcnQoKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBpc1F1aXpSdW5uaW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChxdWl6ID09PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHF1aXouaGFzU3RhcnRlZCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjcmVhdGVRdWl6ID0gZnVuY3Rpb24ocXVpelR5cGUpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChxdWl6VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY291bnRyeSc6XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVDb3VudHJ5UXVpeigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNyZWF0ZUNvdW50cnlRdWl6ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBjb3VudHJ5UXVpeiA9IG5ldyBRdWl6KCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZnVsbFBvaW50cyA9IDEwMDtcclxuICAgICAgICAgICAgdmFyIGhpbnRNYXhpbXVtID0gMztcclxuICAgICAgICAgICAgdmFyIGhpbnRDb3N0ID0gMjU7XHJcblxyXG4gICAgICAgICAgICB2YXIgbGFzdFF1ZXN0aW9uQm9udXMgPSAyLjU7XHJcblxyXG4gICAgICAgICAgICB2YXIgcXVlc3Rpb25UeXBlcyA9IEFwcENvbmZpZ1sncXVpei5jb3VudHJ5LnR5cGVzJ107XHJcbiAgICAgICAgICAgIHZhciBxdWVzdGlvblR5cGVzTGVuZ3RoID0gT2JqZWN0LmtleXMocXVlc3Rpb25UeXBlcykubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgLy8gc2VsZWN0IGNvdW50cmllcyBmb3IgcXVlc3Rpb25zXHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZENvdW50cmllcyA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgbnVtYmVyT2ZRdWVzdGlvbnMgPSBBcHBDb25maWdbJ3F1aXouY291bnRyeS5xdWVzdGlvbnMnXTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyT2ZRdWVzdGlvbnM7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvdW50cnlPayA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIHdoaWxlICghY291bnRyeU9rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvdW50cnkgPSBjb3VudHJpZXNbZ2V0UmFuZG9tSW50KDAsIGNvdW50cmllcy5sZW5ndGggLSAxKV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnlPayA9IHNlbGVjdGVkQ291bnRyaWVzLmluZGV4T2YoY291bnRyeVsnYWxwaGEzQ29kZSddKSA8IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRDb3VudHJpZXMucHVzaChjb3VudHJ5WydhbHBoYTNDb2RlJ10pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBjcmVhdGUgcXVlc3Rpb25zIGZvciBxdWl6XHJcbiAgICAgICAgICAgIHZhciBxY250ID0gMDtcclxuICAgICAgICAgICAgc2VsZWN0ZWRDb3VudHJpZXMuZm9yRWFjaChmdW5jdGlvbihhbHBoYTMpIHtcclxuICAgICAgICAgICAgICAgIHFjbnQrKztcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgY291bnRyeSA9IENvdW50cnlTcnYuZ2V0Q291bnRyeUJ5QWxwaGEzKGFscGhhMyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHF1ZXN0aW9uVHlwZSA9IHF1ZXN0aW9uVHlwZXNbZ2V0UmFuZG9tSW50KDEsIHF1ZXN0aW9uVHlwZXNMZW5ndGgpXTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IGdldFF1ZXN0aW9uVGV4dChxdWVzdGlvblR5cGUsIGNvdW50cnkpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZm8gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogcXVlc3Rpb25UeXBlXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdmFyIGFuc3dlciA9IGdldFF1ZXN0aW9uQW5zd2VyKHF1ZXN0aW9uVHlwZSwgY291bnRyeSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hlY2tBbnN3ZXIgPSBnZXRDaGVja0Fuc3dlckxhbWJkYShxdWVzdGlvblR5cGUsIGZ1bGxQb2ludHMsIGxhc3RRdWVzdGlvbkJvbnVzKTtcclxuICAgICAgICAgICAgICAgIHZhciBoaW50cyA9IGdldFF1ZXN0aW9uSGludHMocXVlc3Rpb25UeXBlLCBoaW50TWF4aW11bSwgaGludENvc3QpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHRoZSBsYXN0IHF1ZXN0aW9uIGlzIHRoZSBib251cyBxdWVzdGlvblxyXG4gICAgICAgICAgICAgICAgaWYgKHFjbnQgPj0gbnVtYmVyT2ZRdWVzdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmZvWydib251cyddID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb3VudHJ5UXVpei5hZGRRdWVzdGlvbihuZXcgUXVlc3Rpb24oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5mbzogaW5mbyxcclxuICAgICAgICAgICAgICAgICAgICBhbnN3ZXI6IGFuc3dlcixcclxuICAgICAgICAgICAgICAgICAgICBjaGVja0Fuc3dlcjogY2hlY2tBbnN3ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgaGludHM6IGhpbnRzXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNvdW50cnlRdWl6O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRRdWVzdGlvblRleHQgPSBmdW5jdGlvbih0eXBlLCBjb3VudHJ5KSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnQ0FQSVRBTF9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJXaWUgaGVpw590IGRpZSBIYXVwdHN0YWR0IHZvbiBbXCIgKyBjb3VudHJ5Lm5hbWUgKyBcIl1cIjtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdDT1VOVFJZX09GX0NBUElUQUwnOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIltcIiArIGNvdW50cnkuY2FwaXRhbCArIFwiXSBpc3QgZGllIEhhdXB0c3RhZHQgdm9uIHdlbGNoZW0gTGFuZFwiXHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnUE9QVUxBVElPTl9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJXaWUgdmllbGUgTWVuc2NoZW4gbGViZW4gaW4gW1wiICsgY291bnRyeS5uYW1lICsgXCJdXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnQVJFQV9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJXaWUgZ3Jvw58gaXN0IGRpZSBGbMOkY2hlIHZvbiBbXCIgKyBjb3VudHJ5Lm5hbWUgKyBcIl1cIjtcclxuXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIj9cIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldFF1ZXN0aW9uQW5zd2VyID0gZnVuY3Rpb24odHlwZSwgY291bnRyeSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0NBUElUQUxfT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFsdFNwZWxsaW5ncyA9IGNvdW50cnkuYWx0U3BlbGxpbmdzICE9PSB1bmRlZmluZWQgJiYgY291bnRyeS5hbHRTcGVsbGluZ3NbJ2NhcGl0YWwnXSAhPT0gdW5kZWZpbmVkID8gY291bnRyeS5hbHRTcGVsbGluZ3NbJ2NhcGl0YWwnXSA6IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JyZWN0OiBjb3VudHJ5LmNhcGl0YWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdFNwZWxsaW5nczogYWx0U3BlbGxpbmdzXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdDT1VOVFJZX09GX0NBUElUQUwnOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbHRTcGVsbGluZ3MgPSBjb3VudHJ5LmFsdFNwZWxsaW5ncyAhPT0gdW5kZWZpbmVkICYmIGNvdW50cnkuYWx0U3BlbGxpbmdzWyduYW1lJ10gIT09IHVuZGVmaW5lZCA/IGNvdW50cnkuYWx0U3BlbGxpbmdzWyduYW1lJ10gOiBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29ycmVjdDogY291bnRyeS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRTcGVsbGluZ3M6IGFsdFNwZWxsaW5nc1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnUE9QVUxBVElPTl9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JyZWN0OiBjb3VudHJ5LnBvcHVsYXRpb25cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ0FSRUFfT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29ycmVjdDogY291bnRyeS5hcmVhXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIj9cIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldENoZWNrQW5zd2VyTGFtYmRhID0gZnVuY3Rpb24odHlwZSwgZnVsbFBvaW50cywgbGFzdFF1ZXN0aW9uQm9udXMpIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdDQVBJVEFMX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnQ09VTlRSWV9PRl9DQVBJVEFMJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oYW5zd2VyLCBzdWJtaXR0ZWRBbnN3ZXIsIGluZm8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvcnJlY3QgPSBzdWJtaXR0ZWRBbnN3ZXIgPT09IGFuc3dlci5jb3JyZWN0IHx8IChhbnN3ZXIuYWx0U3BlbGxpbmdzICYmIGFuc3dlci5hbHRTcGVsbGluZ3MuaW5kZXhPZihzdWJtaXR0ZWRBbnN3ZXIpID49IDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvaW50cyA9IGNvcnJlY3QgPyBmdWxsUG9pbnRzIDogMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvICE9PSB1bmRlZmluZWQgJiYgaW5mby5ib251cyAhPT0gdW5kZWZpbmVkICYmIGluZm8uYm9udXMgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyAqPSBsYXN0UXVlc3Rpb25Cb251cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50cztcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ1BPUFVMQVRJT05fT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdBUkVBX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihhbnN3ZXIsIHN1Ym1pdHRlZEFuc3dlciwgaW5mbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgcGVyY2VudGFnZSBkaWZmZXJlbmNlIGZyb20gY29ycmVjdCBhbnN3ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yUGVyY2VudGFnZSA9IE1hdGguYWJzKHN1Ym1pdHRlZEFuc3dlciAtIGFuc3dlci5jb3JyZWN0KSAvIGFuc3dlci5jb3JyZWN0ICogMTAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvaW50cztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvclBlcmNlbnRhZ2UgPD0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gMTAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yUGVyY2VudGFnZSA8PSA2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSA5MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvclBlcmNlbnRhZ2UgPD0gOSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gODA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3JQZXJjZW50YWdlIDw9IDEyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSA3MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvclBlcmNlbnRhZ2UgPD0gMTQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IDYwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yUGVyY2VudGFnZSA8PSAxNikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gNTA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3JQZXJjZW50YWdlIDw9IDE4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSA0MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvclBlcmNlbnRhZ2UgPD0gMjApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IDMwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yUGVyY2VudGFnZSA8PSAyNSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gMjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3JQZXJjZW50YWdlIDw9IDMwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSAxMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvICE9PSB1bmRlZmluZWQgJiYgaW5mby5ib251cyAhPT0gdW5kZWZpbmVkICYmIGluZm8uYm9udXMgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyAqPSBsYXN0UXVlc3Rpb25Cb251cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50cztcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiP1wiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldFF1ZXN0aW9uSGludHMgPSBmdW5jdGlvbih0eXBlLCBoaW50c1Bvc3NpYmxlLCBoaW50Q29zdCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0NBUElUQUxfT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdDT1VOVFJZX09GX0NBUElUQUwnOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93ZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW06IGhpbnRzUG9zc2libGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvc3Q6IGhpbnRDb3N0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnaXZlOiBmdW5jdGlvbihoaW50c1VzZWQsIGFuc3dlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFuc3dlci5jb3JyZWN0LnN1YnN0cigwLCBoaW50c1VzZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdQT1BVTEFUSU9OX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnQVJFQV9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxvd2VkOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCI/XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0Q3VycmVudFF1ZXN0aW9uTnVtYmVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICghaXNRdWl6UnVubmluZygpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcXVpei5nZXRDdXJyZW50UXVlc3Rpb25OdW1iZXIoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0TnVtYmVyT2ZRdWl6UXVlc3Rpb25zID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICghaXNRdWl6UnVubmluZygpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcXVpei5nZXROdW1iZXJPZlF1ZXN0aW9ucygpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRDdXJyZW50UXVlc3Rpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCFpc1F1aXpSdW5uaW5nKCkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBxdWl6LmN1cnJlbnRRdWVzdGlvbigpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBuZXh0UXVlc3Rpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCFpc1F1aXpSdW5uaW5nKCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcXVpei5uZXh0UXVlc3Rpb24oKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpbml0OiBpbml0LFxyXG4gICAgICAgICAgICBzZXRDb3VudHJpZXM6IHNldENvdW50cmllcyxcclxuICAgICAgICAgICAgaXNRdWl6UnVubmluZzogaXNRdWl6UnVubmluZyxcclxuICAgICAgICAgICAgZ2V0Q3VycmVudFF1ZXN0aW9uTnVtYmVyOiBnZXRDdXJyZW50UXVlc3Rpb25OdW1iZXIsXHJcbiAgICAgICAgICAgIGdldE51bWJlck9mUXVpelF1ZXN0aW9uczogZ2V0TnVtYmVyT2ZRdWl6UXVlc3Rpb25zLFxyXG4gICAgICAgICAgICBnZXRDdXJyZW50UXVlc3Rpb246IGdldEN1cnJlbnRRdWVzdGlvbixcclxuICAgICAgICAgICAgbmV4dFF1ZXN0aW9uOiBuZXh0UXVlc3Rpb25cclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmZhY3RvcnkoJ1VzZXJTcnYnLCBbXCIkaHR0cFwiLCBcIkF1dGhUb2tlblNydlwiLCBmdW5jdGlvbigkaHR0cCwgQXV0aFRva2VuU3J2KSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICB2YXIgZ2V0VXNlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXInKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0VXNlckZyb21TdG9yYWdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IEF1dGhUb2tlblNydi5nZXRUb2tlbigpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0b2tlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIEF1dGhUb2tlblNydi5zZXRUb2tlbih0b2tlbik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGdldFVzZXIoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBubyB0b2tlbiwgd2UgcmVqZWN0IHRoZSBwcm9taXNlXHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwiTm8gdG9rZW4gaW4gc3RvcmFnZVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb24nLCB7XHJcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsXHJcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcclxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi50b2tlbiA9IHJlc3BvbnNlLmRhdGE7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gc2F2ZSB0b2tlbiBsb2NhbGx5XHJcbiAgICAgICAgICAgICAgICBBdXRoVG9rZW5TcnYuc2V0VG9rZW4oc2VsZi50b2tlbik7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFVzZXIoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGxvZ291dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnRva2VuID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgdG9rZW4gbG9jYWxseVxyXG4gICAgICAgICAgICAgICAgQXV0aFRva2VuU3J2LnNldFRva2VuKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBnZXRVc2VyOiBnZXRVc2VyLFxyXG4gICAgICAgICAgICBnZXRVc2VyRnJvbVN0b3JhZ2U6IGdldFVzZXJGcm9tU3RvcmFnZSxcclxuICAgICAgICAgICAgbG9naW46IGxvZ2luLFxyXG4gICAgICAgICAgICBsb2dvdXQ6IGxvZ291dFxyXG4gICAgICAgIH1cclxuICAgIH1dKTsiLCIvLyBvd24gY2xhc3NlcyBhbmQgZnVuY3Rpb25zXHJcblxyXG4vLyAtLS0tLS0tLS0tIFFVSVogLS0tLS0tLS0tLVxyXG52YXIgUXVpeiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gaW5kZXggb2YgY3VycmVudCBxdWVzdGlvblxyXG4gICAgdmFyIGN1cnJlbnRRdWVzdGlvbklkeCA9IG51bGw7XHJcblxyXG4gICAgLy8gYXJyYXkgY29udGFpbmluZyBhbGwgcXVlc3Rpb25zXHJcbiAgICB2YXIgcXVlc3Rpb25zID0gW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdGFydHMgdGhlIHF1aXouXHJcbiAgICAgKi9cclxuICAgIHRoaXMuc3RhcnQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyBjaGVjayBpZiBxdWl6IGhhcyBxdWVzdGlvbnNcclxuICAgICAgICBpZiAocXVlc3Rpb25zLmxlbmd0aCA8PSAwKVxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIkNhbm5vdCBzdGFydCBhIHF1aXogd2l0aG91dCBxdWVzdGlvbnNcIik7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLm5leHRRdWVzdGlvbigpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmlzQWN0aXZlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzU3RhcnRlZCgpICYmICF0aGlzLmhhc0VuZGVkKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuaGFzU3RhcnRlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBjdXJyZW50UXVlc3Rpb25JZHggIT09IG51bGw7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuaGFzRW5kZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5oYXNTdGFydGVkKCkgJiYgY3VycmVudFF1ZXN0aW9uSWR4ID49IHF1ZXN0aW9ucy5sZW5ndGg7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIG5ldyBxdWVzdGlvbiB0byB0aGUgcXVpei5cclxuICAgICAqIFRoZSBwYXJhbWV0ZXIgbXVzdCBiZSBhbiBxdWVzdGlvbiBvYmplY3QuXHJcbiAgICAgKiBJZiBubyBxdWVzdGlvbiBvYmplY3QgaXMgcGFzc2VkIG9yIGFuIG9iamVjdCB3aXRoIG1pc3NpbmcgcHJvcGVydGllcywgYW4gZXJyb3IgaXMgdGhyb3duLlxyXG4gICAgICovXHJcbiAgICB0aGlzLmFkZFF1ZXN0aW9uID0gZnVuY3Rpb24ocXVlc3Rpb24pIHtcclxuICAgICAgICBpZiAocXVlc3Rpb24gPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJObyBxdWVzdGlvbiBvYmplY3QgcGFzc2VkXCIpO1xyXG5cclxuICAgICAgICB2YXIgdmFsaWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyBhIHF1ZXN0aW9uIG9iamVjdCBtdXN0IGNvbnRhaW4gYWxsIHRoZXNlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgbmVjZXNzYXJ5UHJvcGVydGllcyA9IFsnY29uZmlnJywgJ2hpbnQnLCAnc29sdXRpb24nLCAnYW5zd2VyJywgJ3F1ZXN0aW9uJywgJ2dldEluZm8nLCAnaW5mbycsICdwb2ludHMnLCAnYW5zd2VyZWQnLCAnaGludHNBbGxvd2VkJywgJ2hpbnRzUmVtYWluaW5nJ107XHJcblxyXG4gICAgICAgIG5lY2Vzc2FyeVByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbihwcm9wZXJ0eSkge1xyXG4gICAgICAgICAgICBpZiAoIXF1ZXN0aW9uLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xyXG4gICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlF1ZXN0aW9uIG11c3QgaGF2ZSBwcm9wZXJ0eSAnXCIgKyBwcm9wZXJ0eSArIFwiJ1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgcXVlc3Rpb25zLnB1c2gocXVlc3Rpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBuZXh0IHF1ZXN0aW9uIG9mIHRoZSBxdWl6LlxyXG4gICAgICogSWYgdGhlIHF1aXogaGFzIGVuZGVkLCBpdCByZXR1cm5zIG5vdGhpbmcuXHJcbiAgICAgKi9cclxuICAgIHRoaXMubmV4dFF1ZXN0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRRdWVzdGlvbklkeCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjdXJyZW50UXVlc3Rpb25JZHggPSAwO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRRdWVzdGlvbklkeCsrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaGFzRW5kZWQoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc0FjdGl2ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHF1ZXN0aW9uc1tjdXJyZW50UXVlc3Rpb25JZHhdO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmN1cnJlbnRRdWVzdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHF1ZXN0aW9uc1tjdXJyZW50UXVlc3Rpb25JZHhdO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmdldFRvdGFsUG9pbnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5oYXNTdGFydGVkKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgdG90YWxQb2ludHMgPSAwO1xyXG5cclxuICAgICAgICBxdWVzdGlvbnMuZm9yRWFjaChmdW5jdGlvbihxdWVzdGlvbikge1xyXG4gICAgICAgICAgICB2YXIgcG9pbnRzID0gcXVlc3Rpb24ucG9pbnRzKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAocG9pbnRzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRzICs9IHBvaW50cztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdG90YWxQb2ludHM7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZ2V0Q3VycmVudFF1ZXN0aW9uTnVtYmVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRRdWVzdGlvbklkeCA9PT0gbnVsbClcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgIHJldHVybiBjdXJyZW50UXVlc3Rpb25JZHggKyAxO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmdldE51bWJlck9mUXVlc3Rpb25zID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHF1ZXN0aW9ucy5sZW5ndGg7XHJcbiAgICB9O1xyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLSBRVUVTVElPTiAtLS0tLS0tLS0tXHJcbnZhciBRdWVzdGlvbiA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgIC8vIFRleHQgb2YgdGhlIHF1ZXN0aW9uXHJcbiAgICB2YXIgdGV4dCA9IG51bGw7XHJcblxyXG4gICAgLy8gSW5mbyBvYmplY3QgZm9yIHRoZSBxdWVzdGlvblxyXG4gICAgdmFyIGluZm8gPSBudWxsO1xyXG5cclxuICAgIC8vIEFuc3dlciBvZiB0aGUgcXVlc3Rpb25cclxuICAgIHZhciBhbnN3ZXIgPSBudWxsO1xyXG5cclxuICAgIC8vIEhpbnRzIG9mIHRoZSBxdWVzdGlvblxyXG4gICAgdmFyIGhpbnRzID0gbnVsbDtcclxuICAgIHZhciBoaW50c1VzZWQgPSAwO1xyXG5cclxuICAgIC8vIExhbWJkYSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgdGhlIGFuc3dlciBzdGF0dXMgb2YgdGhlIHF1ZXN0aW9uXHJcbiAgICB2YXIgY2hlY2tBbnN3ZXIgPSBudWxsO1xyXG5cclxuICAgIC8vIFBvaW50cyBhd2FyZGVkIGZvciB0aGUgcXVlc3Rpb25cclxuICAgIHZhciBwb2ludHMgPSBudWxsO1xyXG5cclxuICAgIC8vIEZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIHF1ZXN0aW9uIGhhcyBhbHJlYWR5IGJlZW4gYW5zd2VyZWRcclxuICAgIHZhciBhbnN3ZXJlZCA9IGZhbHNlO1xyXG5cclxuICAgIHZhciBpbml0ID0gZnVuY3Rpb24ob3B0cykge1xyXG4gICAgICAgIHRleHQgPSBvcHRzLnRleHQ7XHJcbiAgICAgICAgaW5mbyA9IG9wdHMuaW5mbyB8fCB7fTtcclxuICAgICAgICBhbnN3ZXIgPSBvcHRzLmFuc3dlcjtcclxuICAgICAgICBjaGVja0Fuc3dlciA9IG9wdHMuY2hlY2tBbnN3ZXIgfHwgbnVsbDtcclxuXHJcbiAgICAgICAgaGludHMgPSBvcHRzLmhpbnRzIHx8IHtcclxuICAgICAgICAgICAgICAgIGFsbG93ZWQ6IGZhbHNlLCAgICAgLy8gaXMgYSBoaW50IGFsbG93ZWQ/XHJcbiAgICAgICAgICAgICAgICBtYXhpbXVtOiAwLCAgICAgICAgIC8vIG1heGltdW0gbnVtYmVyIG9mIGhpbnRzIGZvciB0aGlzIHF1ZXN0aW9uIChpcnJlbGV2YW50IGlmIGFsbG93ZWQgaXMgc2V0IHRvIGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgY29zdDogMCwgICAgICAgICAgICAvLyBudW1iZXIgb2YgcG9pbnRzIHN1YnRyYWN0ZWQgcGVyIHVzZWQgaGludCAoaXJyZWxldmFudCBpZiBhbGxvd2VkIGlzIHNldCB0byBmYWxzZSlcclxuICAgICAgICAgICAgICAgIGdpdmU6IG51bGwgICAgICAgICAgLy8gbGFtYmRhIGZ1bmN0aW9uIHRvIGdpdmUgYSBoaW50IGZvciBhIHF1ZXN0aW9uXHJcbiAgICAgICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIGlmIChvcHRpb25zKSB7XHJcbiAgICAgICAgaW5pdChvcHRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNvbmZpZyA9IGZ1bmN0aW9uKG9wdHMpIHtcclxuICAgICAgICBpbml0KG9wdHMpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIHF1ZXN0aW9uIHRleHQuXHJcbiAgICAgKi9cclxuICAgIHRoaXMucXVlc3Rpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGV4dDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBxdWVzdGlvbiBpbmZvIG9iamVjdC5cclxuICAgICAqIEFjdHMgYXMgZ2V0dGVyICh3aXRoIG9ubHkgb25lIGFyZ3VtZW50KSBhbmQgc2V0dGVyICh3aXRoIHR3byBhcmd1bWVudHMpXHJcbiAgICAgKi9cclxuICAgIHRoaXMuaW5mbyA9IGZ1bmN0aW9uKHByb3AsIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgLy8gc2V0dGVyXHJcbiAgICAgICAgICAgIGluZm9bcHJvcF0gPSB2YWx1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBnZXR0ZXJcclxuICAgICAgICAgICAgcmV0dXJuIGluZm9bcHJvcF07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGVudGlyZSBpbmZvIG9iamVjdC5cclxuICAgICAqL1xyXG4gICAgdGhpcy5nZXRJbmZvID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIGluZm87XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgY29ycmVjdCBhbnN3ZXIgdG8gdGhlIHF1ZXN0aW9uIGFmdGVyIHRoZSBxdWVzdGlvbiBoYXMgYmVlbiBhbnN3ZXJlZC5cclxuICAgICAqIElmIHRoZSBxdWVzdGlvbiBoYXMgbm90IGJlZW4gYW5zd2VyZWQgeWV0LCBpdCByZXR1cm5zIG51bGwuXHJcbiAgICAgKi9cclxuICAgIHRoaXMuc29sdXRpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoYW5zd2VyZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFuc3dlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBoaW50IGZvciB0aGUgcXVlc3Rpb24uXHJcbiAgICAgKiBJZiBubyBoaW50cyBhcmUgYWxsb3dlZCwgb3IgdGhlIG1heGltdW0gbnVtYmVyIG9mIGhpbnRzIGhhdmUgYmVlbiB1c2VkLCBudWxsIGlzIHJldHVybmVkLlxyXG4gICAgICovXHJcbiAgICB0aGlzLmhpbnQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIWhpbnRzLmFsbG93ZWQgfHwgaGludHNVc2VkID49IGhpbnRzLm1heGltdW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaGludHMuYWxsb3dlZCAmJiAhaGludHMuZ2l2ZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJIaW50cyBhbGxvd2VkIGJ1dCBubyBnaXZlIG1ldGhvZCBwYXNzZWRcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBoaW50c1VzZWQrKztcclxuXHJcbiAgICAgICAgcmV0dXJuIGhpbnRzLmdpdmUoaGludHNVc2VkLCBhbnN3ZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN1Ym1pdHMgYW4gYW5zd2VyIHRvIHRoZSBxdWVzdGlvbi5cclxuICAgICAqIElmIHRoZSBxdWVzdGlvbiBoYXMgYWxyZWFkeSBiZWVuIGFuc3dlcmVkIG9yIG5vIGNoZWNrQW5zd2VyIGxhbWJkYSBoYXMgYmVlbiBzZXQsIHRoaXMgbWV0aG9kIGRvZXMgbm90aGluZy5cclxuICAgICAqL1xyXG4gICAgdGhpcy5hbnN3ZXIgPSBmdW5jdGlvbihzdWJtaXR0ZWRBbnN3ZXIpIHtcclxuICAgICAgICBpZiAoYW5zd2VyZWQgfHwhY2hlY2tBbnN3ZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYW5zd2VyZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyBjaGVja0Fuc3dlciBtZXRob2Qgc2hvdWxkIHJldHVybiB0aGUgc3RhdHVzIHJlc3VsdHNcclxuICAgICAgICBwb2ludHMgPSBjaGVja0Fuc3dlcihhbnN3ZXIsIHN1Ym1pdHRlZEFuc3dlciwgaW5mbyk7XHJcblxyXG4gICAgICAgIC8vIGlmIGhpbnRzIGFyZSBhbGxvd2VkIGFuZCBoYXZlIGJlZW4gdXNlZCwgc3VidHJhY3QgdGhlIHBvaW50c1xyXG4gICAgICAgIGlmIChoaW50cy5hbGxvd2VkICYmIGhpbnRzVXNlZCA+IDApIHtcclxuICAgICAgICAgICAgcG9pbnRzIC09IChoaW50c1VzZWQgKiBoaW50cy5jb3N0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGVuc3VyZSB0aGF0IG5vIG5lZ2F0aXZlIHBvaW50cyBhcmUgYXdhcmRlZFxyXG4gICAgICAgIHJldHVybiBNYXRoLm1heCgwLCBwb2ludHMpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnBvaW50cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghYW5zd2VyZWQgfHwgcG9pbnRzID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwb2ludHM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBzdGF0ZSBvZiB0aGUgcXVlc3Rpb24uXHJcbiAgICAgKi9cclxuICAgIHRoaXMuYW5zd2VyZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gYW5zd2VyZWQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0cnVlIGlmIGhpbnRzIGFyZSBhbGxvd2VkIGZvciB0aGlzIHF1ZXN0aW9uLCBmYWxzZSBpZiBub3QuXHJcbiAgICAgKiBJZiBoaW50cyBoYXZlIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldCwgbnVsbCBpcyByZXR1cm5lZC5cclxuICAgICAqL1xyXG4gICAgdGhpcy5oaW50c0FsbG93ZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoaGludHMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGhpbnRzLmFsbG93ZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgcmVtYWluaW5nIGhpbnRzLlxyXG4gICAgICogSWYgbm8gaGludHMgYXJlIGFsbG93ZWQgZm9yIHRoaXMgcXVlc3Rpb24sIG51bGwgaXMgcmV0dXJuZWQuXHJcbiAgICAgKi9cclxuICAgIHRoaXMuaGludHNSZW1haW5pbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgYWxsb3dlZCA9IHRoaXMuaGludHNBbGxvd2VkKCk7XHJcblxyXG4gICAgICAgIGlmIChhbGxvd2VkID09PSBudWxsIHx8IGFsbG93ZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGhpbnRzLm1heGltdW0gLSBoaW50c1VzZWQ7XHJcbiAgICB9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSByYW5kb20gaW50ZWdlciBiZXR3ZWVuIG1pbiAoaW5jbHVzaXZlKSBhbmQgbWF4IChpbmNsdXNpdmUpXHJcbiAqIFVzaW5nIE1hdGgucm91bmQoKSB3aWxsIGdpdmUgeW91IGEgbm9uLXVuaWZvcm0gZGlzdHJpYnV0aW9uIVxyXG4gKi9cclxudmFyIGdldFJhbmRvbUludCA9IGZ1bmN0aW9uKG1pbiwgbWF4KSB7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSB0ZXh0IGJldHdlZW4gdHdvIGRlbGltaXRpbmcgdGV4dCBvY2N1cnJlbmNlc1xyXG4gKi9cclxudmFyIGdldFN0cmluZ0JldHdlZW4gPSBmdW5jdGlvbih0ZXh0LCBmaXJzdFN0cmluZywgc2Vjb25kU3RyaW5nKSB7XHJcbiAgICB2YXIgZmlyc3RQb3MgPSB0ZXh0LmluZGV4T2YoZmlyc3RTdHJpbmcpO1xyXG4gICAgdmFyIHNlY29uZFBvcyA9IHRleHQuaW5kZXhPZihzZWNvbmRTdHJpbmcpO1xyXG5cclxuICAgIGlmIChmaXJzdFBvcyA+PSAwICYmIHNlY29uZFBvcyA+PSAwICYmIHNlY29uZFBvcyA+IGZpcnN0UG9zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRleHQuc3Vic3RyKGZpcnN0UG9zICsgMSwgc2Vjb25kUG9zIC0gZmlyc3RQb3MgLSAxKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuXHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xyXG4gICAgbW9kdWxlLmV4cG9ydHMuUXVlc3Rpb24gPSBRdWVzdGlvbjtcclxuICAgIG1vZHVsZS5leHBvcnRzLlF1aXogPSBRdWl6O1xyXG59IiwiYW5ndWxhci5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5jb25maWcoZnVuY3Rpb24oJGxvY2F0aW9uUHJvdmlkZXIsICRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcclxuICAgICAgICAvLyBlbmFibGUgSFRNTDUgcHVzaHN0YXRlXHJcbiAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xyXG5cclxuICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvaG9tZScpO1xyXG5cclxuICAgICAgICAkc3RhdGVQcm92aWRlclxyXG4gICAgICAgICAgICAuc3RhdGUoJ2hvbWUnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvaG9tZScsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9idWlsZC92aWV3cy9wYXJ0aWFscy9ob21lLnBhcnRpYWwuaHRtbCdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdxdWl6Jywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL3F1aXonLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYnVpbGQvdmlld3MvcGFydGlhbHMvcXVpei5wYXJ0aWFsLmh0bWwnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnY291bnRyaWVzJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2NvdW50cmllcycsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9idWlsZC92aWV3cy9wYXJ0aWFscy9jb3VudHJpZXMucGFydGlhbC5odG1sJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvdW50cmllcy5kZXRhaWwnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvOmFscGhhM0NvZGUnLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYnVpbGQvdmlld3MvcGFydGlhbHMvY291bnRyaWVzLWRldGFpbC5wYXJ0aWFsLmh0bWwnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnbG9naW4nLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvbG9naW4nLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYnVpbGQvdmlld3MvcGFydGlhbHMvbG9naW4ucGFydGlhbC5odG1sJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2xvZ291dCcsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9sb2dvdXQnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0xvZ291dEN0cmwnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgncmVnaXN0ZXInLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvcmVnaXN0ZXInLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYnVpbGQvdmlld3MvcGFydGlhbHMvcmVnaXN0ZXIucGFydGlhbC5odG1sJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ3NldHRpbmdzJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL3NldHRpbmdzJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2J1aWxkL3ZpZXdzL3BhcnRpYWxzL3NldHRpbmdzLnBhcnRpYWwuaHRtbCdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdhYm91dCcsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9hYm91dCcsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9idWlsZC92aWV3cy9wYXJ0aWFscy9hYm91dC5wYXJ0aWFsLmh0bWwnXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0NvdW50cmllc0N0cmwnLCBmdW5jdGlvbigkc2NvcGUsIENvdW50cnlTcnYpIHtcclxuICAgICAgICB2YXIgY291bnRyaWVzQnlMZXR0ZXIgPSBudWxsO1xyXG4gICAgICAgIHZhciBjb3VudHJ5S2V5cyA9IG51bGw7XHJcblxyXG4gICAgICAgIHZhciBpbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGNvdW50cmllc0J5TGV0dGVyID0gQ291bnRyeVNydi5nZXRDb3VudHJpZXNCeUxldHRlcigpO1xyXG4gICAgICAgICAgICBjb3VudHJ5S2V5cyA9IE9iamVjdC5rZXlzKGNvdW50cmllc0J5TGV0dGVyKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghJHNjb3BlLiQkcGhhc2UpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvdW50cnlLZXlzID0gY291bnRyeUtleXM7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvdW50cmllc0J5TGV0dGVyID0gY291bnRyaWVzQnlMZXR0ZXI7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jb3VudHJ5S2V5cyA9IGNvdW50cnlLZXlzO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvdW50cmllc0J5TGV0dGVyID0gY291bnRyaWVzQnlMZXR0ZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAoQ291bnRyeVNydi5hcmVDb3VudHJpZXNMb2FkZWQoKSkge1xyXG4gICAgICAgICAgICBpbml0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkc2NvcGUuJG9uKCdjb3VudHJpZXMubG9hZGVkJywgZnVuY3Rpb24oKSAge1xyXG4gICAgICAgICAgICBpbml0KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuY29udHJvbGxlcignQ291bnRyeURldGFpbEN0cmwnLCBmdW5jdGlvbigkc2NvcGUsIENvdW50cnlTcnYsICRzdGF0ZVBhcmFtcykge1xyXG4gICAgICAgIHZhciBhbHBoYTNDb2RlID0gJHN0YXRlUGFyYW1zLmFscGhhM0NvZGU7XHJcblxyXG4gICAgICAgIGlmIChDb3VudHJ5U3J2LmFyZUNvdW50cmllc0xvYWRlZCgpKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5jb3VudHJ5ID0gQ291bnRyeVNydi5nZXRDb3VudHJ5QnlBbHBoYTMoYWxwaGEzQ29kZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkc2NvcGUuJG9uKCdjb3VudHJpZXMubG9hZGVkJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY291bnRyeSA9IENvdW50cnlTcnYuZ2V0Q291bnRyeUJ5QWxwaGEzKGFscGhhM0NvZGUpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgZ2V0Q291bnRyeUZyb21TZXJ2aWNlID0gZnVuY3Rpb24oYWxwaGEzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBDb3VudHJ5U3J2LmdldENvdW50cnlCeUFscGhhMyhhbHBoYTMpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5nZXRDb3VudHJ5RnJvbVNlcnZpY2UgPSBnZXRDb3VudHJ5RnJvbVNlcnZpY2U7XHJcbiAgICB9KTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuY29udHJvbGxlcignRHJvcGRvd25DdHJsJywgZnVuY3Rpb24oJHNjb3BlKSB7XHJcbiAgICAgICAgdmFyIHZpc2libGUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgJHNjb3BlLnRvZ2dsZURyb3Bkb3duID0gdG9nZ2xlRHJvcGRvd247XHJcbiAgICAgICAgJHNjb3BlLnNob3dEcm9wZG93biA9IHNob3dEcm9wZG93bjtcclxuICAgICAgICAkc2NvcGUuaGlkZURyb3Bkb3duID0gaGlkZURyb3Bkb3duO1xyXG4gICAgICAgICRzY29wZS5pc0Ryb3Bkb3duVmlzaWJsZSA9IGlzRHJvcGRvd25WaXNpYmxlO1xyXG5cclxuICAgICAgICAkc2NvcGUuaGFuZGxlQ2xpY2tPdXRzaWRlID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDTElDS0VEIE9VVFNJREVcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB0b2dnbGVEcm9wZG93bigpIHtcclxuICAgICAgICAgICAgdmlzaWJsZSA9ICF2aXNpYmxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2hvd0Ryb3Bkb3duKCkge1xyXG4gICAgICAgICAgICB2aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGhpZGVEcm9wZG93bigpIHtcclxuICAgICAgICAgICAgdmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaXNEcm9wZG93blZpc2libGUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2aXNpYmxlO1xyXG4gICAgICAgIH1cclxuICAgIH0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUsIFVzZXJTcnYsIEZvY3VzU3J2KSB7XHJcbiAgICAgICAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKSB7XHJcbiAgICAgICAgICAgIFVzZXJTcnYubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbmZvcm0gYXBwbGljYXRpb24gY29udHJvbCBhYm91dCBsb2dpbiBldmVudFxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnYXBwLmxvZ2luJywgcmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogbm90aWZ5IHVzZXIgYWJvdXQgZXJyb3IgaW4gbG9naW4gcHJvY2Vzc1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gZm9jdXMgdXNlcm5hbWUgZmllbGRcclxuICAgICAgICBGb2N1c1NydigndXNlcm5hbWUnKTtcclxuICAgIH0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5jb250cm9sbGVyKCdMb2dvdXRDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBVc2VyU3J2KSB7XHJcbiAgICAgICAgVXNlclNydi5sb2dvdXQoKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIC8vIGluZm9ybSBhcHBsaWNhdGlvbiBjb250cm9sIGFib3V0IGxvZ291dCBldmVudFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdhcHAubG9nb3V0Jyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmNvbnRyb2xsZXIoJ1F1aXpDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBRdWl6U3J2LCBMb2dTcnYsIEZvY3VzU3J2LCBuZ1Byb2dyZXNzRmFjdG9yeSkge1xyXG5cclxuICAgICAgICAvLyBQcm9ncmVzcyBiYXIgaW5pdGlhbGl6YXRpb25cclxuICAgICAgICAkc2NvcGUucHJvZ3Jlc3NiYXIgPSBuZ1Byb2dyZXNzRmFjdG9yeS5jcmVhdGVJbnN0YW5jZSgpO1xyXG4gICAgICAgICRzY29wZS5wcm9ncmVzc2Jhci5zZXRQYXJlbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3F1aXotcHJvZ3Jlc3MnKSk7XHJcbiAgICAgICAgJHNjb3BlLnByb2dyZXNzYmFyLnNldEFic29sdXRlKCk7XHJcbiAgICAgICAgJHNjb3BlLnByb2dyZXNzYmFyLnNldENvbG9yKFwiIzMzNmU3YlwiKTtcclxuXHJcbiAgICAgICAgdmFyIHF1ZXN0aW9uID0gbnVsbDtcclxuXHJcbiAgICAgICAgdmFyIHN0YXJ0UXVpeiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBRdWl6U3J2LmluaXQoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nU3J2LmluZm8oXCJRdWl6IHN0YXJ0ZWRcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVF1ZXN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZ1Nydi5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHVwZGF0ZVF1ZXN0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHF1ZXN0aW9uID0gUXVpelNydi5nZXRDdXJyZW50UXVlc3Rpb24oKTtcclxuXHJcbiAgICAgICAgICAgIEZvY3VzU3J2KCdhbnN3ZXInKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgcmVuZGVyUXVlc3Rpb24gPSBmdW5jdGlvbih0ZXh0LCBjbGFzc05hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRleHRcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKFwiW1wiLCBcIjxzcGFuIGNsYXNzPSdcIiArIGNsYXNzTmFtZSArIFwiJz5cIilcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKFwiXVwiLCBcIjwvc3Bhbj5cIik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHN1Ym1pdEFuc3dlciA9IGZ1bmN0aW9uKHN1Ym1pdHRlZEFuc3dlcikge1xyXG4gICAgICAgICAgICBpZiAoc3VibWl0dGVkQW5zd2VyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhxdWVzdGlvbi5hbnN3ZXIoc3VibWl0dGVkQW5zd2VyKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gc2V0IHByb2dyZXNzIGJhclxyXG4gICAgICAgICAgICAgICAgLy8kc2NvcGUucHJvZ3Jlc3NiYXIuc2V0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gc2V0IGZvY3VzIHRvIG5leHQgcXVlc3Rpb24gYnV0dG9uXHJcbiAgICAgICAgICAgICAgICBGb2N1c1NydignYnRuTmV4dFF1ZXN0aW9uJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgaGFuZGxlS2V5UHJlc3MgPSBmdW5jdGlvbihrZXlFdmVudCkge1xyXG4gICAgICAgICAgICBpZiAoa2V5RXZlbnQud2hpY2ggPT0gMTMpIHtcclxuICAgICAgICAgICAgICAgIHN1Ym1pdEFuc3dlcigkc2NvcGUuYW5zd2VyT2JqLmFuc3dlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgaXNRdWl6UnVubmluZyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUXVpelNydi5pc1F1aXpSdW5uaW5nKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldEN1cnJlbnRRdWVzdGlvbk51bWJlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUXVpelNydi5nZXRDdXJyZW50UXVlc3Rpb25OdW1iZXIoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0TnVtYmVyT2ZRdWl6UXVlc3Rpb25zID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBRdWl6U3J2LmdldE51bWJlck9mUXVpelF1ZXN0aW9ucygpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBxdWVzdGlvbkFuc3dlcmVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICghaXNRdWl6UnVubmluZygpIHx8IHF1ZXN0aW9uID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBxdWVzdGlvbi5hbnN3ZXJlZCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRRdWVzdGlvblRleHQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHF1ZXN0aW9uID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlclF1ZXN0aW9uKHF1ZXN0aW9uLnF1ZXN0aW9uKCksICdxdWVzdGlvbi1oaWdobGlnaHQnKSArIFwiP1wiO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRBbnN3ZXJUZXh0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChxdWVzdGlvbiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBxdWVzdGlvbi5zb2x1dGlvbigpLmNvcnJlY3Q7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIG5leHRRdWVzdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBRdWl6U3J2Lm5leHRRdWVzdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmFuc3dlck9iai5hbnN3ZXIgPSBcIlwiO1xyXG5cclxuICAgICAgICAgICAgdXBkYXRlUXVlc3Rpb24oKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUuc3RhcnRRdWl6ID0gc3RhcnRRdWl6O1xyXG4gICAgICAgICRzY29wZS5pc1F1aXpSdW5uaW5nID0gaXNRdWl6UnVubmluZztcclxuICAgICAgICAkc2NvcGUuZ2V0Q3VycmVudFF1ZXN0aW9uTnVtYmVyID0gZ2V0Q3VycmVudFF1ZXN0aW9uTnVtYmVyO1xyXG4gICAgICAgICRzY29wZS5nZXROdW1iZXJPZlF1aXpRdWVzdGlvbnMgPSBnZXROdW1iZXJPZlF1aXpRdWVzdGlvbnM7XHJcbiAgICAgICAgJHNjb3BlLmdldFF1ZXN0aW9uVGV4dCA9IGdldFF1ZXN0aW9uVGV4dDtcclxuICAgICAgICAkc2NvcGUuZ2V0QW5zd2VyVGV4dCA9IGdldEFuc3dlclRleHQ7XHJcbiAgICAgICAgJHNjb3BlLmhhbmRsZUtleVByZXNzID0gaGFuZGxlS2V5UHJlc3M7XHJcbiAgICAgICAgJHNjb3BlLnN1Ym1pdEFuc3dlciA9IHN1Ym1pdEFuc3dlcjtcclxuICAgICAgICAkc2NvcGUucXVlc3Rpb25BbnN3ZXJlZCA9IHF1ZXN0aW9uQW5zd2VyZWQ7XHJcbiAgICAgICAgJHNjb3BlLm5leHRRdWVzdGlvbiA9IG5leHRRdWVzdGlvbjtcclxuXHJcbiAgICAgICAgJHNjb3BlLmFuc3dlck9iaiA9IHtcclxuICAgICAgICAgICAgYW5zd2VyOiBcIlwiXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gaW5pdGlhbGx5IHRyeSB0byB1cGRhdGUgcXVlc3Rpb25cclxuICAgICAgICB1cGRhdGVRdWVzdGlvbigpO1xyXG4gICAgfSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmZpbHRlcigncmVuZGVySHRtbCcsIGZ1bmN0aW9uKCRzY2UpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24odGV4dCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJHNjZS50cnVzdEFzSHRtbCh0ZXh0KTtcclxuICAgICAgICB9O1xyXG4gICAgfSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmZhY3RvcnkoJ0F1dGhJbnRlcmNlcHRvcicsIGZ1bmN0aW9uKEF1dGhUb2tlblNydikge1xyXG4gICAgICAgIHZhciBhZGRUb2tlbiA9IGZ1bmN0aW9uKGNvbmZpZykge1xyXG4gICAgICAgICAgICB2YXIgdG9rZW4gPSBBdXRoVG9rZW5TcnYuZ2V0VG9rZW4oKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0b2tlbikge1xyXG4gICAgICAgICAgICAgICAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcclxuICAgICAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzWydYLUF1dGgnXSA9IHRva2VuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY29uZmlnO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlcXVlc3Q6IGFkZFRva2VuXHJcbiAgICAgICAgfTtcclxuICAgIH0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5mYWN0b3J5KCdBdXRoVG9rZW5TcnYnLCBmdW5jdGlvbigkd2luZG93KSB7XHJcbiAgICAgICAgdmFyIHN0b3JlID0gJHdpbmRvdy5zZXNzaW9uU3RvcmFnZTtcclxuICAgICAgICB2YXIga2V5ID0gJ2F1dGgtdG9rZW4nO1xyXG5cclxuICAgICAgICB2YXIgZ2V0VG9rZW4gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0b3JlLmdldEl0ZW0oa2V5KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgc2V0VG9rZW4gPSBmdW5jdGlvbih0b2tlbikge1xyXG4gICAgICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgICAgIHN0b3JlLnNldEl0ZW0oa2V5LCB0b2tlbik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdG9yZS5yZW1vdmVJdGVtKGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBnZXRUb2tlbjogZ2V0VG9rZW4sXHJcbiAgICAgICAgICAgIHNldFRva2VuOiBzZXRUb2tlblxyXG4gICAgICAgIH07XHJcbiAgICB9KTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtYWdlbGxhbicpXHJcbiAgICAuZmFjdG9yeSgnQ291bnRyeVNydicsIGZ1bmN0aW9uKCRodHRwLCBJbmRleGVkREJTcnYsIExvZ1Nydikge1xyXG4gICAgICAgIC8vIENvdW50cmllcyBhcnJheVxyXG4gICAgICAgIHZhciBjb3VudHJpZXMgPSBudWxsO1xyXG5cclxuICAgICAgICB2YXIgY291bnRyaWVzQnlBbHBoYTMgPSBudWxsO1xyXG4gICAgICAgIHZhciBjb3VudHJpZXNCeUxldHRlciA9IG51bGw7XHJcblxyXG4gICAgICAgIC8vIEluZGV4ZWREQlxyXG4gICAgICAgIHZhciBkYXRhYmFzZSA9ICdtYWdlbGxhbic7XHJcbiAgICAgICAgdmFyIHN0b3JlID0gJ2NvdW50cnlTdG9yZSc7XHJcbiAgICAgICAgdmFyIGtleUNvdW50cmllcyA9ICdjb3VudHJpZXMnO1xyXG4gICAgICAgIHZhciBrZXlWZXJzaW9uID0gJ3ZlcnNpb24nO1xyXG5cclxuICAgICAgICB2YXIgaW5kZXhlZERCQXZhaWxhYmxlID0gSW5kZXhlZERCU3J2LmluZGV4ZWREQkF2YWlsYWJsZSgpO1xyXG5cclxuICAgICAgICB2YXIgaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbG9hZENvdW50cmllcygpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBsb2FkQ291bnRyaWVzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIGluZGV4ZWREQiBpcyBhdmFpbGFibGVcclxuICAgICAgICAgICAgaWYgKGluZGV4ZWREQkF2YWlsYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBkYXRhYmFzZSBleGlzdHNcclxuICAgICAgICAgICAgICAgICAgICBJbmRleGVkREJTcnYuY3JlYXRlRGF0YWJhc2UoZGF0YWJhc2UsIHN0b3JlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihnZXRFbXB0eU9iamVjdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZ2V0SW50ZXJuYWxWZXJzaW9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihnZXRFeHRlcm5hbFZlcnNpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGRldGVybWluZUxvYWRTdHJhdGVneSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4obG9hZERhdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyaWVzID0gb2JqWydjb3VudHJpZXMnXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dTcnYuaW5mbyhcImxvYWRlZCBjb3VudHJpZXMgZnJvbVwiLCBvYmpbJ2xvYWRTdHJhdGVneSddLnRvVXBwZXJDYXNlKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZGl0aW9uYWxseSBtYXAgY291bnRyaWVzIGJ5IHZhcmlvdXMgcHJvcGVydGllc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyaWVzQnlBbHBoYTMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cmllc0J5TGV0dGVyID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyaWVzLmZvckVhY2goZnVuY3Rpb24oYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ5IGFscGhhMyBjb2RlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyaWVzQnlBbHBoYTNbY1snYWxwaGEzQ29kZSddXSA9IGM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ5IGxldHRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdExldHRlciA9IGNbJ25hbWUnXS5zdWJzdHIoMCwgMSkudG9VcHBlckNhc2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChmaXJzdExldHRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICfDhCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdExldHRlciA9ICdBJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnw5YnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RMZXR0ZXIgPSAnTyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ8OcJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0TGV0dGVyID0gJ1UnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50cmllc0J5TGV0dGVyW2ZpcnN0TGV0dGVyXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cmllc0J5TGV0dGVyW2ZpcnN0TGV0dGVyXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyaWVzQnlMZXR0ZXJbZmlyc3RMZXR0ZXJdLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHBoYTNDb2RlOiBjLmFscGhhM0NvZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGMubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShjb3VudHJpZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dTcnYuZXJyb3IoXCJmYWlsZWQgdG8gbG9hZCBjb3VudHJpZXNcIiwgZXJyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIG5vdCwgd2UgYWx3YXlzIHRyeSB0byBkb3dubG9hZCBpdCBmcm9tIHRoZSBjb3VudHJ5IEFQSSBlbmRwb2ludFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldENvdW50cmllc0Zyb21BUEkoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBkZXRlcm1pbmVMb2FkU3RyYXRlZ3kgPSBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0cmF0ZWd5O1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBpbnRlcm5hbFZlcnNpb24gPSBvYmpbXCJpbnRlcm5hbFZlcnNpb25cIl07XHJcbiAgICAgICAgICAgICAgICB2YXIgZXh0ZXJuYWxWZXJzaW9uID0gb2JqW1wiZXh0ZXJuYWxWZXJzaW9uXCJdO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpbnRlcm5hbFZlcnNpb24gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJhdGVneSA9ICdhcGknO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChleHRlcm5hbFZlcnNpb24gPiBpbnRlcm5hbFZlcnNpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJhdGVneSA9ICdhcGknO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJhdGVneSA9ICdkYic7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgb2JqWydsb2FkU3RyYXRlZ3knXSA9IHN0cmF0ZWd5O1xyXG5cclxuICAgICAgICAgICAgICAgIHJlc29sdmUob2JqKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGxvYWREYXRhID0gZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdHJhdGVneSA9IG9ialsnbG9hZFN0cmF0ZWd5J107XHJcblxyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChzdHJhdGVneSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FwaSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldENvdW50cmllc0Zyb21BUEkoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oY291bnRyaWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqW1wiY291bnRyaWVzXCJdID0gY291bnRyaWVzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdG9yZSBjb3VudHJpZXMgYW5kIHZlcnNpb24gbnVtYmVyIGluIGRhdGFiYXNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5kZXhlZERCU3J2LnB1dEl0ZW0oZGF0YWJhc2UsIHN0b3JlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleUNvdW50cmllcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICBjb3VudHJpZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5kZXhlZERCU3J2LnB1dEl0ZW0oZGF0YWJhc2UsIHN0b3JlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleVZlcnNpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBvYmpbXCJleHRlcm5hbFZlcnNpb25cIl1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RiJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Q291bnRyaWVzRnJvbURCKG9iailcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKF9vYmopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKF9vYmopO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgnVW5rbm93biBsb2FkIHN0cmF0ZWd5Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRFbXB0eU9iamVjdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHt9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldEludGVybmFsVmVyc2lvbiA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBJbmRleGVkREJTcnYucmV0cmlldmVJdGVtKGRhdGFiYXNlLCBzdG9yZSwga2V5VmVyc2lvbilcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ialtcImludGVybmFsVmVyc2lvblwiXSA9IGl0ZW0udmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ialtcImludGVybmFsVmVyc2lvblwiXSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRFeHRlcm5hbFZlcnNpb24gPSBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldFZlcnNpb25Gcm9tQVBJKClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHZlcnNpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmpbXCJleHRlcm5hbFZlcnNpb25cIl0gPSB2ZXJzaW9uO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldENvdW50cmllc0Zyb21EQiA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBJbmRleGVkREJTcnYucmV0cmlldmVJdGVtKGRhdGFiYXNlLCBzdG9yZSwga2V5Q291bnRyaWVzKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqW1wiY291bnRyaWVzXCJdID0gaXRlbS52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUob2JqKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0Q291bnRyaWVzRnJvbUFQSSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJy9hcGkvY291bnRyaWVzJylcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldFZlcnNpb25Gcm9tQVBJID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICRodHRwLmdldCgnL2FwaS9jb3VudHJpZXMvdmVyc2lvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZS5kYXRhLnZlcnNpb24gfHwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRDb3VudHJ5QnlBbHBoYTMgPSBmdW5jdGlvbihhbHBoYTMpIHtcclxuICAgICAgICAgICAgaWYgKGNvdW50cmllc0J5QWxwaGEzID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNvdW50cmllc0J5QWxwaGEzW2FscGhhM107XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldENvdW50cmllc0J5TGV0dGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChjb3VudHJpZXNCeUxldHRlciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjb3VudHJpZXNCeUxldHRlcjtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgYXJlQ291bnRyaWVzTG9hZGVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb3VudHJpZXMgIT09IG51bGwgJiYgY291bnRyaWVzLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaW5pdDogaW5pdCxcclxuICAgICAgICAgICAgZ2V0Q291bnRyeUJ5QWxwaGEzOiBnZXRDb3VudHJ5QnlBbHBoYTMsXHJcbiAgICAgICAgICAgIGdldENvdW50cmllc0J5TGV0dGVyOiBnZXRDb3VudHJpZXNCeUxldHRlcixcclxuICAgICAgICAgICAgYXJlQ291bnRyaWVzTG9hZGVkOiBhcmVDb3VudHJpZXNMb2FkZWRcclxuICAgICAgICB9O1xyXG4gICAgfSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmZhY3RvcnkoJ0ZvY3VzU3J2JywgZnVuY3Rpb24oJHRpbWVvdXQsICR3aW5kb3cpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgLy8gdGltZW91dCBtYWtlcyBzdXJlIHRoYXQgaXMgaW52b2tlZCBhZnRlciBhbnkgb3RoZXIgZXZlbnQgaGFzIGJlZW4gdHJpZ2dlcmVkLlxyXG4gICAgICAgICAgICAvLyBlLmcuIGNsaWNrIGV2ZW50cyB0aGF0IG5lZWQgdG8gcnVuIGJlZm9yZSB0aGUgZm9jdXMgb3JcclxuICAgICAgICAgICAgLy8gaW5wdXRzIGVsZW1lbnRzIHRoYXQgYXJlIGluIGEgZGlzYWJsZWQgc3RhdGUgYnV0IGFyZSBlbmFibGVkIHdoZW4gdGhvc2UgZXZlbnRzXHJcbiAgICAgICAgICAgIC8vIGFyZSB0cmlnZ2VyZWQuXHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSAkd2luZG93LmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH0pOyIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21hZ2VsbGFuJylcclxuICAgIC5mYWN0b3J5KCdJbmRleGVkREJTcnYnLCBmdW5jdGlvbigkd2luZG93KSB7XHJcbiAgICAgICAgdmFyIGtleVBhdGggPSAnbmFtZSc7XHJcblxyXG4gICAgICAgIHZhciBpbmRleGVkREIgPSAkd2luZG93LmluZGV4ZWREQiB8fCAkd2luZG93LndlYmtpdEluZGV4ZWREQiB8fCAkd2luZG93Lm1zSW5kZXhlZERCO1xyXG4gICAgICAgIHZhciBJREJLZXlSYW5nZSA9ICR3aW5kb3cuSURCS2V5UmFuZ2UgfHwgJHdpbmRvdy53ZWJraXRJREJLZXlSYW5nZTtcclxuXHJcbiAgICAgICAgdmFyIElEQlRyYW5zYWN0aW9uID0gJHdpbmRvdy5JREJUcmFuc2FjdGlvbiB8fCAkd2luZG93LndlYmtpdElEQlRyYW5zYWN0aW9uO1xyXG5cclxuICAgICAgICBpZiAoSURCVHJhbnNhY3Rpb24pIHtcclxuICAgICAgICAgICAgSURCVHJhbnNhY3Rpb24uUkVBRF9XUklURSA9IElEQlRyYW5zYWN0aW9uLlJFQURfV1JJVEUgfHwgJ3JlYWR3cml0ZSc7XHJcbiAgICAgICAgICAgIElEQlRyYW5zYWN0aW9uLlJFQURfT05MWSA9IElEQlRyYW5zYWN0aW9uLlJFQURfT05MWSB8fCAncmVhZG9ubHknO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGluZGV4ZWREQkF2YWlsYWJsZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5kZXhlZERCID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjcmVhdGVEYXRhYmFzZSA9IGZ1bmN0aW9uKGRiTmFtZSwgc3RvcmVOYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4oZGJOYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBlIGlzIGFuIGluc3RhbmNlIG9mIElEQlZlcnNpb25DaGFuZ2VFdmVudFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZGIgPSBlLnRhcmdldC5yZXN1bHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IGlkYi5jcmVhdGVPYmplY3RTdG9yZShzdG9yZU5hbWUsIHsga2V5UGF0aDoga2V5UGF0aCB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkLCB1cGRhdGUsIGRlbGV0ZVxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGUgZXJyb3JcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZHJvcERhdGFiYXNlID0gZnVuY3Rpb24oZGJOYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKGRiTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZHJvcCBzdWNjZXNzZnVsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShlKTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRyb3AgZmFpbGVkXHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGFkZEl0ZW0gPSBmdW5jdGlvbihkYk5hbWUsIHN0b3JlTmFtZSwgaXRlbSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKGRiTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlkYiA9IGUudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNhY3Rpb24gPSBpZGIudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCBJREJUcmFuc2FjdGlvbi5SRUFEX1dSSVRFKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShzdG9yZU5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBhZGRcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdEFkZCA9IHN0b3JlLmFkZChpdGVtKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEFkZC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEFkZC5vbmVycm9yID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBwdXRJdGVtID0gZnVuY3Rpb24oZGJOYW1lLCBzdG9yZU5hbWUsIGl0ZW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihkYk5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZGIgPSBlLnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zYWN0aW9uID0gaWRiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgSURCVHJhbnNhY3Rpb24uUkVBRF9XUklURSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoc3RvcmVOYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcXVlc3RBZGQgPSBzdG9yZS5wdXQoaXRlbSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBZGQub25zdWNjZXNzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBZGQub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgcmV0cmlldmVJdGVtID0gZnVuY3Rpb24oZGJOYW1lLCBzdG9yZU5hbWUsIGl0ZW1OYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKGRiTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlkYiA9IGUudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNhY3Rpb24gPSBpZGIudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCBJREJUcmFuc2FjdGlvbi5SRUFEX09OTFkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHN0b3JlTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IElEQktleVJhbmdlLm9ubHkoaXRlbU5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzdG9yZS5vcGVuQ3Vyc29yKHJhbmdlKS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJzb3IgPSBlLnRhcmdldC5yZXN1bHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3Vyc29yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gY3Vyc29yLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciByZXRyaWV2ZUl0ZW1zID0gZnVuY3Rpb24oZGJOYW1lLCBzdG9yZU5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihkYk5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZGIgPSBlLnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zYWN0aW9uID0gaWRiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgSURCVHJhbnNhY3Rpb24uUkVBRF9PTkxZKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShzdG9yZU5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzdG9yZS5vcGVuQ3Vyc29yKCkub25zdWNjZXNzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3Vyc29yID0gZS50YXJnZXQucmVzdWx0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnNvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChjdXJzb3IudmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShpdGVtcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjcmVhdGVEYXRhYmFzZTogY3JlYXRlRGF0YWJhc2UsXHJcbiAgICAgICAgICAgIGRyb3BEYXRhYmFzZTogZHJvcERhdGFiYXNlLFxyXG4gICAgICAgICAgICBhZGRJdGVtOiBhZGRJdGVtLFxyXG4gICAgICAgICAgICBwdXRJdGVtOiBwdXRJdGVtLFxyXG4gICAgICAgICAgICByZXRyaWV2ZUl0ZW06IHJldHJpZXZlSXRlbSxcclxuICAgICAgICAgICAgcmV0cmlldmVJdGVtczogcmV0cmlldmVJdGVtcyxcclxuICAgICAgICAgICAgaW5kZXhlZERCQXZhaWxhYmxlOiBpbmRleGVkREJBdmFpbGFibGVcclxuICAgICAgICB9O1xyXG4gICAgfSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmZhY3RvcnkoJ0xvZ1NydicsIGZ1bmN0aW9uKEFwcENvbmZpZykge1xyXG4gICAgICAgIHZhciBsb2dJbmZvID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChBcHBDb25maWdbXCJsb2cuaW5mb1wiXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBsb2dFcnJvciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoQXBwQ29uZmlnW1wibG9nLmVycm9yXCJdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpbmZvOiBsb2dJbmZvLFxyXG4gICAgICAgICAgICBlcnJvcjogbG9nRXJyb3JcclxuICAgICAgICB9O1xyXG4gICAgfSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmZhY3RvcnkoJ1F1aXpTcnYnLCBmdW5jdGlvbihBcHBDb25maWcsIENvdW50cnlTcnYsIExvZ1Nydikge1xyXG4gICAgICAgIHZhciBjb3VudHJpZXMgPSBudWxsO1xyXG4gICAgICAgIHZhciBjb3VudHJpZXNCeUFscGhhMyA9IG51bGw7XHJcblxyXG4gICAgICAgIHZhciBxdWl6ID0gbnVsbDtcclxuXHJcbiAgICAgICAgdmFyIHNldENvdW50cmllcyA9IGZ1bmN0aW9uKF9jb3VudHJpZXMpIHtcclxuICAgICAgICAgICAgY291bnRyaWVzID0gX2NvdW50cmllcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY291bnRyaWVzTG9hZGVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb3VudHJpZXMgIT09IG51bGwgJiYgY291bnRyaWVzLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjb3VudHJpZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJDb3VudHJpZXMgaGF2ZSBub3QgYmVlbiBsb2FkZWRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcXVpeiA9IGNyZWF0ZVF1aXooJ2NvdW50cnknKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHF1aXouc3RhcnQoKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBpc1F1aXpSdW5uaW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChxdWl6ID09PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHF1aXouaGFzU3RhcnRlZCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjcmVhdGVRdWl6ID0gZnVuY3Rpb24ocXVpelR5cGUpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChxdWl6VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY291bnRyeSc6XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVDb3VudHJ5UXVpeigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNyZWF0ZUNvdW50cnlRdWl6ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBjb3VudHJ5UXVpeiA9IG5ldyBRdWl6KCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZnVsbFBvaW50cyA9IDEwMDtcclxuICAgICAgICAgICAgdmFyIGhpbnRNYXhpbXVtID0gMztcclxuICAgICAgICAgICAgdmFyIGhpbnRDb3N0ID0gMjU7XHJcblxyXG4gICAgICAgICAgICB2YXIgbGFzdFF1ZXN0aW9uQm9udXMgPSAyLjU7XHJcblxyXG4gICAgICAgICAgICB2YXIgcXVlc3Rpb25UeXBlcyA9IEFwcENvbmZpZ1sncXVpei5jb3VudHJ5LnR5cGVzJ107XHJcbiAgICAgICAgICAgIHZhciBxdWVzdGlvblR5cGVzTGVuZ3RoID0gT2JqZWN0LmtleXMocXVlc3Rpb25UeXBlcykubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgLy8gc2VsZWN0IGNvdW50cmllcyBmb3IgcXVlc3Rpb25zXHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZENvdW50cmllcyA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgbnVtYmVyT2ZRdWVzdGlvbnMgPSBBcHBDb25maWdbJ3F1aXouY291bnRyeS5xdWVzdGlvbnMnXTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyT2ZRdWVzdGlvbnM7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvdW50cnlPayA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIHdoaWxlICghY291bnRyeU9rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvdW50cnkgPSBjb3VudHJpZXNbZ2V0UmFuZG9tSW50KDAsIGNvdW50cmllcy5sZW5ndGggLSAxKV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnlPayA9IHNlbGVjdGVkQ291bnRyaWVzLmluZGV4T2YoY291bnRyeVsnYWxwaGEzQ29kZSddKSA8IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRDb3VudHJpZXMucHVzaChjb3VudHJ5WydhbHBoYTNDb2RlJ10pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBjcmVhdGUgcXVlc3Rpb25zIGZvciBxdWl6XHJcbiAgICAgICAgICAgIHZhciBxY250ID0gMDtcclxuICAgICAgICAgICAgc2VsZWN0ZWRDb3VudHJpZXMuZm9yRWFjaChmdW5jdGlvbihhbHBoYTMpIHtcclxuICAgICAgICAgICAgICAgIHFjbnQrKztcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgY291bnRyeSA9IENvdW50cnlTcnYuZ2V0Q291bnRyeUJ5QWxwaGEzKGFscGhhMyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHF1ZXN0aW9uVHlwZSA9IHF1ZXN0aW9uVHlwZXNbZ2V0UmFuZG9tSW50KDEsIHF1ZXN0aW9uVHlwZXNMZW5ndGgpXTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IGdldFF1ZXN0aW9uVGV4dChxdWVzdGlvblR5cGUsIGNvdW50cnkpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZm8gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogcXVlc3Rpb25UeXBlXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdmFyIGFuc3dlciA9IGdldFF1ZXN0aW9uQW5zd2VyKHF1ZXN0aW9uVHlwZSwgY291bnRyeSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hlY2tBbnN3ZXIgPSBnZXRDaGVja0Fuc3dlckxhbWJkYShxdWVzdGlvblR5cGUsIGZ1bGxQb2ludHMsIGxhc3RRdWVzdGlvbkJvbnVzKTtcclxuICAgICAgICAgICAgICAgIHZhciBoaW50cyA9IGdldFF1ZXN0aW9uSGludHMocXVlc3Rpb25UeXBlLCBoaW50TWF4aW11bSwgaGludENvc3QpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHRoZSBsYXN0IHF1ZXN0aW9uIGlzIHRoZSBib251cyBxdWVzdGlvblxyXG4gICAgICAgICAgICAgICAgaWYgKHFjbnQgPj0gbnVtYmVyT2ZRdWVzdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmZvWydib251cyddID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb3VudHJ5UXVpei5hZGRRdWVzdGlvbihuZXcgUXVlc3Rpb24oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5mbzogaW5mbyxcclxuICAgICAgICAgICAgICAgICAgICBhbnN3ZXI6IGFuc3dlcixcclxuICAgICAgICAgICAgICAgICAgICBjaGVja0Fuc3dlcjogY2hlY2tBbnN3ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgaGludHM6IGhpbnRzXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNvdW50cnlRdWl6O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRRdWVzdGlvblRleHQgPSBmdW5jdGlvbih0eXBlLCBjb3VudHJ5KSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnQ0FQSVRBTF9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJXaWUgaGVpw590IGRpZSBIYXVwdHN0YWR0IHZvbiBbXCIgKyBjb3VudHJ5Lm5hbWUgKyBcIl1cIjtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdDT1VOVFJZX09GX0NBUElUQUwnOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIltcIiArIGNvdW50cnkuY2FwaXRhbCArIFwiXSBpc3QgZGllIEhhdXB0c3RhZHQgdm9uIHdlbGNoZW0gTGFuZFwiXHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnUE9QVUxBVElPTl9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJXaWUgdmllbGUgTWVuc2NoZW4gbGViZW4gaW4gW1wiICsgY291bnRyeS5uYW1lICsgXCJdXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnQVJFQV9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJXaWUgZ3Jvw58gaXN0IGRpZSBGbMOkY2hlIHZvbiBbXCIgKyBjb3VudHJ5Lm5hbWUgKyBcIl1cIjtcclxuXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIj9cIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldFF1ZXN0aW9uQW5zd2VyID0gZnVuY3Rpb24odHlwZSwgY291bnRyeSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0NBUElUQUxfT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFsdFNwZWxsaW5ncyA9IGNvdW50cnkuYWx0U3BlbGxpbmdzICE9PSB1bmRlZmluZWQgJiYgY291bnRyeS5hbHRTcGVsbGluZ3NbJ2NhcGl0YWwnXSAhPT0gdW5kZWZpbmVkID8gY291bnRyeS5hbHRTcGVsbGluZ3NbJ2NhcGl0YWwnXSA6IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JyZWN0OiBjb3VudHJ5LmNhcGl0YWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdFNwZWxsaW5nczogYWx0U3BlbGxpbmdzXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdDT1VOVFJZX09GX0NBUElUQUwnOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbHRTcGVsbGluZ3MgPSBjb3VudHJ5LmFsdFNwZWxsaW5ncyAhPT0gdW5kZWZpbmVkICYmIGNvdW50cnkuYWx0U3BlbGxpbmdzWyduYW1lJ10gIT09IHVuZGVmaW5lZCA/IGNvdW50cnkuYWx0U3BlbGxpbmdzWyduYW1lJ10gOiBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29ycmVjdDogY291bnRyeS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRTcGVsbGluZ3M6IGFsdFNwZWxsaW5nc1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnUE9QVUxBVElPTl9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JyZWN0OiBjb3VudHJ5LnBvcHVsYXRpb25cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ0FSRUFfT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29ycmVjdDogY291bnRyeS5hcmVhXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIj9cIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldENoZWNrQW5zd2VyTGFtYmRhID0gZnVuY3Rpb24odHlwZSwgZnVsbFBvaW50cywgbGFzdFF1ZXN0aW9uQm9udXMpIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdDQVBJVEFMX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnQ09VTlRSWV9PRl9DQVBJVEFMJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oYW5zd2VyLCBzdWJtaXR0ZWRBbnN3ZXIsIGluZm8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvcnJlY3QgPSBzdWJtaXR0ZWRBbnN3ZXIgPT09IGFuc3dlci5jb3JyZWN0IHx8IChhbnN3ZXIuYWx0U3BlbGxpbmdzICYmIGFuc3dlci5hbHRTcGVsbGluZ3MuaW5kZXhPZihzdWJtaXR0ZWRBbnN3ZXIpID49IDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvaW50cyA9IGNvcnJlY3QgPyBmdWxsUG9pbnRzIDogMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvICE9PSB1bmRlZmluZWQgJiYgaW5mby5ib251cyAhPT0gdW5kZWZpbmVkICYmIGluZm8uYm9udXMgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyAqPSBsYXN0UXVlc3Rpb25Cb251cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50cztcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ1BPUFVMQVRJT05fT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdBUkVBX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihhbnN3ZXIsIHN1Ym1pdHRlZEFuc3dlciwgaW5mbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgcGVyY2VudGFnZSBkaWZmZXJlbmNlIGZyb20gY29ycmVjdCBhbnN3ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yUGVyY2VudGFnZSA9IE1hdGguYWJzKHN1Ym1pdHRlZEFuc3dlciAtIGFuc3dlci5jb3JyZWN0KSAvIGFuc3dlci5jb3JyZWN0ICogMTAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvaW50cztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvclBlcmNlbnRhZ2UgPD0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gMTAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yUGVyY2VudGFnZSA8PSA2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSA5MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvclBlcmNlbnRhZ2UgPD0gOSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gODA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3JQZXJjZW50YWdlIDw9IDEyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSA3MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvclBlcmNlbnRhZ2UgPD0gMTQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IDYwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yUGVyY2VudGFnZSA8PSAxNikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gNTA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3JQZXJjZW50YWdlIDw9IDE4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSA0MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvclBlcmNlbnRhZ2UgPD0gMjApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IDMwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yUGVyY2VudGFnZSA8PSAyNSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gMjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3JQZXJjZW50YWdlIDw9IDMwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSAxMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvICE9PSB1bmRlZmluZWQgJiYgaW5mby5ib251cyAhPT0gdW5kZWZpbmVkICYmIGluZm8uYm9udXMgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyAqPSBsYXN0UXVlc3Rpb25Cb251cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50cztcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiP1wiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldFF1ZXN0aW9uSGludHMgPSBmdW5jdGlvbih0eXBlLCBoaW50c1Bvc3NpYmxlLCBoaW50Q29zdCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0NBUElUQUxfT0ZfQ09VTlRSWSc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdDT1VOVFJZX09GX0NBUElUQUwnOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93ZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW06IGhpbnRzUG9zc2libGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvc3Q6IGhpbnRDb3N0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnaXZlOiBmdW5jdGlvbihoaW50c1VzZWQsIGFuc3dlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFuc3dlci5jb3JyZWN0LnN1YnN0cigwLCBoaW50c1VzZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdQT1BVTEFUSU9OX09GX0NPVU5UUlknOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnQVJFQV9PRl9DT1VOVFJZJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxvd2VkOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCI/XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0Q3VycmVudFF1ZXN0aW9uTnVtYmVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICghaXNRdWl6UnVubmluZygpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcXVpei5nZXRDdXJyZW50UXVlc3Rpb25OdW1iZXIoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0TnVtYmVyT2ZRdWl6UXVlc3Rpb25zID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICghaXNRdWl6UnVubmluZygpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcXVpei5nZXROdW1iZXJPZlF1ZXN0aW9ucygpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRDdXJyZW50UXVlc3Rpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCFpc1F1aXpSdW5uaW5nKCkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBxdWl6LmN1cnJlbnRRdWVzdGlvbigpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBuZXh0UXVlc3Rpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCFpc1F1aXpSdW5uaW5nKCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcXVpei5uZXh0UXVlc3Rpb24oKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpbml0OiBpbml0LFxyXG4gICAgICAgICAgICBzZXRDb3VudHJpZXM6IHNldENvdW50cmllcyxcclxuICAgICAgICAgICAgaXNRdWl6UnVubmluZzogaXNRdWl6UnVubmluZyxcclxuICAgICAgICAgICAgZ2V0Q3VycmVudFF1ZXN0aW9uTnVtYmVyOiBnZXRDdXJyZW50UXVlc3Rpb25OdW1iZXIsXHJcbiAgICAgICAgICAgIGdldE51bWJlck9mUXVpelF1ZXN0aW9uczogZ2V0TnVtYmVyT2ZRdWl6UXVlc3Rpb25zLFxyXG4gICAgICAgICAgICBnZXRDdXJyZW50UXVlc3Rpb246IGdldEN1cnJlbnRRdWVzdGlvbixcclxuICAgICAgICAgICAgbmV4dFF1ZXN0aW9uOiBuZXh0UXVlc3Rpb25cclxuICAgICAgICB9O1xyXG4gICAgfSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWFnZWxsYW4nKVxyXG4gICAgLmZhY3RvcnkoJ1VzZXJTcnYnLCBmdW5jdGlvbigkaHR0cCwgQXV0aFRva2VuU3J2KSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICB2YXIgZ2V0VXNlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXInKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0VXNlckZyb21TdG9yYWdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IEF1dGhUb2tlblNydi5nZXRUb2tlbigpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0b2tlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIEF1dGhUb2tlblNydi5zZXRUb2tlbih0b2tlbik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGdldFVzZXIoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBubyB0b2tlbiwgd2UgcmVqZWN0IHRoZSBwcm9taXNlXHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwiTm8gdG9rZW4gaW4gc3RvcmFnZVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb24nLCB7XHJcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsXHJcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcclxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi50b2tlbiA9IHJlc3BvbnNlLmRhdGE7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gc2F2ZSB0b2tlbiBsb2NhbGx5XHJcbiAgICAgICAgICAgICAgICBBdXRoVG9rZW5TcnYuc2V0VG9rZW4oc2VsZi50b2tlbik7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFVzZXIoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGxvZ291dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnRva2VuID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgdG9rZW4gbG9jYWxseVxyXG4gICAgICAgICAgICAgICAgQXV0aFRva2VuU3J2LnNldFRva2VuKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBnZXRVc2VyOiBnZXRVc2VyLFxyXG4gICAgICAgICAgICBnZXRVc2VyRnJvbVN0b3JhZ2U6IGdldFVzZXJGcm9tU3RvcmFnZSxcclxuICAgICAgICAgICAgbG9naW46IGxvZ2luLFxyXG4gICAgICAgICAgICBsb2dvdXQ6IGxvZ291dFxyXG4gICAgICAgIH1cclxuICAgIH0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
